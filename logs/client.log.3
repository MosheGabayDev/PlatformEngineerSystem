[2025-06-04 17:05:08,593] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668294128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668294272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668294416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668294560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668294704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668290672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668290816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668290960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668291104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668291248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668291392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668291536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668291680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668291824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668291968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668292112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668292256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668292400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668292544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668292688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668292832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668292976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668293120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668293264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668293408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668293552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668293696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668293840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668293984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:05:08,599] INFO: Commands: []
[2025-06-04 17:05:31,649] DEBUG: Checking approval status for server 8
[2025-06-04 17:05:31,651] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:05:33,692] DEBUG: Response status code: 200
[2025-06-04 17:05:33,692] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:05:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:05:33,693] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:05:33,694] INFO: Server is approved and ready to process commands
[2025-06-04 17:05:33,695] INFO: Fetching commands...
[2025-06-04 17:05:33,695] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:05:33,696] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:05:35,740] DEBUG: Response status code: 500
[2025-06-04 17:05:35,741] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:05:35 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:05:35,744] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668347856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668348000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668348144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668348288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668348432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668290096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668295424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668295136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668295568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668295712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668295856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668296000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668345408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668345552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668345696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668345840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668345984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668346416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668346560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668346992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668347136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668347280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668347424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668347568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668347712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:05:35,747] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668347856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668348000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668348144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668348288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668348432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668290096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668295424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668295136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668295568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668295712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668295856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668296000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668345408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668345552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668345696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668345840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668345984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668346416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668346560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668346848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668346992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668347136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668347280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668347424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668347568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668347712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:05:35,749] INFO: Commands: []
[2025-06-04 17:05:58,811] DEBUG: Checking approval status for server 8
[2025-06-04 17:05:58,811] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:06:00,859] DEBUG: Response status code: 200
[2025-06-04 17:06:00,860] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:06:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:06:00,860] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:06:00,860] INFO: Server is approved and ready to process commands
[2025-06-04 17:06:00,862] INFO: Fetching commands...
[2025-06-04 17:06:00,863] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:06:00,863] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:06:02,905] DEBUG: Response status code: 500
[2025-06-04 17:06:02,906] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:06:02 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:06:02,908] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668352752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668352896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668353040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668353184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668353328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668349296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668349440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668349584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668349728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668349872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668350016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668350160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668350304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668350448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668350592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668350736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668350880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668351312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668351456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668351888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668352032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668352176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668352320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668352464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668352608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:06:02,910] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668352752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668352896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668353040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668353184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668353328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668349296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668349440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668349584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668349728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668349872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668350016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668350160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668350304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668350448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668350592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668350736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668350880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668351312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668351456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668351744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668351888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668352032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668352176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668352320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668352464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668352608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:06:02,912] INFO: Commands: []
[2025-06-04 17:06:25,959] DEBUG: Checking approval status for server 8
[2025-06-04 17:06:25,959] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:06:27,995] DEBUG: Response status code: 200
[2025-06-04 17:06:27,996] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:06:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:06:27,997] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:06:27,999] INFO: Server is approved and ready to process commands
[2025-06-04 17:06:28,001] INFO: Fetching commands...
[2025-06-04 17:06:28,002] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:06:28,003] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:06:30,051] DEBUG: Response status code: 500
[2025-06-04 17:06:30,051] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:06:30 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:06:30,053] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668357360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668357504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668357648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668357792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668357936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668353904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668354048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668354192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668354336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668354480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668354624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668354768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668354912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668355056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668355200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668355344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668355488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668355632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668355776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668355920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668356064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668356208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668356352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668356496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668356640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668356784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668356928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668357072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668357216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:06:30,054] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668357360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668357504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668357648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668357792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668357936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668353904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668354048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668354192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668354336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668354480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668354624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668354768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668354912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668355056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668355200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668355344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668355488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668355632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668355776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668355920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668356064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668356208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668356352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668356496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668356640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668356784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668356928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668357072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668357216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:06:30,055] INFO: Commands: []
[2025-06-04 17:06:53,108] DEBUG: Checking approval status for server 8
[2025-06-04 17:06:53,108] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:06:55,152] DEBUG: Response status code: 200
[2025-06-04 17:06:55,153] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:06:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:06:55,153] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:06:55,154] INFO: Server is approved and ready to process commands
[2025-06-04 17:06:55,154] INFO: Fetching commands...
[2025-06-04 17:06:55,156] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:06:55,157] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:06:57,211] DEBUG: Response status code: 500
[2025-06-04 17:06:57,211] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:06:57 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:06:57,213] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668427472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668427616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668427760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668427904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668428048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668353472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668358656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668358368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668358800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668358944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668359088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668359232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668359376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668359520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668359664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668359808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668359952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668360384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668360528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668360960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668361104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668361248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668361392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668361536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668427328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:06:57,216] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668427472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668427616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668427760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668427904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668428048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668353472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668358656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668358368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668358800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668358944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668359088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668359232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668359376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668359520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668359664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668359808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668359952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668360384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668360528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668360816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668360960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668361104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668361248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668361392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668361536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668427328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:06:57,217] INFO: Commands: []
[2025-06-04 17:07:20,267] DEBUG: Checking approval status for server 8
[2025-06-04 17:07:20,268] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:07:22,308] DEBUG: Response status code: 200
[2025-06-04 17:07:22,309] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:07:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:07:22,309] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:07:22,310] INFO: Server is approved and ready to process commands
[2025-06-04 17:07:22,310] INFO: Fetching commands...
[2025-06-04 17:07:22,311] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:07:22,311] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:07:24,362] DEBUG: Response status code: 500
[2025-06-04 17:07:24,362] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:07:24 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:07:24,365] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668432368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668432512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668432656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668432800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668432944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668428912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668429056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668429200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668429344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668429488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668429632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668429776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668429920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668430064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668430208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668430352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668430496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668430640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668430784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668430928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668431072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668431216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668431360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668431504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668431648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668431792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668431936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668432080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668432224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:07:24,368] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668432368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668432512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668432656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668432800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668432944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668428912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668429056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668429200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668429344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668429488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668429632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668429776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668429920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668430064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668430208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668430352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668430496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668430640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668430784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668430928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668431072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668431216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668431360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668431504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668431648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668431792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668431936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668432080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668432224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:07:24,370] INFO: Commands: []
[2025-06-04 17:07:47,424] DEBUG: Checking approval status for server 8
[2025-06-04 17:07:47,424] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:07:49,486] DEBUG: Response status code: 200
[2025-06-04 17:07:49,486] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:07:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:07:49,487] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:07:49,488] INFO: Server is approved and ready to process commands
[2025-06-04 17:07:49,489] INFO: Fetching commands...
[2025-06-04 17:07:49,489] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:07:49,490] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:07:51,564] DEBUG: Response status code: 500
[2025-06-04 17:07:51,565] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:07:51 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:07:51,567] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668437120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668437264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668437408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668437552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668437696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668433664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668433808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668433952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668434096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668434240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668434384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668434528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668434672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668434816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668434960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668435104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668435680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668435824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668436112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668436256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668436400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668436544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668436688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668436832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668436976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:07:51,571] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668437120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668437264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668437408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668437552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668437696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668433664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668433808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668433952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668434096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668434240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668434384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668434528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668434672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668434816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668434960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668435104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668435680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668435824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668435968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668436112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668436256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668436400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668436544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668436688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668436832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668436976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:07:51,572] INFO: Commands: []
[2025-06-04 17:08:14,631] DEBUG: Checking approval status for server 8
[2025-06-04 17:08:14,631] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:08:16,664] DEBUG: Response status code: 200
[2025-06-04 17:08:16,665] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:08:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:08:16,665] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:08:16,666] INFO: Server is approved and ready to process commands
[2025-06-04 17:08:16,666] INFO: Fetching commands...
[2025-06-04 17:08:16,666] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:08:16,667] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:08:18,711] DEBUG: Response status code: 500
[2025-06-04 17:08:18,712] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:08:18 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:08:18,715] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668441584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668441728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668441872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668442016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668442160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668433232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668438416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668438128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668438560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668438704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668438848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668438992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668439136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668439280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668439424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668439568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668439712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668439856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668440000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668440144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668440288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668440432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668440576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668440720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668440864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668441008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668441152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668441296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668441440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:08:18,719] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668441584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668441728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668441872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668442016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668442160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668433232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668438416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668438128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668438560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668438704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668438848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668438992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668439136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668439280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668439424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668439568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668439712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668439856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668440000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668440144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668440288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668440432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668440576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668440720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668440864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668441008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668441152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668441296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668441440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:08:18,723] INFO: Commands: []
[2025-06-04 17:08:41,781] DEBUG: Checking approval status for server 8
[2025-06-04 17:08:41,782] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:08:43,825] DEBUG: Response status code: 200
[2025-06-04 17:08:43,825] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:08:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:08:43,826] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:08:43,827] INFO: Server is approved and ready to process commands
[2025-06-04 17:08:43,827] INFO: Fetching commands...
[2025-06-04 17:08:43,828] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:08:43,828] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:08:45,886] DEBUG: Response status code: 500
[2025-06-04 17:08:45,887] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:08:45 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:08:45,891] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668544896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668545040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668545184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668545328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668545472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668443024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668443168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668443312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668443456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668542016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668542160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668542304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668542448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668542592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668542736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668542880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668543456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668543600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668544032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668544176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668544320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668544464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668544608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668544752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:08:45,893] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668544896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668545040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668545184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668545328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668545472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668443024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668443168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668443312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668443456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668542016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668542160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668542304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668542448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668542592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668542736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668542880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668543456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668543600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668543888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668544032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668544176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668544320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668544464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668544608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668544752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:08:45,894] INFO: Commands: []
[2025-06-04 17:09:08,946] DEBUG: Checking approval status for server 8
[2025-06-04 17:09:08,947] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:09:10,987] DEBUG: Response status code: 200
[2025-06-04 17:09:10,987] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:09:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:09:10,988] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:09:10,988] INFO: Server is approved and ready to process commands
[2025-06-04 17:09:10,989] INFO: Fetching commands...
[2025-06-04 17:09:10,990] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:09:10,990] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:09:13,044] DEBUG: Response status code: 500
[2025-06-04 17:09:13,044] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:09:13 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:09:13,047] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668549504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668549648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668549792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668549936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668550080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668546048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668546192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668546336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668546480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668546624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668546768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668546912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668547056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668547200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668547344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668547488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668547632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668547776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668547920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668548064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668548208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668548352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668548496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668548640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668548784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668548928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668549072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668549216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668549360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:09:13,049] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668549504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668549648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668549792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668549936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668550080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668546048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668546192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668546336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668546480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668546624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668546768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668546912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668547056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668547200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668547344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668547488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668547632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668547776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668547920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668548064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668548208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668548352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668548496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668548640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668548784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668548928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668549072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668549216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668549360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:09:13,050] INFO: Commands: []
[2025-06-04 17:09:36,113] DEBUG: Checking approval status for server 8
[2025-06-04 17:09:36,113] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:09:38,161] DEBUG: Response status code: 200
[2025-06-04 17:09:38,162] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:09:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:09:38,162] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:09:38,163] INFO: Server is approved and ready to process commands
[2025-06-04 17:09:38,163] INFO: Fetching commands...
[2025-06-04 17:09:38,165] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:09:38,166] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:09:40,300] DEBUG: Response status code: 500
[2025-06-04 17:09:40,301] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:09:40 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:09:40,308] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668553248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668553392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668553536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668553680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668553824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668428624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668349008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668285632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878667276160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668550656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668550224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668550800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668550512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668550944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668551088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668551232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668551376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668551520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668551664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668551808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668551952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668552096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668552240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668552384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668552528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668552672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668552816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668552960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668553104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:09:40,314] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668553248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668553392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668553536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668553680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668553824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668428624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668349008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668285632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878667276160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668550656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668550224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668550800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668550512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668550944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668551088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668551232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668551376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668551520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668551664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668551808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668551952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668552096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668552240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668552384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668552528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668552672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668552816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668552960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668553104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:09:40,316] INFO: Commands: []
[2025-06-04 17:10:03,361] DEBUG: Checking approval status for server 8
[2025-06-04 17:10:03,362] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:10:05,410] DEBUG: Response status code: 200
[2025-06-04 17:10:05,410] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:10:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:10:05,411] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:10:05,411] INFO: Server is approved and ready to process commands
[2025-06-04 17:10:05,413] INFO: Fetching commands...
[2025-06-04 17:10:05,413] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:10:05,413] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:10:07,474] DEBUG: Response status code: 500
[2025-06-04 17:10:07,475] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:10:07 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:10:07,477] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668558144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668623936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668624080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668624224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668624368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668554688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668554832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668554976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668555120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668555264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668555408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668555552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668555696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668555840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668555984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668556128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668556704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668556848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668557136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668557280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668557424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668557568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668557712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668557856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668558000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:10:07,479] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668558144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668623936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668624080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668624224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668624368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668554688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668554832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668554976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668555120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668555264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668555408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668555552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668555696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668555840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668555984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668556128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668556704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668556848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668556992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668557136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668557280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668557424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668557568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668557712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668557856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668558000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:10:07,480] INFO: Commands: []
[2025-06-04 17:10:30,533] DEBUG: Checking approval status for server 8
[2025-06-04 17:10:30,534] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:10:32,628] DEBUG: Response status code: 200
[2025-06-04 17:10:32,628] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:10:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:10:32,630] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:10:32,632] INFO: Server is approved and ready to process commands
[2025-06-04 17:10:32,632] INFO: Fetching commands...
[2025-06-04 17:10:32,633] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:10:32,634] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:10:34,718] DEBUG: Response status code: 500
[2025-06-04 17:10:34,719] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:10:34 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:10:34,723] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668628400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668628544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668628688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668628832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668628976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668624944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668625088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668625232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668625376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668625520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668625664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668625808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668625952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668626096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668626240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668626384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668626528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668626672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668626816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668626960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668627104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668627248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668627392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668627536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668627680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668627824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668627968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668628112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668628256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:10:34,726] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668628400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668628544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668628688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668628832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668628976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668624944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668625088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668625232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668625376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668625520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668625664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668625808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668625952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668626096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668626240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668626384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668626528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668626672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668626816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668626960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668627104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668627248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668627392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668627536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668627680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668627824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668627968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668628112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668628256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:10:34,726] INFO: Commands: []
[2025-06-04 17:10:57,784] DEBUG: Checking approval status for server 8
[2025-06-04 17:10:57,784] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:10:59,830] DEBUG: Response status code: 200
[2025-06-04 17:10:59,831] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:10:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:10:59,833] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:10:59,834] INFO: Server is approved and ready to process commands
[2025-06-04 17:10:59,835] INFO: Fetching commands...
[2025-06-04 17:10:59,835] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:10:59,836] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:11:01,909] DEBUG: Response status code: 500
[2025-06-04 17:11:01,910] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:11:01 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:11:01,913] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668632864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668633008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668633152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668633296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668633440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668629552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668629120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668629408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668629840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668629984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668630128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668630272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668630416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668630560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668630704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668630848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668630992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668631424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668631568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668632000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668632144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668632288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668632432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668632576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668632720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:11:01,916] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668632864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668633008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668633152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668633296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668633440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668629552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668629120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668629408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668629840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668629984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668630128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668630272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668630416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668630560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668630704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668630848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668630992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668631424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668631568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668631856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668632000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668632144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668632288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668632432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668632576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668632720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:11:01,917] INFO: Commands: []
[2025-06-04 17:11:24,948] DEBUG: Checking approval status for server 8
[2025-06-04 17:11:24,949] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:11:26,989] DEBUG: Response status code: 200
[2025-06-04 17:11:26,989] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:11:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:11:26,990] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:11:26,990] INFO: Server is approved and ready to process commands
[2025-06-04 17:11:26,991] INFO: Fetching commands...
[2025-06-04 17:11:26,993] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:11:26,994] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:11:29,060] DEBUG: Response status code: 500
[2025-06-04 17:11:29,061] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:11:29 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:11:29,064] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668637760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668637904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668638048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668638192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668638336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668634304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668634448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668634592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668634736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668634880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668635024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668635168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668635312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668635456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668635600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668635744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668635888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668636320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668636464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668636896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668637040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668637184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668637328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668637472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668637616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:11:29,067] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668637760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668637904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668638048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668638192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668638336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668634304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668634448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668634592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668634736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668634880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668635024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668635168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668635312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668635456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668635600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668635744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668635888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668636320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668636464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668636752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668636896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668637040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668637184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668637328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668637472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668637616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:11:29,068] INFO: Commands: []
[2025-06-04 17:11:52,116] DEBUG: Checking approval status for server 8
[2025-06-04 17:11:52,117] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:11:54,167] DEBUG: Response status code: 200
[2025-06-04 17:11:54,170] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:11:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:11:54,171] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:11:54,173] INFO: Server is approved and ready to process commands
[2025-06-04 17:11:54,175] INFO: Fetching commands...
[2025-06-04 17:11:54,177] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:11:54,178] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:11:56,248] DEBUG: Response status code: 500
[2025-06-04 17:11:56,248] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:11:56 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:11:56,253] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668773552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668773696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668773840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668773984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668774128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668638912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668639056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668639200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668639344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668639488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668639632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668639776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668639920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668640064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668771392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668771536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668771680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668771824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668771968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668772112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668772256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668772400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668772544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668772688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668772832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668772976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668773120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668773264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668773408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:11:56,254] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668773552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668773696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668773840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668773984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668774128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668638912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668639056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668639200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668639344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668639488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668639632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668639776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668639920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668640064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668771392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668771536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668771680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668771824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668771968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668772112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668772256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668772400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668772544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668772688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668772832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668772976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668773120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668773264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668773408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:11:56,255] INFO: Commands: []
[2025-06-04 17:12:19,315] DEBUG: Checking approval status for server 8
[2025-06-04 17:12:19,315] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:12:21,369] DEBUG: Response status code: 200
[2025-06-04 17:12:21,369] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:12:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:12:21,370] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:12:21,371] INFO: Server is approved and ready to process commands
[2025-06-04 17:12:21,373] INFO: Fetching commands...
[2025-06-04 17:12:21,375] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:12:21,379] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:12:23,471] DEBUG: Response status code: 500
[2025-06-04 17:12:23,472] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:12:23 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
