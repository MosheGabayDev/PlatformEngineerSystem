[2025-06-03 06:25:57,928] ERROR: Error registering client: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:25:57,928] INFO: Fetching commands...
[2025-06-03 06:26:02,061] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:26:02,062] INFO: Commands: []
[2025-06-03 06:26:06,148] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:26:36,149] INFO: Fetching commands...
[2025-06-03 06:26:40,255] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:26:40,256] INFO: Commands: []
[2025-06-03 06:26:44,355] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:27:14,356] INFO: Fetching commands...
[2025-06-03 06:27:18,458] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:27:18,459] INFO: Commands: []
[2025-06-03 06:27:22,583] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:27:52,584] INFO: Fetching commands...
[2025-06-03 06:27:56,682] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:27:56,682] INFO: Commands: []
[2025-06-03 06:28:00,776] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:28:30,778] INFO: Fetching commands...
[2025-06-03 06:28:34,863] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:28:34,863] INFO: Commands: []
[2025-06-03 06:28:38,963] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:29:08,964] INFO: Fetching commands...
[2025-06-03 06:29:13,041] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:29:13,042] INFO: Commands: []
[2025-06-03 06:29:17,152] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:29:47,153] INFO: Fetching commands...
[2025-06-03 06:29:51,238] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:29:51,239] INFO: Commands: []
[2025-06-03 06:29:55,340] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:30:25,341] INFO: Fetching commands...
[2025-06-03 06:30:29,441] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:30:29,441] INFO: Commands: []
[2025-06-03 06:30:33,556] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:31:03,557] INFO: Fetching commands...
[2025-06-03 06:31:07,666] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:31:07,667] INFO: Commands: []
[2025-06-03 06:31:11,759] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:31:41,761] INFO: Fetching commands...
[2025-06-03 06:31:45,859] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:31:45,859] INFO: Commands: []
[2025-06-03 06:31:49,927] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:32:19,928] INFO: Fetching commands...
[2025-06-03 06:32:24,011] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:32:24,012] INFO: Commands: []
[2025-06-03 06:32:28,106] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:32:58,107] INFO: Fetching commands...
[2025-06-03 06:33:02,193] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:33:02,194] INFO: Commands: []
[2025-06-03 06:33:06,278] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:33:36,280] INFO: Fetching commands...
[2025-06-03 06:33:40,348] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:33:40,349] INFO: Commands: []
[2025-06-03 06:33:44,431] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:34:14,432] INFO: Fetching commands...
[2025-06-03 06:34:18,518] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:34:18,519] INFO: Commands: []
[2025-06-03 06:34:22,584] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:34:52,586] INFO: Fetching commands...
[2025-06-03 06:34:56,762] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:34:56,762] INFO: Commands: []
[2025-06-03 06:35:00,893] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:35:30,894] INFO: Fetching commands...
[2025-06-03 06:35:34,960] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:35:34,960] INFO: Commands: []
[2025-06-03 06:35:39,058] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:36:09,059] INFO: Fetching commands...
[2025-06-03 06:36:13,162] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:36:13,163] INFO: Commands: []
[2025-06-03 06:36:17,263] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:36:47,265] INFO: Fetching commands...
[2025-06-03 06:36:51,335] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:36:51,335] INFO: Commands: []
[2025-06-03 06:36:55,406] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:37:25,406] INFO: Fetching commands...
[2025-06-03 06:37:29,501] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:37:29,502] INFO: Commands: []
[2025-06-03 06:37:33,574] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:38:03,575] INFO: Fetching commands...
[2025-06-03 06:38:07,668] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:38:07,668] INFO: Commands: []
[2025-06-03 06:38:11,774] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:38:41,776] INFO: Fetching commands...
[2025-06-03 06:38:45,853] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:38:45,853] INFO: Commands: []
[2025-06-03 06:38:49,925] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:39:19,926] INFO: Fetching commands...
[2025-06-03 06:39:24,035] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:39:24,036] INFO: Commands: []
[2025-06-03 06:39:28,117] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:39:58,118] INFO: Fetching commands...
[2025-06-03 06:40:02,203] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:40:02,203] INFO: Commands: []
[2025-06-03 06:40:06,291] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:40:36,293] INFO: Fetching commands...
[2025-06-03 06:40:40,364] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:40:40,364] INFO: Commands: []
[2025-06-03 06:40:44,435] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:41:14,436] INFO: Fetching commands...
[2025-06-03 06:41:18,497] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:41:18,498] INFO: Commands: []
[2025-06-03 06:41:22,575] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:41:52,577] INFO: Fetching commands...
[2025-06-03 06:41:56,629] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:41:56,630] INFO: Commands: []
[2025-06-03 06:42:00,706] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:42:30,707] INFO: Fetching commands...
[2025-06-03 06:42:34,778] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:42:34,778] INFO: Commands: []
[2025-06-03 06:42:38,843] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:43:08,845] INFO: Fetching commands...
[2025-06-03 06:43:12,950] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:43:12,951] INFO: Commands: []
[2025-06-03 06:43:17,038] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:43:47,039] INFO: Fetching commands...
[2025-06-03 06:43:51,107] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:43:51,108] INFO: Commands: []
[2025-06-03 06:43:55,183] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:44:25,184] INFO: Fetching commands...
[2025-06-03 06:44:29,246] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:44:29,246] INFO: Commands: []
[2025-06-03 06:44:33,330] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:45:03,331] INFO: Fetching commands...
[2025-06-03 06:45:07,428] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:45:07,429] INFO: Commands: []
[2025-06-03 06:45:11,511] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:45:41,511] INFO: Fetching commands...
[2025-06-03 06:45:45,568] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:45:45,569] INFO: Commands: []
[2025-06-03 06:45:49,620] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:46:19,622] INFO: Fetching commands...
[2025-06-03 06:46:23,681] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:46:23,681] INFO: Commands: []
[2025-06-03 06:46:27,750] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:46:57,752] INFO: Fetching commands...
[2025-06-03 06:47:01,821] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:47:01,822] INFO: Commands: []
[2025-06-03 06:47:05,891] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:47:35,892] INFO: Fetching commands...
[2025-06-03 06:47:39,963] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:47:39,963] INFO: Commands: []
[2025-06-03 06:47:44,055] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:48:14,056] INFO: Fetching commands...
[2025-06-03 06:48:18,105] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:48:18,105] INFO: Commands: []
[2025-06-03 06:48:22,174] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:48:52,175] INFO: Fetching commands...
[2025-06-03 06:48:56,241] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:48:56,242] INFO: Commands: []
[2025-06-03 06:49:00,312] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:49:30,314] INFO: Fetching commands...
[2025-06-03 06:49:34,381] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:49:34,381] INFO: Commands: []
[2025-06-03 06:49:38,424] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:50:08,425] INFO: Fetching commands...
[2025-06-03 06:50:12,476] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:50:12,477] INFO: Commands: []
[2025-06-03 06:50:16,545] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:50:46,546] INFO: Fetching commands...
[2025-06-03 06:50:50,622] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:50:50,624] INFO: Commands: []
[2025-06-03 06:50:54,702] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:51:24,703] INFO: Fetching commands...
[2025-06-03 06:51:28,775] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:51:28,776] INFO: Commands: []
[2025-06-03 06:51:32,811] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:52:02,812] INFO: Fetching commands...
[2025-06-03 06:52:06,878] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:52:06,879] INFO: Commands: []
[2025-06-03 06:52:10,934] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:52:40,935] INFO: Fetching commands...
[2025-06-03 06:52:44,995] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:52:44,995] INFO: Commands: []
[2025-06-03 06:52:49,045] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:53:19,047] INFO: Fetching commands...
[2025-06-03 06:53:23,115] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:53:23,116] INFO: Commands: []
[2025-06-03 06:53:27,201] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:53:57,202] INFO: Fetching commands...
[2025-06-03 06:54:01,285] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:54:01,285] INFO: Commands: []
[2025-06-03 06:54:05,350] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:54:35,351] INFO: Fetching commands...
[2025-06-03 06:54:39,416] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:54:39,416] INFO: Commands: []
[2025-06-03 06:54:43,517] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:55:13,519] INFO: Fetching commands...
[2025-06-03 06:55:17,580] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:55:17,581] INFO: Commands: []
[2025-06-03 06:55:21,651] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:55:51,653] INFO: Fetching commands...
[2025-06-03 06:55:55,720] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:55:55,720] INFO: Commands: []
[2025-06-03 06:55:59,783] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:56:29,784] INFO: Fetching commands...
[2025-06-03 06:56:33,844] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:56:33,844] INFO: Commands: []
[2025-06-03 06:56:37,921] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:57:07,923] INFO: Fetching commands...
[2025-06-03 06:57:11,969] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:57:11,970] INFO: Commands: []
[2025-06-03 06:57:16,044] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:57:46,045] INFO: Fetching commands...
[2025-06-03 06:57:50,112] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:57:50,113] INFO: Commands: []
[2025-06-03 06:57:54,179] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:58:24,181] INFO: Fetching commands...
[2025-06-03 06:58:28,275] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:58:28,276] INFO: Commands: []
[2025-06-03 06:58:32,381] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:59:02,383] INFO: Fetching commands...
[2025-06-03 06:59:06,464] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:59:06,465] INFO: Commands: []
[2025-06-03 06:59:10,554] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:59:40,556] INFO: Fetching commands...
[2025-06-03 06:59:44,625] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 06:59:44,625] INFO: Commands: []
[2025-06-03 06:59:48,710] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:00:18,712] INFO: Fetching commands...
[2025-06-03 07:00:22,815] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:00:22,816] INFO: Commands: []
[2025-06-03 07:00:26,911] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:00:56,913] INFO: Fetching commands...
[2025-06-03 07:01:01,005] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:01:01,005] INFO: Commands: []
[2025-06-03 07:01:05,120] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:01:35,121] INFO: Fetching commands...
[2025-06-03 07:01:39,223] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:01:39,223] INFO: Commands: []
[2025-06-03 07:01:43,339] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:02:13,340] INFO: Fetching commands...
[2025-06-03 07:02:17,451] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:02:17,452] INFO: Commands: []
[2025-06-03 07:02:21,573] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:02:51,574] INFO: Fetching commands...
[2025-06-03 07:02:55,681] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:02:55,681] INFO: Commands: []
[2025-06-03 07:02:59,779] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:03:29,780] INFO: Fetching commands...
[2025-06-03 07:03:33,894] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:03:33,895] INFO: Commands: []
[2025-06-03 07:03:37,981] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:04:07,983] INFO: Fetching commands...
[2025-06-03 07:04:12,048] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 07:04:12,048] INFO: Commands: []
[2025-06-03 07:04:16,108] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:09:16,099] ERROR: Error registering client: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:09:16,102] INFO: Fetching commands...
[2025-06-03 09:09:20,185] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:09:20,186] INFO: Commands: []
[2025-06-03 09:09:24,255] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:09:54,256] INFO: Fetching commands...
[2025-06-03 09:09:58,315] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:09:58,315] INFO: Commands: []
[2025-06-03 09:10:02,378] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:10:32,379] INFO: Fetching commands...
[2025-06-03 09:10:36,417] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F29E150>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:10:36,417] INFO: Commands: []
[2025-06-03 09:10:40,490] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F29C790>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:11:10,492] INFO: Fetching commands...
[2025-06-03 09:11:14,547] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F269850>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:11:14,548] INFO: Commands: []
[2025-06-03 09:11:18,590] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F28A510>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:11:48,592] INFO: Fetching commands...
[2025-06-03 09:11:52,627] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F25F990>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:11:52,628] INFO: Commands: []
[2025-06-03 09:11:56,654] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F294E50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:12:26,655] INFO: Fetching commands...
[2025-06-03 09:12:30,693] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F28E610>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:12:30,694] INFO: Commands: []
[2025-06-03 09:12:34,723] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F297C10>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:13:04,724] INFO: Fetching commands...
[2025-06-03 09:13:08,793] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F2972D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:13:08,794] INFO: Commands: []
[2025-06-03 09:13:12,827] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001BD4F28A2D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 09:13:42,829] INFO: Fetching commands...
[2025-06-03 09:13:46,891] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:13:46,891] INFO: Commands: []
[2025-06-03 09:13:50,929] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:14:20,930] INFO: Fetching commands...
[2025-06-03 09:14:24,987] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:14:24,987] INFO: Commands: []
[2025-06-03 09:14:29,047] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:15:01,174] ERROR: Error registering client: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:15:01,175] INFO: Fetching commands...
[2025-06-03 09:15:05,251] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:15:05,252] INFO: Commands: []
[2025-06-03 09:15:09,317] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:15:39,318] INFO: Fetching commands...
[2025-06-03 09:15:43,371] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:15:43,371] INFO: Commands: []
[2025-06-03 09:15:47,446] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:16:17,448] INFO: Fetching commands...
[2025-06-03 09:16:23,408] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:16:23,408] INFO: Commands: []
[2025-06-03 09:16:28,055] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:16:58,057] INFO: Fetching commands...
[2025-06-03 09:17:02,212] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:17:02,212] INFO: Commands: []
[2025-06-03 09:17:06,284] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:17:36,285] INFO: Fetching commands...
[2025-06-03 09:17:40,384] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:17:40,384] INFO: Commands: []
[2025-06-03 09:17:44,858] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:18:14,859] INFO: Fetching commands...
[2025-06-03 09:18:18,991] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:18:18,992] INFO: Commands: []
[2025-06-03 09:18:23,133] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:18:53,134] INFO: Fetching commands...
[2025-06-03 09:18:57,268] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:18:57,269] INFO: Commands: []
[2025-06-03 09:19:01,591] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:19:31,593] INFO: Fetching commands...
[2025-06-03 09:19:35,738] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:19:35,738] INFO: Commands: []
[2025-06-03 09:19:39,855] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:20:09,857] INFO: Fetching commands...
[2025-06-03 09:20:15,035] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:20:15,036] INFO: Commands: []
[2025-06-03 09:20:19,152] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:20:49,154] INFO: Fetching commands...
[2025-06-03 09:20:54,616] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:20:54,616] INFO: Commands: []
[2025-06-03 09:20:58,699] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:21:28,700] INFO: Fetching commands...
[2025-06-03 09:21:32,772] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:21:32,772] INFO: Commands: []
[2025-06-03 09:21:36,828] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:22:06,830] INFO: Fetching commands...
[2025-06-03 09:22:10,897] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:22:10,898] INFO: Commands: []
[2025-06-03 09:22:14,968] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:22:44,968] INFO: Fetching commands...
[2025-06-03 09:22:49,016] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 09:22:49,016] INFO: Commands: []
[2025-06-03 10:33:03,454] ERROR: Error registering client: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:33:03,456] INFO: Fetching commands...
[2025-06-03 10:33:07,550] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:33:07,550] INFO: Commands: []
[2025-06-03 10:35:13,867] ERROR: Failed to register client: {
  "error": "Missing required fields122"
}

[2025-06-03 10:35:13,868] INFO: Fetching commands...
[2025-06-03 10:35:17,987] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:35:17,987] INFO: Commands: []
[2025-06-03 10:35:22,040] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:42:49,046] ERROR: Error registering client: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:42:49,046] INFO: Fetching commands...
[2025-06-03 10:42:53,151] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:42:53,151] INFO: Commands: []
[2025-06-03 10:42:57,215] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:43:27,216] INFO: Fetching commands...
[2025-06-03 10:43:31,260] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:43:31,260] INFO: Commands: []
[2025-06-03 10:43:35,330] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:44:05,330] INFO: Fetching commands...
[2025-06-03 10:44:09,428] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:44:09,429] INFO: Commands: []
[2025-06-03 10:44:13,490] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:44:43,491] INFO: Fetching commands...
[2025-06-03 10:44:47,629] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:44:47,630] INFO: Commands: []
[2025-06-03 10:45:27,274] INFO: Registered client: 8
[2025-06-03 10:45:27,285] INFO: Fetching commands...
[2025-06-03 10:45:31,410] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:45:31,411] INFO: Commands: []
[2025-06-03 10:45:35,488] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:46:07,986] INFO: Fetching commands...
[2025-06-03 10:46:12,065] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:46:12,066] INFO: Commands: []
[2025-06-03 10:46:16,140] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:46:46,142] INFO: Fetching commands...
[2025-06-03 10:46:50,195] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:46:50,195] INFO: Commands: []
[2025-06-03 10:46:54,255] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:47:24,257] INFO: Fetching commands...
[2025-06-03 10:47:28,351] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000017574ED6F50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 10:47:28,351] INFO: Commands: []
[2025-06-03 10:47:32,394] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000017574EDCF50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 10:48:20,541] INFO: Fetching commands...
[2025-06-03 10:48:20,542] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:48:20,542] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:48:24,636] DEBUG: Response status code: 200
[2025-06-03 10:48:24,637] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:48:24 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiYmUyOGNiYmVkMDE2ZDk4ZTU0YTJkNWRmOGJjN2FkYTg5ZjJmZGFiOCJ9.aD6oyA.5CrG2c3nnB4eXyOWDjF7YntUkn4; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:48:24,637] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImJlMjhjYmJlZDAxNmQ5OGU1NGEyZDVkZjhiYzdhZGE4OWYyZmRhYjgi.aD6oyA.ZXUrlJ6uKk3Px5Q1zvp7RgUwqMc">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:48:24,638] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:48:24,695] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:48:24,696] INFO: Commands: []
[2025-06-03 10:55:02,386] INFO: Fetching commands...
[2025-06-03 10:55:02,386] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:55:02,386] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:55:06,455] DEBUG: Response status code: 200
[2025-06-03 10:55:06,455] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:55:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiMDk4MmU3Nzc0M2NjYjlkMjJlMDE2MTI4ZjE0ZjBhMmQ0MjZiMGU4ZSJ9.aD6qWg.A7-R02QwngO--kywEaSVwhYv82c; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:55:06,455] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjA5ODJlNzc3NDNjY2I5ZDIyZTAxNjEyOGYxNGYwYTJkNDI2YjBlOGUi.aD6qWg.9kEiwhivnwse2w20CatEMz9CSOw">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:55:06,456] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:55:06,460] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:55:06,460] INFO: Commands: []
[2025-06-03 10:55:10,535] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:55:40,536] INFO: Fetching commands...
[2025-06-03 10:55:40,536] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:55:40,537] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:55:44,634] DEBUG: Response status code: 200
[2025-06-03 10:55:44,635] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:55:44 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiMjFmZTFiMzk4M2ZkNmY2MjEwM2VlODA2NDcwMmZjOTA4NDM1Y2MzYyJ9.aD6qgA.FPuJmNS8qFrMzkFrHZwKDJxdIcc; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:55:44,636] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjIxZmUxYjM5ODNmZDZmNjIxMDNlZTgwNjQ3MDJmYzkwODQzNWNjM2Mi.aD6qgA.Bts0TJs2XOOHG4bPewS70i2Hc4g">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:55:44,638] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:55:44,641] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:55:44,642] INFO: Commands: []
[2025-06-03 10:55:48,726] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:56:18,728] INFO: Fetching commands...
[2025-06-03 10:56:18,729] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:56:18,729] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:56:22,783] DEBUG: Response status code: 200
[2025-06-03 10:56:22,783] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:56:22 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiYTJmODhhYjdlNWJkNTlkM2VkNzVkOTQ1ZjUwYWI4MzJjZjA1ZDZlMSJ9.aD6qpg.oZMmozKAxYHpT2RtDG3u9fiX3sk; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:56:22,785] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImEyZjg4YWI3ZTViZDU5ZDNlZDc1ZDk0NWY1MGFiODMyY2YwNWQ2ZTEi.aD6qpg.q_Aiupvd8qNbx-wEknGsgK9Fnd8">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:56:22,786] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:56:22,788] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:56:22,789] INFO: Commands: []
[2025-06-03 10:56:26,860] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:56:56,861] INFO: Fetching commands...
[2025-06-03 10:56:56,861] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:56:56,862] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:57:00,921] DEBUG: Response status code: 200
[2025-06-03 10:57:00,921] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:57:00 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiZTFiMDUzMmY5MTAzNWNiMWZiNWM4YjhlOGY5YjBlZWE4ZGY1OGYyZiJ9.aD6qzA.olqJyKAOYzZjgEEvaR4qugr_MGQ; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:57:00,921] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImUxYjA1MzJmOTEwMzVjYjFmYjVjOGI4ZThmOWIwZWVhOGRmNThmMmYi.aD6qzA.OIkbQrVIVyW3XAcgeirQBgf-JiA">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:57:00,923] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:57:00,925] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:57:00,927] INFO: Commands: []
[2025-06-03 10:57:04,983] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:57:34,983] INFO: Fetching commands...
[2025-06-03 10:57:34,983] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:57:34,984] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:57:39,090] DEBUG: Response status code: 200
[2025-06-03 10:57:39,091] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:57:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiYjk4YjAxMTMyOTYwNTk2NGM2NTEwNGVlNDk4ODVhOTIzYjY2MDYxZCJ9.aD6q8w.1HCqEI8DsuHuTlfTVseDlBUcFMU; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:57:39,091] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImI5OGIwMTEzMjk2MDU5NjRjNjUxMDRlZTQ5ODg1YTkyM2I2NjA2MWQi.aD6q8w.ieeu0M5FaJ690ooyMpz56VODY10">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:57:39,091] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:57:39,092] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:57:39,093] INFO: Commands: []
[2025-06-03 10:57:43,166] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:58:13,167] INFO: Fetching commands...
[2025-06-03 10:58:13,168] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:58:13,169] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:58:17,222] DEBUG: Response status code: 200
[2025-06-03 10:58:17,222] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:58:17 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiYWZjY2FlMDc3NmE2Njc5ZjM0ZTczYWFiMzAzNjI3MDAxOWU5NzM3MSJ9.aD6rGQ.mkOZOYFU7pjLxjOE-NMKk4No3QE; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:58:17,224] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImFmY2NhZTA3NzZhNjY3OWYzNGU3M2FhYjMwMzYyNzAwMTllOTczNzEi.aD6rGQ.Lu8jDYxZiGjTma3NJ-SjOprRdK0">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:58:17,224] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:58:17,225] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:58:17,225] INFO: Commands: []
[2025-06-03 10:58:21,280] ERROR: Error checking for update: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:58:51,282] INFO: Fetching commands...
[2025-06-03 10:58:51,283] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:58:51,284] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:58:55,359] DEBUG: Response status code: 200
[2025-06-03 10:58:55,359] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 07:58:55 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiMmZiMGRmMjRhODRiMzk0YWM0N2JjMTA5Yzg1ZGU0Y2YzNTI4YjNiZiJ9.aD6rPw.X4mj7ny77FzD1qgEGzysQ8nOQDE; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 10:58:55,360] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjJmYjBkZjI0YTg0YjM5NGFjNDdiYzEwOWM4NWRlNGNmMzUyOGIzYmYi.aD6rPw.2lMpJ-ZJF7uUOUbBBIrlkW9jEGo">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 10:58:55,360] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 10:58:55,363] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 160, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 10:58:55,364] INFO: Commands: []
[2025-06-03 10:59:01,445] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001F9523B9F90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 10:59:31,446] INFO: Fetching commands...
[2025-06-03 10:59:31,446] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 10:59:31,446] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 10:59:35,546] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001F9523AE550>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 10:59:35,649] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000001F9523AE550>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001F9523AE550>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 148, in fetch_commands
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001F9523AE550>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 10:59:35,650] INFO: Commands: []
[2025-06-03 10:59:39,732] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001F95233CF50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:00:07,542] INFO: Fetching commands...
[2025-06-03 11:00:07,542] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:00:07,542] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:00:11,648] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020E63264E90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:00:11,653] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000020E63264E90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020E63264E90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 149, in fetch_commands
    resp = requests.get(f'{API_BASE}/client/commands/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020E63264E90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:00:11,653] INFO: Commands: []
[2025-06-03 11:00:15,705] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020E63665510>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:00:32,303] INFO: Fetching commands...
[2025-06-03 11:00:32,303] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:00:32,303] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:00:36,460] DEBUG: Response status code: 200
[2025-06-03 11:00:36,460] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:00:36 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiMmY5Zjk3YzhkOWVkZDE1N2Q5ZTViZDI3ZGE5MmYyMTFhYmM3ZmY1YSJ9.aD6rpA.JF8nwPWhiYTblYYACbVuOW86hC4; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 11:00:36,462] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjJmOWY5N2M4ZDllZGQxNTdkOWU1YmQyN2RhOTJmMjExYWJjN2ZmNWEi.aD6rpA.uKN2NRuAAm_42zvKP4BMzV_wc3U">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:00:36,462] ERROR: Error fetching commands: Expecting value: line 1 column 1 (char 0)
[2025-06-03 11:00:36,498] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 161, in fetch_commands
    return resp.json().get('commands', [])
           ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 11:00:36,499] INFO: Commands: []
[2025-06-03 11:05:01,743] DEBUG: Checking approval status for server 8
[2025-06-03 11:05:05,842] DEBUG: Response status code: 200
[2025-06-03 11:05:05,843] ERROR: Error checking approval status: Expecting value: line 1 column 1 (char 0)
[2025-06-03 11:05:05,852] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 971, in json
    return complexjson.loads(self.text, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\json\decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 323, in check_approval_status
    result = resp.json()
             ^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\models.py", line 975, in json
    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

[2025-06-03 11:05:05,853] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:06:05,854] DEBUG: Checking approval status for server 8
[2025-06-03 11:06:09,916] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001DA44335BD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:06:09,927] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000001DA44335BD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001DA44335BD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 319, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001DA44335BD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:06:09,928] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:08:06,519] DEBUG: Checking approval status for server 8
[2025-06-03 11:08:10,643] DEBUG: Response status code: 200
[2025-06-03 11:08:10,644] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:08:10 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiYzVkMjRiMjU2YTc3MGM4N2JhNWY2ZDhhMmVjNDIzN2RmZjJhZDgyYyJ9.aD6tag.wpD9CST-ql9Wvz3K6tvhkVYfCpg; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 11:08:10,644] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImM1ZDI0YjI1NmE3NzBjODdiYTVmNmQ4YTJlYzQyMzdkZmYyYWQ4MmMi.aD6tag.ey3ZBHwaQ6FxX7-LL21xFPaRlPY">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:08:10,645] ERROR: Failed to parse server response as JSON: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImM1ZDI0YjI1NmE3NzBjODdiYTVmNmQ4YTJlYzQyMzdkZmYyYWQ4MmMi.aD6tag.ey3ZBHwaQ6FxX7-LL21xFPaRlPY">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:08:10,646] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:09:10,647] DEBUG: Checking approval status for server 8
[2025-06-03 11:09:16,367] DEBUG: Response status code: 200
[2025-06-03 11:09:16,368] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:09:16 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiOWU5OTE1MTRhNjJhYTE0OTAwYTI2NmI4M2VkOTIwZmNkZWE1MzljMSJ9.aD6trA.g89fyi4bj4EKoWQ4IHWvRy5IKAA; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 11:09:16,368] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjllOTkxNTE0YTYyYWExNDkwMGEyNjZiODNlZDkyMGZjZGVhNTM5YzEi.aD6trA.5XTQrpqiZqmXUXG6QeecARKHfgc">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:09:16,369] ERROR: Failed to parse server response as JSON: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjllOTkxNTE0YTYyYWExNDkwMGEyNjZiODNlZDkyMGZjZGVhNTM5YzEi.aD6trA.5XTQrpqiZqmXUXG6QeecARKHfgc">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:09:16,369] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:09:50,345] DEBUG: Checking approval status for server 8
[2025-06-03 11:09:50,346] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:09:54,423] DEBUG: Response status code: 200
[2025-06-03 11:09:54,423] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:09:54 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiM2NiMmZhODU5NTVmNDAxNmQ1YmFmYmQ3MDNjNmYxNWQzN2RkYzBlMCJ9.aD6t0g.deSrlTeyLvbCqxxzwpLfEGhV9wM; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 11:09:54,424] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjNjYjJmYTg1OTU1ZjQwMTZkNWJhZmJkNzAzYzZmMTVkMzdkZGMwZTAi.aD6t0g.Td94pRMHqp15fZgwvo8tDiiXvSs">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:09:54,424] ERROR: Failed to parse server response as JSON: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjNjYjJmYTg1OTU1ZjQwMTZkNWJhZmJkNzAzYzZmMTVkMzdkZGMwZTAi.aD6t0g.Td94pRMHqp15fZgwvo8tDiiXvSs">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:09:54,424] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:10:22,321] DEBUG: Checking approval status for server 8
[2025-06-03 11:10:22,321] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:10:26,417] DEBUG: Response status code: 200
[2025-06-03 11:10:26,417] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:10:26 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiMmJlZDhhNTNjOGFmZmNhOTdkYjY0ZDZmOTM4OWFiOTZkMWI0Y2JjNyJ9.aD6t8g.O0FZCx0rTu493ugn8rBBpeMe4uw; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 11:10:26,418] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjJiZWQ4YTUzYzhhZmZjYTk3ZGI2NGQ2ZjkzODlhYjk2ZDFiNGNiYzci.aD6t8g.H9WxMnOfksZF_yVHCikF2fNBpTM">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:10:26,418] ERROR: Failed to parse server response as JSON: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="IjJiZWQ4YTUzYzhhZmZjYTk3ZGI2NGQ2ZjkzODlhYjk2ZDFiNGNiYzci.aD6t8g.H9WxMnOfksZF_yVHCikF2fNBpTM">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:10:26,419] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:11:26,421] DEBUG: Checking approval status for server 8
[2025-06-03 11:11:26,421] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:11:46,017] DEBUG: Checking approval status for server 8
[2025-06-03 11:11:46,017] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:11:50,112] DEBUG: Response status code: 200
[2025-06-03 11:11:50,112] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:11:50 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '3881', 'Vary': 'Cookie', 'Set-Cookie': 'session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiZTQ4ZTZiNTcyMzNmMjZkZTJiNDk0MGY5OWI2Zjc2MGY3NjJlNGVmNSJ9.aD6uRg.nSOro5QmT7oLVmy_B7CRD0IFwWk; HttpOnly; Path=/', 'Connection': 'close'}
[2025-06-03 11:11:50,113] DEBUG: Raw response text: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImU0OGU2YjU3MjMzZjI2ZGUyYjQ5NDBmOTliNmY3NjBmNzYyZTRlZjUi.aD6uRg.DiUP2D-2YO-7SdUTo-gDE_3GtSY">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:11:50,114] ERROR: Failed to parse server response as JSON: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/static/assets/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="https://app-generator.dev/product/adminlte/"/>
  
  <title>
    AdminLTE Flask -  Login  | App-Generator.dev
  </title> 

  <!-- Specific Page CSS goes HERE  -->  
  

  <!-- Google Font: Source Sans Pro -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="/static/assets/plugins/fontawesome-free/css/all.min.css">
  <!-- icheck bootstrap -->
  <link rel="stylesheet" href="/static/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="/static/assets/css/adminlte.min.css">



</head>
<body class="hold-transition  login-page ">

  

  <div class="login-box">

    <div class="login-logo">
        <a target="_blank" rel="noopener noreferrer" 
           href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE Flask</a>
    </div>

    <!-- /.login-logo -->
    <div class="card">
      <div class="card-body login-card-body">

            <p class="login-box-msg">
            
                Add your credentials
            
        </p>

        <form method="post" action="">

          <input id="csrf_token" name="csrf_token" type="hidden" value="ImU0OGU2YjU3MjMzZjI2ZGUyYjQ5NDBmOTliNmY3NjBmNzYyZTRlZjUi.aD6uRg.DiUP2D-2YO-7SdUTo-gDE_3GtSY">

          <div class="input-group mb-3">
            <label for="username" class="w-100">Username <span style="color:red">*</span></label>
            <input class="form-control" id="username_login" name="username" placeholder="Username" required type="text" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-envelope"></span>
              </div>
            </div>
          </div>
          <div class="input-group mb-3">
            <label for="password" class="w-100">Password <span style="color:red">*</span></label>
            <input class="form-control" id="pwd_login" name="password" placeholder="Password" required type="password" value="">
            <div class="input-group-append">
              <div class="input-group-text">
                <span class="fas fa-lock"></span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-8">
              <div class="icheck-primary">
                <input type="checkbox" id="remember">
                <label for="remember">
                  Remember Me
                </label>
              </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
              <button type="submit" name="login" class="btn btn-primary btn-block">Sign In</button>
            </div>
            <!-- /.col -->
          </div>
        </form>

        

        <br /><br />

        <div class="text-center">
            Not a member? <a href="/register" class="text-center">Register</a>
            <br />
            <br />
            &copy;
            <a target="_blank" rel="noopener noreferrer"
               href="https://app-generator.dev/product/adminlte/flask/"><b>Admin</b>LTE</a> 
            - coded by <a target="_blank" rel="noopener noreferrer" href="https://app-generator.dev">App-Generator.dev</a>.
        </div>

      </div>
      <!-- /.login-card-body -->
    </div>

  </div>



  <!-- Specific Page JS goes HERE  -->
  

  <!-- jQuery -->
  <script src="/static/assets/plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4 -->
  <script src="/static/assets/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>



</body>
</html>
[2025-06-03 11:11:50,114] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:13:48,622] DEBUG: Checking approval status for server 8
[2025-06-03 11:13:48,623] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:13:50,659] DEBUG: Response status code: 500
[2025-06-03 11:13:50,660] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:13:50 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '15914', 'Connection': 'close'}
[2025-06-03 11:13:50,662] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2nA9ItDpTKGC5fRpQWFC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2712674130032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2712674131472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2712674131616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2712674131760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">245</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def locate_app(</pre>
<pre class="line before"><span class="ws">    </span>module_name: str, app_name: str | None, raise_if_not_found: bool = True</pre>
<pre class="line before"><span class="ws"></span>) -&gt; Flask | None:</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>__import__(module_name)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except ImportError:</pre>
<pre class="line after"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line after"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line after"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(</pre></div>
</div>

<li><div class="frame" id="frame-2712674131904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">&lt;module&gt;</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app_config = config_dict[get_config_mode.capitalize()]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>except KeyError:</pre>
<pre class="line before"><span class="ws">    </span>exit(&#39;Error: Invalid &lt;config_mode&gt;. Expected values [Debug, Production] &#39;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws"></span>app = create_app(app_config)
<span class="ws"></span>      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>from apps.authentication import init_app</pre>
<pre class="line after"><span class="ws"></span>init_app(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Create tables &amp; Fallback to SQLite</pre></div>
</div>

<li><div class="frame" id="frame-2712674132048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">81</em>,
      in <code class="function">create_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app = Flask(__name__, static_url_path=static_prefix, template_folder=TEMPLATES_FOLDER, static_folder=STATIC_FOLDER)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>app.config.from_object(config)</pre>
<pre class="line before"><span class="ws">    </span>register_extensions(app)</pre>
<pre class="line before"><span class="ws">    </span>register_blueprints(app)</pre>
<pre class="line current"><span class="ws">    </span>configure_database(app)
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>app.register_blueprint(scheduled_tasks_bp)</pre>
<pre class="line after"><span class="ws">    </span>Swagger(app)</pre>
<pre class="line after"><span class="ws">    </span># start_scheduler(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># --- LOGGING CONFIGURATION ---</pre></div>
</div>

<li><div class="frame" id="frame-2712674132192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">53</em>,
      in <code class="function">configure_database</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Initialize client API with custom configuration</pre>
<pre class="line before"><span class="ws">    </span>from apps.api import init_app as init_client_api</pre>
<pre class="line before"><span class="ws">    </span>init_client_api(app)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def configure_database(app):</pre>
<pre class="line current"><span class="ws">    </span>@app.before_first_request
<span class="ws">    </span> ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>def initialize_database():</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>db.create_all()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>print(&#39;&gt; Error: DBMS Exception: &#39; + str(e))</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 29, in &lt;module&gt;
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 81, in create_app
    configure_database(app)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 29, in <module>
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 81, in create_app
    configure_database(app)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flask' object has no attribute 'before_first_request'


-->

[2025-06-03 11:13:50,663] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2nA9ItDpTKGC5fRpQWFC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2712674130032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2712674131472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2712674131616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2712674131760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">245</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def locate_app(</pre>
<pre class="line before"><span class="ws">    </span>module_name: str, app_name: str | None, raise_if_not_found: bool = True</pre>
<pre class="line before"><span class="ws"></span>) -&gt; Flask | None:</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>__import__(module_name)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except ImportError:</pre>
<pre class="line after"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line after"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line after"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(</pre></div>
</div>

<li><div class="frame" id="frame-2712674131904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">&lt;module&gt;</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app_config = config_dict[get_config_mode.capitalize()]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>except KeyError:</pre>
<pre class="line before"><span class="ws">    </span>exit(&#39;Error: Invalid &lt;config_mode&gt;. Expected values [Debug, Production] &#39;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws"></span>app = create_app(app_config)
<span class="ws"></span>      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>from apps.authentication import init_app</pre>
<pre class="line after"><span class="ws"></span>init_app(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Create tables &amp; Fallback to SQLite</pre></div>
</div>

<li><div class="frame" id="frame-2712674132048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">81</em>,
      in <code class="function">create_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app = Flask(__name__, static_url_path=static_prefix, template_folder=TEMPLATES_FOLDER, static_folder=STATIC_FOLDER)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>app.config.from_object(config)</pre>
<pre class="line before"><span class="ws">    </span>register_extensions(app)</pre>
<pre class="line before"><span class="ws">    </span>register_blueprints(app)</pre>
<pre class="line current"><span class="ws">    </span>configure_database(app)
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>app.register_blueprint(scheduled_tasks_bp)</pre>
<pre class="line after"><span class="ws">    </span>Swagger(app)</pre>
<pre class="line after"><span class="ws">    </span># start_scheduler(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># --- LOGGING CONFIGURATION ---</pre></div>
</div>

<li><div class="frame" id="frame-2712674132192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">53</em>,
      in <code class="function">configure_database</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Initialize client API with custom configuration</pre>
<pre class="line before"><span class="ws">    </span>from apps.api import init_app as init_client_api</pre>
<pre class="line before"><span class="ws">    </span>init_client_api(app)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def configure_database(app):</pre>
<pre class="line current"><span class="ws">    </span>@app.before_first_request
<span class="ws">    </span> ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>def initialize_database():</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>db.create_all()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>print(&#39;&gt; Error: DBMS Exception: &#39; + str(e))</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 29, in &lt;module&gt;
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 81, in create_app
    configure_database(app)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 29, in <module>
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 81, in create_app
    configure_database(app)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flask' object has no attribute 'before_first_request'


-->

[2025-06-03 11:13:50,664] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:14:12,999] DEBUG: Checking approval status for server 8
[2025-06-03 11:14:12,999] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:14:15,098] DEBUG: Response status code: 500
[2025-06-03 11:14:15,098] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:14:15 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '19827', 'Connection': 'close'}
[2025-06-03 11:14:15,099] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2nA9ItDpTKGC5fRpQWFC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2712674132480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2712674132336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-2712674134208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2712674134352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2712674134496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2712674134640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">245</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def locate_app(</pre>
<pre class="line before"><span class="ws">    </span>module_name: str, app_name: str | None, raise_if_not_found: bool = True</pre>
<pre class="line before"><span class="ws"></span>) -&gt; Flask | None:</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>__import__(module_name)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except ImportError:</pre>
<pre class="line after"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line after"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line after"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(</pre></div>
</div>

<li><div class="frame" id="frame-2712674134784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">&lt;module&gt;</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app_config = config_dict[get_config_mode.capitalize()]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>except KeyError:</pre>
<pre class="line before"><span class="ws">    </span>exit(&#39;Error: Invalid &lt;config_mode&gt;. Expected values [Debug, Production] &#39;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws"></span>app = create_app(app_config)
<span class="ws"></span>      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>from apps.authentication import init_app</pre>
<pre class="line after"><span class="ws"></span>init_app(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Create tables &amp; Fallback to SQLite</pre></div>
</div>

<li><div class="frame" id="frame-2712674134928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">81</em>,
      in <code class="function">create_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app = Flask(__name__, static_url_path=static_prefix, template_folder=TEMPLATES_FOLDER, static_folder=STATIC_FOLDER)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>app.config.from_object(config)</pre>
<pre class="line before"><span class="ws">    </span>register_extensions(app)</pre>
<pre class="line before"><span class="ws">    </span>register_blueprints(app)</pre>
<pre class="line current"><span class="ws">    </span>configure_database(app)
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>app.register_blueprint(scheduled_tasks_bp)</pre>
<pre class="line after"><span class="ws">    </span>Swagger(app)</pre>
<pre class="line after"><span class="ws">    </span># start_scheduler(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># --- LOGGING CONFIGURATION ---</pre></div>
</div>

<li><div class="frame" id="frame-2712674135072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">53</em>,
      in <code class="function">configure_database</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Initialize client API with custom configuration</pre>
<pre class="line before"><span class="ws">    </span>from apps.api import init_app as init_client_api</pre>
<pre class="line before"><span class="ws">    </span>init_client_api(app)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def configure_database(app):</pre>
<pre class="line current"><span class="ws">    </span>@app.before_first_request
<span class="ws">    </span> ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>def initialize_database():</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>db.create_all()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>print(&#39;&gt; Error: DBMS Exception: &#39; + str(e))</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 29, in &lt;module&gt;
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 81, in create_app
    configure_database(app)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 29, in <module>
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 81, in create_app
    configure_database(app)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flask' object has no attribute 'before_first_request'


-->

[2025-06-03 11:14:15,099] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2nA9ItDpTKGC5fRpQWFC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2712674132480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2712674132336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-2712674134208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2712674134352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2712674134496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2712674134640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">245</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def locate_app(</pre>
<pre class="line before"><span class="ws">    </span>module_name: str, app_name: str | None, raise_if_not_found: bool = True</pre>
<pre class="line before"><span class="ws"></span>) -&gt; Flask | None:</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>__import__(module_name)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except ImportError:</pre>
<pre class="line after"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line after"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line after"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(</pre></div>
</div>

<li><div class="frame" id="frame-2712674134784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">&lt;module&gt;</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app_config = config_dict[get_config_mode.capitalize()]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>except KeyError:</pre>
<pre class="line before"><span class="ws">    </span>exit(&#39;Error: Invalid &lt;config_mode&gt;. Expected values [Debug, Production] &#39;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws"></span>app = create_app(app_config)
<span class="ws"></span>      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>from apps.authentication import init_app</pre>
<pre class="line after"><span class="ws"></span>init_app(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Create tables &amp; Fallback to SQLite</pre></div>
</div>

<li><div class="frame" id="frame-2712674134928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">81</em>,
      in <code class="function">create_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>app = Flask(__name__, static_url_path=static_prefix, template_folder=TEMPLATES_FOLDER, static_folder=STATIC_FOLDER)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>app.config.from_object(config)</pre>
<pre class="line before"><span class="ws">    </span>register_extensions(app)</pre>
<pre class="line before"><span class="ws">    </span>register_blueprints(app)</pre>
<pre class="line current"><span class="ws">    </span>configure_database(app)
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>app.register_blueprint(scheduled_tasks_bp)</pre>
<pre class="line after"><span class="ws">    </span>Swagger(app)</pre>
<pre class="line after"><span class="ws">    </span># start_scheduler(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># --- LOGGING CONFIGURATION ---</pre></div>
</div>

<li><div class="frame" id="frame-2712674135072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py"</cite>,
      line <em class="line">53</em>,
      in <code class="function">configure_database</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Initialize client API with custom configuration</pre>
<pre class="line before"><span class="ws">    </span>from apps.api import init_app as init_client_api</pre>
<pre class="line before"><span class="ws">    </span>init_client_api(app)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def configure_database(app):</pre>
<pre class="line current"><span class="ws">    </span>@app.before_first_request
<span class="ws">    </span> ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>def initialize_database():</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>db.create_all()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>print(&#39;&gt; Error: DBMS Exception: &#39; + str(e))</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 29, in &lt;module&gt;
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 81, in create_app
    configure_database(app)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: &#39;Flask&#39; object has no attribute &#39;before_first_request&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 29, in <module>
    app = create_app(app_config)
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 81, in create_app
    configure_database(app)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 53, in configure_database
    @app.before_first_request
     ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Flask' object has no attribute 'before_first_request'


-->

[2025-06-03 11:14:15,100] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:16:18,520] DEBUG: Checking approval status for server 8
[2025-06-03 11:16:18,521] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:16:20,584] DEBUG: Response status code: 200
[2025-06-03 11:16:20,584] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:16:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:16:20,584] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:16:20,585] INFO: Server is approved and ready to process commands
[2025-06-03 11:16:20,585] INFO: Fetching commands...
[2025-06-03 11:16:20,585] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:16:20,586] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:16:22,616] DEBUG: Response status code: 200
[2025-06-03 11:16:22,616] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:16:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:16:22,616] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:16:22,617] INFO: Commands: []
[2025-06-03 11:16:54,658] DEBUG: Checking approval status for server 8
[2025-06-03 11:16:54,658] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:16:56,693] DEBUG: Response status code: 200
[2025-06-03 11:16:56,693] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:16:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:16:56,694] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:16:56,694] INFO: Server is approved and ready to process commands
[2025-06-03 11:16:56,694] INFO: Fetching commands...
[2025-06-03 11:16:56,695] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:16:56,695] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:16:58,725] DEBUG: Response status code: 200
[2025-06-03 11:16:58,725] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:16:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:16:58,725] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:16:58,726] INFO: Commands: []
[2025-06-03 11:17:30,751] DEBUG: Checking approval status for server 8
[2025-06-03 11:17:30,751] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:17:32,779] DEBUG: Response status code: 200
[2025-06-03 11:17:32,779] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:17:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:17:32,780] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:17:32,781] INFO: Server is approved and ready to process commands
[2025-06-03 11:17:32,782] INFO: Fetching commands...
[2025-06-03 11:17:32,782] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:17:32,782] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:17:34,838] DEBUG: Response status code: 200
[2025-06-03 11:17:34,839] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:17:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:17:34,840] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:17:34,841] INFO: Commands: []
[2025-06-03 11:18:06,864] DEBUG: Checking approval status for server 8
[2025-06-03 11:18:06,864] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:18:08,885] DEBUG: Response status code: 200
[2025-06-03 11:18:08,886] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:18:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:18:08,886] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:18:08,887] INFO: Server is approved and ready to process commands
[2025-06-03 11:18:08,888] INFO: Fetching commands...
[2025-06-03 11:18:08,889] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:18:08,892] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:18:10,931] DEBUG: Response status code: 200
[2025-06-03 11:18:10,931] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:18:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:18:10,932] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:18:10,932] INFO: Commands: []
[2025-06-03 11:18:42,961] DEBUG: Checking approval status for server 8
[2025-06-03 11:18:42,962] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:18:47,027] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448CE1EFD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:18:47,120] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002448CE1EFD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448CE1EFD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448CE1EFD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:18:47,121] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:19:47,122] DEBUG: Checking approval status for server 8
[2025-06-03 11:19:47,122] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:19:51,194] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D206710>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:19:51,197] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002448D206710>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D206710>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D206710>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:19:51,197] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:20:51,199] DEBUG: Checking approval status for server 8
[2025-06-03 11:20:51,199] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:20:55,281] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D210250>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:20:55,283] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002448D210250>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D210250>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D210250>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:20:55,283] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:21:55,284] DEBUG: Checking approval status for server 8
[2025-06-03 11:21:55,284] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:21:59,374] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D2122D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:21:59,377] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002448D2122D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D2122D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D2122D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:21:59,378] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:22:59,378] DEBUG: Checking approval status for server 8
[2025-06-03 11:22:59,379] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:23:03,414] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D2188D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:23:03,416] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002448D2188D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D2188D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002448D2188D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:23:03,416] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:24:03,417] DEBUG: Checking approval status for server 8
[2025-06-03 11:24:03,419] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:24:05,473] DEBUG: Response status code: 200
[2025-06-03 11:24:05,474] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:24:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:24:05,476] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:24:05,477] INFO: Server is approved and ready to process commands
[2025-06-03 11:24:05,477] INFO: Fetching commands...
[2025-06-03 11:24:05,478] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:24:05,478] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:24:07,529] DEBUG: Response status code: 200
[2025-06-03 11:24:07,530] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:24:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:24:07,531] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:24:07,532] INFO: Commands: []
[2025-06-03 11:24:39,576] DEBUG: Checking approval status for server 8
[2025-06-03 11:24:39,576] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:24:41,624] DEBUG: Response status code: 200
[2025-06-03 11:24:41,624] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:24:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:24:41,626] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:24:41,626] INFO: Server is approved and ready to process commands
[2025-06-03 11:24:41,626] INFO: Fetching commands...
[2025-06-03 11:24:41,626] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:24:41,627] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:24:45,004] DEBUG: Response status code: 200
[2025-06-03 11:24:45,005] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:24:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:24:45,005] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:24:45,006] INFO: Commands: []
[2025-06-03 11:33:06,022] DEBUG: Checking approval status for server 8
[2025-06-03 11:33:06,023] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:33:08,044] DEBUG: Response status code: 200
[2025-06-03 11:33:08,045] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:33:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:33:08,045] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:33:08,046] INFO: Server is approved and ready to process commands
[2025-06-03 11:33:08,046] INFO: Fetching commands...
[2025-06-03 11:33:08,047] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:33:08,047] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:33:10,059] DEBUG: Response status code: 200
[2025-06-03 11:33:10,059] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:33:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:33:10,060] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:33:10,061] INFO: Commands: []
[2025-06-03 11:33:42,073] DEBUG: Checking approval status for server 8
[2025-06-03 11:33:42,073] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:33:44,100] DEBUG: Response status code: 200
[2025-06-03 11:33:44,101] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:33:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:33:44,102] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:33:44,102] INFO: Server is approved and ready to process commands
[2025-06-03 11:33:44,102] INFO: Fetching commands...
[2025-06-03 11:33:44,103] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:33:44,104] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:33:46,149] DEBUG: Response status code: 200
[2025-06-03 11:33:46,149] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:33:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:33:46,150] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:33:46,150] INFO: Commands: []
[2025-06-03 11:34:18,199] DEBUG: Checking approval status for server 8
[2025-06-03 11:34:18,199] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:34:20,254] DEBUG: Response status code: 200
[2025-06-03 11:34:20,255] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:34:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:34:20,255] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:34:20,256] INFO: Server is approved and ready to process commands
[2025-06-03 11:34:20,256] INFO: Fetching commands...
[2025-06-03 11:34:20,256] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:34:20,258] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:34:22,291] DEBUG: Response status code: 200
[2025-06-03 11:34:22,292] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:34:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:34:22,292] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:34:22,293] INFO: Commands: []
[2025-06-03 11:34:54,323] DEBUG: Checking approval status for server 8
[2025-06-03 11:34:54,323] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:34:56,350] DEBUG: Response status code: 200
[2025-06-03 11:34:56,351] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:34:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:34:56,351] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:34:56,352] INFO: Server is approved and ready to process commands
[2025-06-03 11:34:56,352] INFO: Fetching commands...
[2025-06-03 11:34:56,353] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:34:56,353] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:34:58,374] DEBUG: Response status code: 200
[2025-06-03 11:34:58,374] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:34:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:34:58,375] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:34:58,375] INFO: Commands: []
[2025-06-03 11:35:30,428] DEBUG: Checking approval status for server 8
[2025-06-03 11:35:30,428] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:35:32,499] DEBUG: Response status code: 200
[2025-06-03 11:35:32,499] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:35:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:35:32,500] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:35:32,500] INFO: Server is approved and ready to process commands
[2025-06-03 11:35:32,502] INFO: Fetching commands...
[2025-06-03 11:35:32,502] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:35:32,503] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:35:34,522] DEBUG: Response status code: 200
[2025-06-03 11:35:34,522] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:35:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 11:35:34,522] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 11:35:34,523] INFO: Commands: []
[2025-06-03 11:36:06,571] DEBUG: Checking approval status for server 8
[2025-06-03 11:36:06,571] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:36:08,617] DEBUG: Response status code: 200
[2025-06-03 11:36:08,617] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:36:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 11:36:08,618] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 11:36:08,619] INFO: Server is approved and ready to process commands
[2025-06-03 11:36:08,619] INFO: Fetching commands...
[2025-06-03 11:36:08,619] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 11:36:08,620] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:56:55,579] DEBUG: Checking approval status for server 8
[2025-06-03 11:56:55,579] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:56:57,631] DEBUG: Response status code: 404
[2025-06-03 11:56:57,631] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:56:57 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 11:56:57,632] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 11:56:57,633] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 11:56:57,633] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:57:57,634] DEBUG: Checking approval status for server 8
[2025-06-03 11:57:57,635] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:57:59,683] DEBUG: Response status code: 404
[2025-06-03 11:57:59,683] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 08:57:59 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 11:57:59,683] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 11:57:59,684] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 11:57:59,684] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 11:58:59,686] DEBUG: Checking approval status for server 8
[2025-06-03 11:58:59,686] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 11:59:03,755] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001C36057DED0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 11:59:03,868] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000001C36057DED0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001C36057DED0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001C36057DED0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 11:59:03,868] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:00:03,870] DEBUG: Checking approval status for server 8
[2025-06-03 12:00:03,871] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:00:07,934] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001C360969B50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 12:00:07,937] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000001C360969B50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001C360969B50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001C360969B50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 12:00:07,938] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:01:07,940] DEBUG: Checking approval status for server 8
[2025-06-03 12:01:07,940] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:01:09,980] DEBUG: Response status code: 404
[2025-06-03 12:01:09,981] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:01:09 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:01:09,981] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:01:09,982] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:01:09,982] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:02:09,983] DEBUG: Checking approval status for server 8
[2025-06-03 12:02:09,985] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:02:12,026] DEBUG: Response status code: 404
[2025-06-03 12:02:12,028] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:02:12 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:02:12,029] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:02:12,029] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:02:12,029] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:03:12,031] DEBUG: Checking approval status for server 8
[2025-06-03 12:03:12,031] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:03:14,055] DEBUG: Response status code: 404
[2025-06-03 12:03:14,055] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:03:14 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:03:14,056] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:03:14,057] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:03:14,058] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:04:14,060] DEBUG: Checking approval status for server 8
[2025-06-03 12:04:14,062] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:04:16,110] DEBUG: Response status code: 404
[2025-06-03 12:04:16,111] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:04:16 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:04:16,112] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:04:16,113] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:04:16,115] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:05:16,116] DEBUG: Checking approval status for server 8
[2025-06-03 12:05:16,116] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:05:18,156] DEBUG: Response status code: 404
[2025-06-03 12:05:18,156] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:05:18 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:05:18,157] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:05:18,157] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:05:18,158] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:07:10,976] DEBUG: Checking approval status for server 8
[2025-06-03 12:07:10,976] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:07:13,030] DEBUG: Response status code: 404
[2025-06-03 12:07:13,030] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:07:13 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:07:13,031] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:07:13,032] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:07:13,032] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:08:13,034] DEBUG: Checking approval status for server 8
[2025-06-03 12:08:13,035] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:08:15,086] DEBUG: Response status code: 404
[2025-06-03 12:08:15,086] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:08:15 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:08:15,088] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:08:15,088] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:08:15,088] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:09:15,090] DEBUG: Checking approval status for server 8
[2025-06-03 12:09:15,091] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:09:17,138] DEBUG: Response status code: 404
[2025-06-03 12:09:17,139] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:09:17 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:09:17,139] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:09:17,140] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:09:17,141] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:10:17,141] DEBUG: Checking approval status for server 8
[2025-06-03 12:10:17,141] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:10:19,182] DEBUG: Response status code: 404
[2025-06-03 12:10:19,182] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:10:19 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:10:19,183] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:10:19,183] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:10:19,184] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:11:19,186] DEBUG: Checking approval status for server 8
[2025-06-03 12:11:19,186] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:11:21,202] DEBUG: Response status code: 404
[2025-06-03 12:11:21,202] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:11:21 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:11:21,203] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:11:21,203] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:11:21,203] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:12:21,204] DEBUG: Checking approval status for server 8
[2025-06-03 12:12:21,205] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:12:23,212] DEBUG: Response status code: 404
[2025-06-03 12:12:23,213] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:12:23 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:12:23,214] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:12:23,214] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:12:23,215] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:13:23,215] DEBUG: Checking approval status for server 8
[2025-06-03 12:13:23,215] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:13:25,239] DEBUG: Response status code: 404
[2025-06-03 12:13:25,240] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:13:25 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:13:25,240] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:13:25,241] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:13:25,241] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:14:25,243] DEBUG: Checking approval status for server 8
[2025-06-03 12:14:25,243] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:14:27,286] DEBUG: Response status code: 404
[2025-06-03 12:14:27,287] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:14:27 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:14:27,289] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:14:27,290] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:14:27,290] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:15:27,291] DEBUG: Checking approval status for server 8
[2025-06-03 12:15:27,291] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:15:29,354] DEBUG: Response status code: 404
[2025-06-03 12:15:29,354] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:15:29 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:15:29,355] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:15:29,355] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:15:29,356] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:15:35,709] DEBUG: Checking approval status for server 8
[2025-06-03 12:15:35,710] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:15:37,795] DEBUG: Response status code: 404
[2025-06-03 12:15:37,795] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:15:37 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:15:37,796] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:15:37,797] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:15:37,798] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:16:37,799] DEBUG: Checking approval status for server 8
[2025-06-03 12:16:37,800] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:16:39,842] DEBUG: Response status code: 404
[2025-06-03 12:16:39,842] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:16:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:16:39,843] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:16:39,844] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:16:39,844] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:21:46,071] DEBUG: Checking approval status for server 8
[2025-06-03 12:21:46,071] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:21:48,138] DEBUG: Response status code: 200
[2025-06-03 12:21:48,138] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:21:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 12:21:48,139] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 12:21:48,139] INFO: Server is approved and ready to process commands
[2025-06-03 12:21:48,140] INFO: Fetching commands...
[2025-06-03 12:21:48,141] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:21:48,142] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:21:50,208] DEBUG: Response status code: 200
[2025-06-03 12:21:50,209] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:21:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '290', 'Connection': 'close'}
[2025-06-03 12:21:50,209] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "created_at": null,
      "id": "1",
      "timeout": 300
    },
    {
      "as_admin": true,
      "command": "dir",
      "created_at": "2025-06-03T09:04:27",
      "id": "2",
      "timeout": 300
    }
  ]
}
[2025-06-03 12:21:50,211] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'created_at': None, 'id': '1', 'timeout': 300}, {'as_admin': True, 'command': 'dir', 'created_at': '2025-06-03T09:04:27', 'id': '2', 'timeout': 300}]
[2025-06-03 12:21:52,247] INFO: Running command: dir (admin=True)
[2025-06-03 12:21:52,575] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025  11:09 AM          14872 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.3279263973236084, 'returncode': 0}
[2025-06-03 12:21:54,627] INFO: Result for command 1 sent successfully
[2025-06-03 12:21:54,628] INFO: Running command: dir (admin=True)
[2025-06-03 12:21:54,866] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025  11:09 AM          14872 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.23459553718566895, 'returncode': 0}
[2025-06-03 12:21:56,917] INFO: Result for command 2 sent successfully
[2025-06-03 12:22:26,912] DEBUG: Checking approval status for server 8
[2025-06-03 12:22:26,912] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:22:28,949] DEBUG: Response status code: 200
[2025-06-03 12:22:28,949] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:22:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 12:22:28,950] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 12:22:28,950] INFO: Server is approved and ready to process commands
[2025-06-03 12:22:28,950] INFO: Fetching commands...
[2025-06-03 12:22:28,950] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:22:28,951] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:22:31,006] DEBUG: Response status code: 200
[2025-06-03 12:22:31,006] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:22:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:22:31,006] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:22:31,006] INFO: Commands: []
[2025-06-03 12:23:03,028] DEBUG: Checking approval status for server 8
[2025-06-03 12:23:03,028] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:23:05,095] DEBUG: Response status code: 200
[2025-06-03 12:23:05,095] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:23:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 12:23:05,096] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 12:23:05,096] INFO: Server is approved and ready to process commands
[2025-06-03 12:23:05,096] INFO: Fetching commands...
[2025-06-03 12:23:05,097] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:23:05,097] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:23:07,146] DEBUG: Response status code: 200
[2025-06-03 12:23:07,147] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:23:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:23:07,147] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:23:07,147] INFO: Commands: []
[2025-06-03 12:23:39,176] DEBUG: Checking approval status for server 8
[2025-06-03 12:23:39,176] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:23:41,252] DEBUG: Response status code: 200
[2025-06-03 12:23:41,252] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:23:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 12:23:41,253] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 12:23:41,253] INFO: Server is approved and ready to process commands
[2025-06-03 12:23:41,255] INFO: Fetching commands...
[2025-06-03 12:23:41,255] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:23:41,256] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:23:43,288] DEBUG: Response status code: 200
[2025-06-03 12:23:43,288] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:23:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:23:43,289] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:23:43,289] INFO: Commands: []
[2025-06-03 12:23:47,352] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000023C25E2E710>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 12:24:04,315] DEBUG: Checking approval status for server 8
[2025-06-03 12:24:04,315] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:24:06,428] DEBUG: Response status code: 200
[2025-06-03 12:24:06,428] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:24:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '26', 'Connection': 'close'}
[2025-06-03 12:24:06,429] DEBUG: Raw response text: {
  "is_approved": true
}

[2025-06-03 12:24:06,429] INFO: Server is approved and ready to process commands
[2025-06-03 12:24:06,429] INFO: Fetching commands...
[2025-06-03 12:24:06,430] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:24:06,430] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:24:08,465] DEBUG: Response status code: 200
[2025-06-03 12:24:08,465] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:24:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:24:08,465] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:24:08,465] INFO: Commands: []
[2025-06-03 12:24:40,500] DEBUG: Checking approval status for server 8
[2025-06-03 12:24:40,500] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:24:42,531] DEBUG: Response status code: 404
[2025-06-03 12:24:42,531] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:24:42 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:24:42,532] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:24:42,532] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:24:42,532] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:25:42,523] DEBUG: Checking approval status for server 8
[2025-06-03 12:25:42,523] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:25:44,563] DEBUG: Response status code: 404
[2025-06-03 12:25:44,564] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:25:44 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:25:44,564] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:25:44,565] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:25:44,565] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:26:44,556] DEBUG: Checking approval status for server 8
[2025-06-03 12:26:44,556] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:26:46,581] DEBUG: Response status code: 404
[2025-06-03 12:26:46,582] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:26:46 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:26:46,582] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:26:46,583] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:26:46,583] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:27:46,575] DEBUG: Checking approval status for server 8
[2025-06-03 12:27:46,575] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:27:50,655] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002210F698C90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 12:27:50,759] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002210F698C90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002210F698C90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002210F698C90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 12:27:50,759] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:30:43,207] DEBUG: Checking approval status for server 8
[2025-06-03 12:30:43,207] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:30:45,330] DEBUG: Response status code: 500
[2025-06-03 12:30:45,331] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:30:45 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '18437', 'Connection': 'close'}
[2025-06-03 12:30:45,332] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: server
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rgUZxdvIbBFNYMwNHkCM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: server
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2734461380080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2734461384832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2734461384976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2734461385120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2734461385264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2734461385408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2734461385552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1546</em>,
      in <code class="function">check_server_approval</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>description: Forbidden</pre>
<pre class="line before"><span class="ws">      </span>404:</pre>
<pre class="line before"><span class="ws">        </span>description: Server not found</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>print(f&#34;Checking approval status for client {client_id}&#34;)</pre>
<pre class="line current"><span class="ws">    </span>server = g.server  # Get the server from the decorator
<span class="ws">    </span>         ^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Verify that the requested client_id matches the authenticated server</pre>
<pre class="line after"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line after"><span class="ws">        </span>print(f&#34;Token belongs to server {server.id} but requested approval status for server {client_id}&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid server ID&#39;}), 403</pre></div>
</div>

<li><div class="frame" id="frame-2734465913120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py"</cite>,
      line <em class="line">56</em>,
      in <code class="function">__getattr__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __getattr__(self, name: str) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>return self.__dict__[name]</pre>
<pre class="line before"><span class="ws">        </span>except KeyError:</pre>
<pre class="line current"><span class="ws">            </span>raise AttributeError(name) from None
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __setattr__(self, name: str, value: t.Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>self.__dict__[name] = value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __delattr__(self, name: str) -&gt; None:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: server
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py&#34;, line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py", line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server


-->

[2025-06-03 12:30:45,333] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: server
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rgUZxdvIbBFNYMwNHkCM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: server
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2734461380080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2734461384832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2734461384976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2734461385120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2734461385264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2734461385408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2734461385552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1546</em>,
      in <code class="function">check_server_approval</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>description: Forbidden</pre>
<pre class="line before"><span class="ws">      </span>404:</pre>
<pre class="line before"><span class="ws">        </span>description: Server not found</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>print(f&#34;Checking approval status for client {client_id}&#34;)</pre>
<pre class="line current"><span class="ws">    </span>server = g.server  # Get the server from the decorator
<span class="ws">    </span>         ^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Verify that the requested client_id matches the authenticated server</pre>
<pre class="line after"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line after"><span class="ws">        </span>print(f&#34;Token belongs to server {server.id} but requested approval status for server {client_id}&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid server ID&#39;}), 403</pre></div>
</div>

<li><div class="frame" id="frame-2734465913120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py"</cite>,
      line <em class="line">56</em>,
      in <code class="function">__getattr__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __getattr__(self, name: str) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>return self.__dict__[name]</pre>
<pre class="line before"><span class="ws">        </span>except KeyError:</pre>
<pre class="line current"><span class="ws">            </span>raise AttributeError(name) from None
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __setattr__(self, name: str, value: t.Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>self.__dict__[name] = value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __delattr__(self, name: str) -&gt; None:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: server
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py&#34;, line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py", line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server


-->

[2025-06-03 12:30:45,334] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:31:55,727] DEBUG: Checking approval status for server 8
[2025-06-03 12:31:55,727] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:31:57,767] DEBUG: Response status code: 500
[2025-06-03 12:31:57,767] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:31:57 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '18437', 'Connection': 'close'}
[2025-06-03 12:31:57,768] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: server
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rgUZxdvIbBFNYMwNHkCM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: server
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2734465915280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2734465915136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2734465915424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2734465915568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2734465915712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2734465915856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2734465916000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1546</em>,
      in <code class="function">check_server_approval</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>description: Forbidden</pre>
<pre class="line before"><span class="ws">      </span>404:</pre>
<pre class="line before"><span class="ws">        </span>description: Server not found</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>print(f&#34;Checking approval status for client {client_id}&#34;)</pre>
<pre class="line current"><span class="ws">    </span>server = g.server  # Get the server from the decorator
<span class="ws">    </span>         ^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Verify that the requested client_id matches the authenticated server</pre>
<pre class="line after"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line after"><span class="ws">        </span>print(f&#34;Token belongs to server {server.id} but requested approval status for server {client_id}&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid server ID&#39;}), 403</pre></div>
</div>

<li><div class="frame" id="frame-2734465916144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py"</cite>,
      line <em class="line">56</em>,
      in <code class="function">__getattr__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __getattr__(self, name: str) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>return self.__dict__[name]</pre>
<pre class="line before"><span class="ws">        </span>except KeyError:</pre>
<pre class="line current"><span class="ws">            </span>raise AttributeError(name) from None
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __setattr__(self, name: str, value: t.Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>self.__dict__[name] = value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __delattr__(self, name: str) -&gt; None:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: server
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py&#34;, line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py", line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server


-->

[2025-06-03 12:31:57,769] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: server
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rgUZxdvIbBFNYMwNHkCM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: server
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2734465915280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2734465915136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2734465915424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2734465915568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2734465915712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2734465915856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2734465916000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1546</em>,
      in <code class="function">check_server_approval</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>description: Forbidden</pre>
<pre class="line before"><span class="ws">      </span>404:</pre>
<pre class="line before"><span class="ws">        </span>description: Server not found</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>print(f&#34;Checking approval status for client {client_id}&#34;)</pre>
<pre class="line current"><span class="ws">    </span>server = g.server  # Get the server from the decorator
<span class="ws">    </span>         ^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Verify that the requested client_id matches the authenticated server</pre>
<pre class="line after"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line after"><span class="ws">        </span>print(f&#34;Token belongs to server {server.id} but requested approval status for server {client_id}&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid server ID&#39;}), 403</pre></div>
</div>

<li><div class="frame" id="frame-2734465916144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py"</cite>,
      line <em class="line">56</em>,
      in <code class="function">__getattr__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __getattr__(self, name: str) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>return self.__dict__[name]</pre>
<pre class="line before"><span class="ws">        </span>except KeyError:</pre>
<pre class="line current"><span class="ws">            </span>raise AttributeError(name) from None
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __setattr__(self, name: str, value: t.Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>self.__dict__[name] = value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __delattr__(self, name: str) -&gt; None:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: server
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py&#34;, line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1546, in check_server_approval
    server = g.server  # Get the server from the decorator
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\ctx.py", line 56, in __getattr__
    raise AttributeError(name) from None
AttributeError: server


-->

[2025-06-03 12:31:57,769] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:35:58,848] DEBUG: Checking approval status for server 8
[2025-06-03 12:35:58,848] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:36:00,886] DEBUG: Response status code: 200
[2025-06-03 12:36:00,887] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:36:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:36:00,887] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:36:00,888] INFO: Server is approved and ready to process commands
[2025-06-03 12:36:00,888] INFO: Fetching commands...
[2025-06-03 12:36:00,889] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:36:00,889] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:36:02,915] DEBUG: Response status code: 404
[2025-06-03 12:36:02,916] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:36:02 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:36:02,916] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:36:02,917] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:36:02,918] INFO: Commands: []
[2025-06-03 12:36:04,958] ERROR: Failed to check for update: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:36:34,954] DEBUG: Checking approval status for server 8
[2025-06-03 12:36:34,954] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:36:36,993] DEBUG: Response status code: 200
[2025-06-03 12:36:36,993] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:36:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:36:36,994] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:36:36,995] INFO: Server is approved and ready to process commands
[2025-06-03 12:36:36,996] INFO: Fetching commands...
[2025-06-03 12:36:36,996] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:36:36,997] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:36:39,043] DEBUG: Response status code: 404
[2025-06-03 12:36:39,044] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:36:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 12:36:39,045] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:36:39,046] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:36:39,047] INFO: Commands: []
[2025-06-03 12:36:41,079] ERROR: Failed to check for update: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 12:37:11,075] DEBUG: Checking approval status for server 8
[2025-06-03 12:37:11,077] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:37:13,144] DEBUG: Response status code: 200
[2025-06-03 12:37:13,144] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:37:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:37:13,145] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:37:13,148] INFO: Server is approved and ready to process commands
[2025-06-03 12:37:13,151] INFO: Fetching commands...
[2025-06-03 12:37:13,151] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:37:13,155] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:37:15,231] DEBUG: Response status code: 500
[2025-06-03 12:37:15,232] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:37:15 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '26896', 'Connection': 'close'}
[2025-06-03 12:37:15,232] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3nWPnttdgZJtUAuMph8N";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1719376761408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1719376169424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1719376174176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1719376174320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1719376174464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1719376174608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1719376174752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1719376174896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1719376180512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1719376180656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1719376758240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1719376758384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:37:15,234] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3nWPnttdgZJtUAuMph8N";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1719376761408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1719376169424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1719376174176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1719376174320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1719376174464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1719376174608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1719376174752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1719376174896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1719376180512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1719376180656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1719376758240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1719376758384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:37:15,234] INFO: Commands: []
[2025-06-03 12:37:47,265] DEBUG: Checking approval status for server 8
[2025-06-03 12:37:47,265] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:37:49,315] DEBUG: Response status code: 200
[2025-06-03 12:37:49,315] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:37:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:37:49,316] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:37:49,316] INFO: Server is approved and ready to process commands
[2025-06-03 12:37:49,316] INFO: Fetching commands...
[2025-06-03 12:37:49,316] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:37:49,316] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:37:53,369] ERROR: Error fetching commands: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000024F906A9B10>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 12:37:53,465] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000024F906A9B10>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000024F906A9B10>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 149, in fetch_commands
    resp = requests.get(f'{API_BASE}/client/commands/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/commands/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000024F906A9B10>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 12:37:53,466] INFO: Commands: []
[2025-06-03 12:37:57,522] ERROR: Error checking for update: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/latest-version (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000024F90A86550>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 12:38:27,519] DEBUG: Checking approval status for server 8
[2025-06-03 12:38:27,520] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:38:29,617] DEBUG: Response status code: 200
[2025-06-03 12:38:29,617] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:38:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:38:29,618] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:38:29,619] INFO: Server is approved and ready to process commands
[2025-06-03 12:38:29,619] INFO: Fetching commands...
[2025-06-03 12:38:29,620] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:38:29,621] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:38:31,671] DEBUG: Response status code: 500
[2025-06-03 12:38:31,672] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:38:31 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '26896', 'Connection': 'close'}
[2025-06-03 12:38:31,672] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P2R7DQAPWFu1XcUs0JWU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1994677228384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1994676636256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1994676641152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1994676641296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1994676641440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1994676641584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1994676641728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1994676641872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994676647488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1994676647632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677225216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1994677225360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:38:31,673] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P2R7DQAPWFu1XcUs0JWU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1994677228384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1994676636256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1994676641152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1994676641296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1994676641440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1994676641584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1994676641728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1994676641872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994676647488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1994676647632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677225216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1994677225360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:38:31,674] INFO: Commands: []
[2025-06-03 12:39:03,712] DEBUG: Checking approval status for server 8
[2025-06-03 12:39:03,712] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:39:05,742] DEBUG: Response status code: 200
[2025-06-03 12:39:05,742] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:39:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:39:05,742] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:39:05,742] INFO: Server is approved and ready to process commands
[2025-06-03 12:39:05,742] INFO: Fetching commands...
[2025-06-03 12:39:05,743] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:39:05,743] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:39:07,789] DEBUG: Response status code: 500
[2025-06-03 12:39:07,789] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:39:07 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '26896', 'Connection': 'close'}
[2025-06-03 12:39:07,790] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P2R7DQAPWFu1XcUs0JWU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1994677230112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1994677228528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1994677228672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1994677228816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1994677228960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1994677229104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1994677229248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1994677229392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677229536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1994677229680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677229824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1994677229968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:39:07,791] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P2R7DQAPWFu1XcUs0JWU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1994677230112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1994677228528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1994677228672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1994677228816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1994677228960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1994677229104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1994677229248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1994677229392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677229536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1994677229680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677229824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1994677229968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:39:07,792] INFO: Commands: []
[2025-06-03 12:39:35,421] DEBUG: Checking approval status for server 8
[2025-06-03 12:39:35,421] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:39:37,511] DEBUG: Response status code: 200
[2025-06-03 12:39:37,511] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:39:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:39:37,512] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:39:37,513] INFO: Server is approved and ready to process commands
[2025-06-03 12:39:37,514] INFO: Fetching commands...
[2025-06-03 12:39:37,514] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:39:37,514] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:39:39,563] DEBUG: Response status code: 500
[2025-06-03 12:39:39,563] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:39:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '26896', 'Connection': 'close'}
[2025-06-03 12:39:39,564] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P2R7DQAPWFu1XcUs0JWU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1994677231840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1994677230256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1994677230400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1994677230544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1994677230688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1994677230832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1994677230976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1994677231120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677231264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1994677231408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677231552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1994677231696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:39:39,565] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P2R7DQAPWFu1XcUs0JWU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1994677231840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2178</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>ns = _entity_namespace(entity)</pre>
<pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return getattr(ns, key)  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">        </span>raise exc.InvalidRequestError(</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1994677230256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1994677230400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1994677230544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1994677230688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1994677230832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1994677230976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1994677231120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677231264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1677</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get pending commands for this client</pre>
<pre class="line current"><span class="ws">    </span>commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(cmd.id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: cmd.command_text,</pre>
<pre class="line after"><span class="ws">            </span>&#39;as_admin&#39;: cmd.run_as_admin</pre></div>
</div>

<li><div class="frame" id="frame-1994677231408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">filter_by</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_sql.Select.filter_by` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>clauses = [
<span class="ws">        </span>          </pre>
<pre class="line after"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1994677231552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1987</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>from_entity = self._filter_by_zero()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>clauses = [</pre>
<pre class="line current"><span class="ws">            </span>_entity_namespace_key(from_entity, key) == value
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>for key, value in kwargs.items()</pre>
<pre class="line after"><span class="ws">        </span>]</pre>
<pre class="line after"><span class="ws">        </span>return self.filter(*clauses)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre></div>
</div>

<li><div class="frame" id="frame-1994677231696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py"</cite>,
      line <em class="line">2180</em>,
      in <code class="function">_entity_namespace_key</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if default is not NO_ARG:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key, default)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>return getattr(ns, key)  # type: ignore</pre>
<pre class="line before"><span class="ws">    </span>except AttributeError as err:</pre>
<pre class="line current"><span class="ws">        </span>raise exc.InvalidRequestError(
<span class="ws">        </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>&#39;Entity namespace for &#34;%s&#34; has no property &#34;%s&#34;&#39; % (entity, key)</pre>
<pre class="line after"><span class="ws">        </span>) from err</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object &#39;Command&#39; has no attribute &#39;server_id&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status=&#39;pending&#39;).all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1986, in filter_by
    clauses = [
              ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1987, in &lt;listcomp&gt;
    _entity_namespace_key(from_entity, key) == value
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py&#34;, line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for &#34;commands&#34; has no property &#34;server_id&#34;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2178, in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'Command' has no attribute 'server_id'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1677, in get_client_commands
    commands = Command.query.filter_by(server_id=client_id, status='pending').all()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1986, in filter_by
    clauses = [
              ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 1987, in <listcomp>
    _entity_namespace_key(from_entity, key) == value
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\base.py", line 2180, in _entity_namespace_key
    raise exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Entity namespace for "commands" has no property "server_id"


-->

[2025-06-03 12:39:39,566] INFO: Commands: []
[2025-06-03 12:49:49,250] DEBUG: Checking approval status for server 8
[2025-06-03 12:49:49,250] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:49:51,696] DEBUG: Response status code: 500
[2025-06-03 12:49:51,696] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:49:51 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '56728', 'Connection': 'close'}
[2025-06-03 12:49:51,697] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "PbWn8PGX9ER68cLyXP28";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoForeignKeysError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2263522082480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">2437</em>,
      in <code class="function">_determine_joins</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>self.primaryjoin = self.primaryjoin_initial</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>if self.primaryjoin_initial is None:</pre>
<pre class="line current"><span class="ws">                    </span>self.primaryjoin = join_condition(
<span class="ws">                    </span>                   </pre>
<pre class="line after"><span class="ws">                        </span>self.parent_persist_selectable,</pre>
<pre class="line after"><span class="ws">                        </span>self.child_persist_selectable,</pre>
<pre class="line after"><span class="ws">                        </span>a_subset=self.parent_local_selectable,</pre>
<pre class="line after"><span class="ws">                        </span>consider_as_foreign_keys=consider_as_foreign_keys,</pre>
<pre class="line after"><span class="ws">                    </span>)</pre></div>
</div>

<li><div class="frame" id="frame-2263522082624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\util.py"</cite>,
      line <em class="line">123</em>,
      in <code class="function">join_condition</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>will be successful even if there are other ways to join to ``a``.</pre>
<pre class="line before"><span class="ws">        </span>This allows the &#34;right side&#34; of a join to be passed thereby</pre>
<pre class="line before"><span class="ws">        </span>providing a &#34;natural join&#34;.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return Join._join_condition(
<span class="ws">    </span>       </pre>
<pre class="line after"><span class="ws">        </span>a,</pre>
<pre class="line after"><span class="ws">        </span>b,</pre>
<pre class="line after"><span class="ws">        </span>a_subset=a_subset,</pre>
<pre class="line after"><span class="ws">        </span>consider_as_foreign_keys=consider_as_foreign_keys,</pre>
<pre class="line after"><span class="ws">    </span>)</pre></div>
</div>

<li><div class="frame" id="frame-2263523443184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py"</cite>,
      line <em class="line">1442</em>,
      in <code class="function">_join_condition</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>&#34; Perhaps you meant to convert the right side to a &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;subquery using alias()?&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>hint = &#34;&#34;</pre>
<pre class="line current"><span class="ws">            </span>raise exc.NoForeignKeysError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>&#34;Can&#39;t find any foreign key relationships &#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34;between &#39;%s&#39; and &#39;%s&#39;.%s&#34;</pre>
<pre class="line after"><span class="ws">                </span>% (a.description, b.description, hint)</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2263516331120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2263521775472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2263521775616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2263521775760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2263521775904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2263521776048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2263521776192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">20</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws">        </span>g.server = server</pre>
<pre class="line after"><span class="ws">        </span>return f(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre></div>
</div>

<li><div class="frame" id="frame-2263521782096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py"</cite>,
      line <em class="line">22</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>:meta private:</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __get__(self, obj: Model | None, cls: type[Model]) -&gt; Query:</pre>
<pre class="line current"><span class="ws">        </span>return cls.query_class(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>cls, session=cls.__fsa__.session()  # type: ignore[arg-type]</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class Model:</pre></div>
</div>

<li><div class="frame" id="frame-2263522066784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">275</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># where it stores a Query without a Session and also there are tests</pre>
<pre class="line before"><span class="ws">        </span># for the query(Entity).with_session(session) API which is likely in</pre>
<pre class="line before"><span class="ws">        </span># some old recipes, however these are legacy as select() can now be</pre>
<pre class="line before"><span class="ws">        </span># used.</pre>
<pre class="line before"><span class="ws">        </span>self.session = session  # type: ignore</pre>
<pre class="line current"><span class="ws">        </span>self._set_entities(entities)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _set_propagate_attrs(self, values: Mapping[str, Any]) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>self._propagate_attrs = util.immutabledict(values)</pre>
<pre class="line after"><span class="ws">        </span>return self</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522070816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">287</em>,
      in <code class="function">_set_entities</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self,</pre>
<pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line current"><span class="ws">        </span>self._raw_columns = [
<span class="ws">        </span>                    </pre>
<pre class="line after"><span class="ws">            </span>coercions.expect(</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre></div>
</div>

<li><div class="frame" id="frame-2263522070960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">288</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>self._raw_columns = [</pre>
<pre class="line current"><span class="ws">            </span>coercions.expect(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-2263522071104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py"</cite>,
      line <em class="line">388</em>,
      in <code class="function">expect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if not is_clause_element:</pre>
<pre class="line before"><span class="ws">                </span>if impl._use_inspection and not disable_inspection:</pre>
<pre class="line before"><span class="ws">                    </span>insp = inspection.inspect(element, raiseerr=False)</pre>
<pre class="line before"><span class="ws">                    </span>if insp is not None:</pre>
<pre class="line before"><span class="ws">                        </span>if post_inspect:</pre>
<pre class="line current"><span class="ws">                            </span>insp._post_inspect
<span class="ws">                            </span>^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                        </span>try:</pre>
<pre class="line after"><span class="ws">                            </span>resolved = insp.__clause_element__()</pre>
<pre class="line after"><span class="ws">                        </span>except AttributeError:</pre>
<pre class="line after"><span class="ws">                            </span>impl._raise_for_expected(original_element, argname)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522072112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">1257</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>def __get__(self, obj: Any, cls: Any) -&gt; _T: ...</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def __get__(self, obj, cls):</pre>
<pre class="line before"><span class="ws">            </span>if obj is None:</pre>
<pre class="line before"><span class="ws">                </span>return self</pre>
<pre class="line current"><span class="ws">            </span>obj.__dict__[self.__name__] = result = self.fget(obj)
<span class="ws">            </span>                                       ^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>obj._memoized_keys |= {self.__name__}</pre>
<pre class="line after"><span class="ws">            </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@classmethod</pre>
<pre class="line after"><span class="ws">    </span>def memoized_instancemethod(cls, fn: _F) -&gt; _F:</pre></div>
</div>

<li><div class="frame" id="frame-2263522073408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2724</em>,
      in <code class="function">_post_inspect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>coercions.expect(roles.ColumnsClauseRole, ent, keep_inspect=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>This allows the inspection process run a configure mappers hook.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>self._check_configure()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@HasMemoized_ro_memoized_attribute</pre>
<pre class="line after"><span class="ws">    </span>def _with_polymorphic_selectable(self) -&gt; FromClause:</pre>
<pre class="line after"><span class="ws">        </span>if not self.with_polymorphic:</pre>
<pre class="line after"><span class="ws">            </span>return self.persist_selectable</pre></div>
</div>

<li><div class="frame" id="frame-2263522077584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2401</em>,
      in <code class="function">_check_configure</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;operation.&#34;,</pre>
<pre class="line before"><span class="ws">        </span>sa_exc.SAWarning,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def _check_configure(self) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self.registry._new_mappers:</pre>
<pre class="line current"><span class="ws">            </span>_configure_registries({self.registry}, cascade=True)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _post_configure_properties(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Call the ``init()`` method on all ``MapperProperties``</pre>
<pre class="line after"><span class="ws">        </span>attached to this mapper.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522077728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4213</em>,
      in <code class="function">_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># initialize properties on all mappers</pre>
<pre class="line before"><span class="ws">            </span># note that _mapper_registry is unordered, which</pre>
<pre class="line before"><span class="ws">            </span># may randomly conceal/reveal issues related to</pre>
<pre class="line before"><span class="ws">            </span># the order of mapper compilation</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>_do_configure_registries(registries, cascade)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>_already_compiling = False</pre>
<pre class="line after"><span class="ws">    </span>Mapper.dispatch._for_class(Mapper).after_configured()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522077872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4254</em>,
      in <code class="function">_do_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>e._configure_failed = mapper._configure_failed  # type: ignore</pre>
<pre class="line before"><span class="ws">                </span>raise e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if not mapper.configured:</pre>
<pre class="line before"><span class="ws">                </span>try:</pre>
<pre class="line current"><span class="ws">                    </span>mapper._post_configure_properties()
<span class="ws">                    </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                    </span>mapper._expire_memoizations()</pre>
<pre class="line after"><span class="ws">                    </span>mapper.dispatch.mapper_configured(mapper, mapper.class_)</pre>
<pre class="line after"><span class="ws">                </span>except Exception:</pre>
<pre class="line after"><span class="ws">                    </span>exc = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                    </span>if not hasattr(exc, &#34;_configure_failed&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-2263522078016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2418</em>,
      in <code class="function">_post_configure_properties</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>l = [(key, prop) for key, prop in self._props.items()]</pre>
<pre class="line before"><span class="ws">        </span>for key, prop in l:</pre>
<pre class="line before"><span class="ws">            </span>self._log(&#34;initialize prop %s&#34;, key)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if prop.parent is self and not prop._configure_started:</pre>
<pre class="line current"><span class="ws">                </span>prop.init()
<span class="ws">                </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if prop._configure_finished:</pre>
<pre class="line after"><span class="ws">                </span>prop.post_instrument_class(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self._log(&#34;_post_configure_properties() complete&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-2263522078160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py"</cite>,
      line <em class="line">589</em>,
      in <code class="function">init</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>initialization steps.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self._configure_started = True</pre>
<pre class="line current"><span class="ws">        </span>self.do_init()
<span class="ws">        </span>^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._configure_finished = True</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@property</pre>
<pre class="line after"><span class="ws">    </span>def class_attribute(self) -&gt; InstrumentedAttribute[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return the class-bound descriptor corresponding to this</pre></div>
</div>

<li><div class="frame" id="frame-2263522079600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">1658</em>,
      in <code class="function">do_init</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def do_init(self) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>self._check_conflicts()</pre>
<pre class="line before"><span class="ws">        </span>self._process_dependent_arguments()</pre>
<pre class="line before"><span class="ws">        </span>self._setup_entity()</pre>
<pre class="line before"><span class="ws">        </span>self._setup_registry_dependencies()</pre>
<pre class="line current"><span class="ws">        </span>self._setup_join_conditions()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._check_cascade_settings(self._cascade)</pre>
<pre class="line after"><span class="ws">        </span>self._post_init()</pre>
<pre class="line after"><span class="ws">        </span>self._generate_backref()</pre>
<pre class="line after"><span class="ws">        </span>self._join_condition._warn_for_conflicting_sync_targets()</pre>
<pre class="line after"><span class="ws">        </span>super().do_init()</pre></div>
</div>

<li><div class="frame" id="frame-2263522082048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">1898</em>,
      in <code class="function">_setup_join_conditions</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.entity = entity</pre>
<pre class="line before"><span class="ws">        </span>self.target = self.entity.persist_selectable</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _setup_join_conditions(self) -&gt; None:</pre>
<pre class="line current"><span class="ws">        </span>self._join_condition = jc = JoinCondition(
<span class="ws">        </span>                            </pre>
<pre class="line after"><span class="ws">            </span>parent_persist_selectable=self.parent.persist_selectable,</pre>
<pre class="line after"><span class="ws">            </span>child_persist_selectable=self.entity.persist_selectable,</pre>
<pre class="line after"><span class="ws">            </span>parent_local_selectable=self.parent.local_table,</pre>
<pre class="line after"><span class="ws">            </span>child_local_selectable=self.entity.local_table,</pre>
<pre class="line after"><span class="ws">            </span>primaryjoin=self._init_args.primaryjoin.resolved,</pre></div>
</div>

<li><div class="frame" id="frame-2263522082192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">2324</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.prop = prop</pre>
<pre class="line before"><span class="ws">        </span>self.self_referential = self_referential</pre>
<pre class="line before"><span class="ws">        </span>self.support_sync = support_sync</pre>
<pre class="line before"><span class="ws">        </span>self.can_be_synced_fn = can_be_synced_fn</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>self._determine_joins()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>assert self.primaryjoin is not None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self._sanitize_joins()</pre>
<pre class="line after"><span class="ws">        </span>self._annotate_fks()</pre>
<pre class="line after"><span class="ws">        </span>self._annotate_remote()</pre></div>
</div>

<li><div class="frame" id="frame-2263522082336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">2458</em>,
      in <code class="function">_determine_joins</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>&#34;with a ForeignKey or ForeignKeyConstraint, or &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;specify &#39;primaryjoin&#39; and &#39;secondaryjoin&#39; &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;expressions.&#34; % (self.prop, self.secondary)</pre>
<pre class="line before"><span class="ws">                </span>) from nfe</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>raise sa_exc.NoForeignKeysError(
<span class="ws">                </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Could not determine join &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;condition between parent/child tables on &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;relationship %s - there are no foreign keys &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;linking these tables.  &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Ensure that referencing columns are associated &#34;</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 2437, in _determine_joins
    self.primaryjoin = join_condition(
                       ^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\util.py&#34;, line 123, in join_condition
    return Join._join_condition(
           ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py&#34;, line 1442, in _join_condition
    raise exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Can&#39;t find any foreign key relationships between &#39;commands&#39; and &#39;servers&#39;.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py&#34;, line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 275, in __init__
    self._set_entities(entities)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 287, in _set_entities
    self._raw_columns = [
                        ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 288, in &lt;listcomp&gt;
    coercions.expect(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py&#34;, line 388, in expect
    insp._post_inspect
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2724, in _post_inspect
    self._check_configure()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4254, in _do_configure_registries
    mapper._post_configure_properties()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2418, in _post_configure_properties
    prop.init()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py&#34;, line 589, in init
    self.do_init()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 1658, in do_init
    self._setup_join_conditions()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 1898, in _setup_join_conditions
    self._join_condition = jc = JoinCondition(
                                ^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 2324, in __init__
    self._determine_joins()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 2458, in _determine_joins
    raise sa_exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 2437, in _determine_joins
    self.primaryjoin = join_condition(
                       ^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\util.py", line 123, in join_condition
    return Join._join_condition(
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py", line 1442, in _join_condition
    raise exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Can't find any foreign key relationships between 'commands' and 'servers'.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py", line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 275, in __init__
    self._set_entities(entities)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 287, in _set_entities
    self._raw_columns = [
                        ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 288, in <listcomp>
    coercions.expect(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py", line 388, in expect
    insp._post_inspect
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2724, in _post_inspect
    self._check_configure()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4254, in _do_configure_registries
    mapper._post_configure_properties()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2418, in _post_configure_properties
    prop.init()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py", line 589, in init
    self.do_init()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 1658, in do_init
    self._setup_join_conditions()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 1898, in _setup_join_conditions
    self._join_condition = jc = JoinCondition(
                                ^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 2324, in __init__
    self._determine_joins()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 2458, in _determine_joins
    raise sa_exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.


-->

[2025-06-03 12:49:51,699] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "PbWn8PGX9ER68cLyXP28";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoForeignKeysError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2263522082480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">2437</em>,
      in <code class="function">_determine_joins</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>self.primaryjoin = self.primaryjoin_initial</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>if self.primaryjoin_initial is None:</pre>
<pre class="line current"><span class="ws">                    </span>self.primaryjoin = join_condition(
<span class="ws">                    </span>                   </pre>
<pre class="line after"><span class="ws">                        </span>self.parent_persist_selectable,</pre>
<pre class="line after"><span class="ws">                        </span>self.child_persist_selectable,</pre>
<pre class="line after"><span class="ws">                        </span>a_subset=self.parent_local_selectable,</pre>
<pre class="line after"><span class="ws">                        </span>consider_as_foreign_keys=consider_as_foreign_keys,</pre>
<pre class="line after"><span class="ws">                    </span>)</pre></div>
</div>

<li><div class="frame" id="frame-2263522082624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\util.py"</cite>,
      line <em class="line">123</em>,
      in <code class="function">join_condition</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>will be successful even if there are other ways to join to ``a``.</pre>
<pre class="line before"><span class="ws">        </span>This allows the &#34;right side&#34; of a join to be passed thereby</pre>
<pre class="line before"><span class="ws">        </span>providing a &#34;natural join&#34;.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return Join._join_condition(
<span class="ws">    </span>       </pre>
<pre class="line after"><span class="ws">        </span>a,</pre>
<pre class="line after"><span class="ws">        </span>b,</pre>
<pre class="line after"><span class="ws">        </span>a_subset=a_subset,</pre>
<pre class="line after"><span class="ws">        </span>consider_as_foreign_keys=consider_as_foreign_keys,</pre>
<pre class="line after"><span class="ws">    </span>)</pre></div>
</div>

<li><div class="frame" id="frame-2263523443184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py"</cite>,
      line <em class="line">1442</em>,
      in <code class="function">_join_condition</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>&#34; Perhaps you meant to convert the right side to a &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;subquery using alias()?&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>hint = &#34;&#34;</pre>
<pre class="line current"><span class="ws">            </span>raise exc.NoForeignKeysError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>&#34;Can&#39;t find any foreign key relationships &#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34;between &#39;%s&#39; and &#39;%s&#39;.%s&#34;</pre>
<pre class="line after"><span class="ws">                </span>% (a.description, b.description, hint)</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2263516331120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2263521775472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2263521775616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2263521775760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2263521775904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2263521776048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2263521776192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">20</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws">        </span>g.server = server</pre>
<pre class="line after"><span class="ws">        </span>return f(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre></div>
</div>

<li><div class="frame" id="frame-2263521782096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py"</cite>,
      line <em class="line">22</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>:meta private:</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __get__(self, obj: Model | None, cls: type[Model]) -&gt; Query:</pre>
<pre class="line current"><span class="ws">        </span>return cls.query_class(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>cls, session=cls.__fsa__.session()  # type: ignore[arg-type]</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class Model:</pre></div>
</div>

<li><div class="frame" id="frame-2263522066784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">275</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># where it stores a Query without a Session and also there are tests</pre>
<pre class="line before"><span class="ws">        </span># for the query(Entity).with_session(session) API which is likely in</pre>
<pre class="line before"><span class="ws">        </span># some old recipes, however these are legacy as select() can now be</pre>
<pre class="line before"><span class="ws">        </span># used.</pre>
<pre class="line before"><span class="ws">        </span>self.session = session  # type: ignore</pre>
<pre class="line current"><span class="ws">        </span>self._set_entities(entities)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _set_propagate_attrs(self, values: Mapping[str, Any]) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>self._propagate_attrs = util.immutabledict(values)</pre>
<pre class="line after"><span class="ws">        </span>return self</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522070816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">287</em>,
      in <code class="function">_set_entities</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self,</pre>
<pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line current"><span class="ws">        </span>self._raw_columns = [
<span class="ws">        </span>                    </pre>
<pre class="line after"><span class="ws">            </span>coercions.expect(</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre></div>
</div>

<li><div class="frame" id="frame-2263522070960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">288</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>self._raw_columns = [</pre>
<pre class="line current"><span class="ws">            </span>coercions.expect(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-2263522071104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py"</cite>,
      line <em class="line">388</em>,
      in <code class="function">expect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if not is_clause_element:</pre>
<pre class="line before"><span class="ws">                </span>if impl._use_inspection and not disable_inspection:</pre>
<pre class="line before"><span class="ws">                    </span>insp = inspection.inspect(element, raiseerr=False)</pre>
<pre class="line before"><span class="ws">                    </span>if insp is not None:</pre>
<pre class="line before"><span class="ws">                        </span>if post_inspect:</pre>
<pre class="line current"><span class="ws">                            </span>insp._post_inspect
<span class="ws">                            </span>^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                        </span>try:</pre>
<pre class="line after"><span class="ws">                            </span>resolved = insp.__clause_element__()</pre>
<pre class="line after"><span class="ws">                        </span>except AttributeError:</pre>
<pre class="line after"><span class="ws">                            </span>impl._raise_for_expected(original_element, argname)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522072112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">1257</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>def __get__(self, obj: Any, cls: Any) -&gt; _T: ...</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def __get__(self, obj, cls):</pre>
<pre class="line before"><span class="ws">            </span>if obj is None:</pre>
<pre class="line before"><span class="ws">                </span>return self</pre>
<pre class="line current"><span class="ws">            </span>obj.__dict__[self.__name__] = result = self.fget(obj)
<span class="ws">            </span>                                       ^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>obj._memoized_keys |= {self.__name__}</pre>
<pre class="line after"><span class="ws">            </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@classmethod</pre>
<pre class="line after"><span class="ws">    </span>def memoized_instancemethod(cls, fn: _F) -&gt; _F:</pre></div>
</div>

<li><div class="frame" id="frame-2263522073408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2724</em>,
      in <code class="function">_post_inspect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>coercions.expect(roles.ColumnsClauseRole, ent, keep_inspect=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>This allows the inspection process run a configure mappers hook.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>self._check_configure()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@HasMemoized_ro_memoized_attribute</pre>
<pre class="line after"><span class="ws">    </span>def _with_polymorphic_selectable(self) -&gt; FromClause:</pre>
<pre class="line after"><span class="ws">        </span>if not self.with_polymorphic:</pre>
<pre class="line after"><span class="ws">            </span>return self.persist_selectable</pre></div>
</div>

<li><div class="frame" id="frame-2263522077584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2401</em>,
      in <code class="function">_check_configure</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;operation.&#34;,</pre>
<pre class="line before"><span class="ws">        </span>sa_exc.SAWarning,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def _check_configure(self) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self.registry._new_mappers:</pre>
<pre class="line current"><span class="ws">            </span>_configure_registries({self.registry}, cascade=True)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _post_configure_properties(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Call the ``init()`` method on all ``MapperProperties``</pre>
<pre class="line after"><span class="ws">        </span>attached to this mapper.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522077728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4213</em>,
      in <code class="function">_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># initialize properties on all mappers</pre>
<pre class="line before"><span class="ws">            </span># note that _mapper_registry is unordered, which</pre>
<pre class="line before"><span class="ws">            </span># may randomly conceal/reveal issues related to</pre>
<pre class="line before"><span class="ws">            </span># the order of mapper compilation</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>_do_configure_registries(registries, cascade)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>_already_compiling = False</pre>
<pre class="line after"><span class="ws">    </span>Mapper.dispatch._for_class(Mapper).after_configured()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2263522077872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4254</em>,
      in <code class="function">_do_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>e._configure_failed = mapper._configure_failed  # type: ignore</pre>
<pre class="line before"><span class="ws">                </span>raise e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if not mapper.configured:</pre>
<pre class="line before"><span class="ws">                </span>try:</pre>
<pre class="line current"><span class="ws">                    </span>mapper._post_configure_properties()
<span class="ws">                    </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                    </span>mapper._expire_memoizations()</pre>
<pre class="line after"><span class="ws">                    </span>mapper.dispatch.mapper_configured(mapper, mapper.class_)</pre>
<pre class="line after"><span class="ws">                </span>except Exception:</pre>
<pre class="line after"><span class="ws">                    </span>exc = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                    </span>if not hasattr(exc, &#34;_configure_failed&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-2263522078016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2418</em>,
      in <code class="function">_post_configure_properties</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>l = [(key, prop) for key, prop in self._props.items()]</pre>
<pre class="line before"><span class="ws">        </span>for key, prop in l:</pre>
<pre class="line before"><span class="ws">            </span>self._log(&#34;initialize prop %s&#34;, key)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if prop.parent is self and not prop._configure_started:</pre>
<pre class="line current"><span class="ws">                </span>prop.init()
<span class="ws">                </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if prop._configure_finished:</pre>
<pre class="line after"><span class="ws">                </span>prop.post_instrument_class(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self._log(&#34;_post_configure_properties() complete&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-2263522078160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py"</cite>,
      line <em class="line">589</em>,
      in <code class="function">init</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>initialization steps.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self._configure_started = True</pre>
<pre class="line current"><span class="ws">        </span>self.do_init()
<span class="ws">        </span>^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._configure_finished = True</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@property</pre>
<pre class="line after"><span class="ws">    </span>def class_attribute(self) -&gt; InstrumentedAttribute[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return the class-bound descriptor corresponding to this</pre></div>
</div>

<li><div class="frame" id="frame-2263522079600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">1658</em>,
      in <code class="function">do_init</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def do_init(self) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>self._check_conflicts()</pre>
<pre class="line before"><span class="ws">        </span>self._process_dependent_arguments()</pre>
<pre class="line before"><span class="ws">        </span>self._setup_entity()</pre>
<pre class="line before"><span class="ws">        </span>self._setup_registry_dependencies()</pre>
<pre class="line current"><span class="ws">        </span>self._setup_join_conditions()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._check_cascade_settings(self._cascade)</pre>
<pre class="line after"><span class="ws">        </span>self._post_init()</pre>
<pre class="line after"><span class="ws">        </span>self._generate_backref()</pre>
<pre class="line after"><span class="ws">        </span>self._join_condition._warn_for_conflicting_sync_targets()</pre>
<pre class="line after"><span class="ws">        </span>super().do_init()</pre></div>
</div>

<li><div class="frame" id="frame-2263522082048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">1898</em>,
      in <code class="function">_setup_join_conditions</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.entity = entity</pre>
<pre class="line before"><span class="ws">        </span>self.target = self.entity.persist_selectable</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _setup_join_conditions(self) -&gt; None:</pre>
<pre class="line current"><span class="ws">        </span>self._join_condition = jc = JoinCondition(
<span class="ws">        </span>                            </pre>
<pre class="line after"><span class="ws">            </span>parent_persist_selectable=self.parent.persist_selectable,</pre>
<pre class="line after"><span class="ws">            </span>child_persist_selectable=self.entity.persist_selectable,</pre>
<pre class="line after"><span class="ws">            </span>parent_local_selectable=self.parent.local_table,</pre>
<pre class="line after"><span class="ws">            </span>child_local_selectable=self.entity.local_table,</pre>
<pre class="line after"><span class="ws">            </span>primaryjoin=self._init_args.primaryjoin.resolved,</pre></div>
</div>

<li><div class="frame" id="frame-2263522082192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">2324</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.prop = prop</pre>
<pre class="line before"><span class="ws">        </span>self.self_referential = self_referential</pre>
<pre class="line before"><span class="ws">        </span>self.support_sync = support_sync</pre>
<pre class="line before"><span class="ws">        </span>self.can_be_synced_fn = can_be_synced_fn</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>self._determine_joins()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>assert self.primaryjoin is not None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self._sanitize_joins()</pre>
<pre class="line after"><span class="ws">        </span>self._annotate_fks()</pre>
<pre class="line after"><span class="ws">        </span>self._annotate_remote()</pre></div>
</div>

<li><div class="frame" id="frame-2263522082336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py"</cite>,
      line <em class="line">2458</em>,
      in <code class="function">_determine_joins</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>&#34;with a ForeignKey or ForeignKeyConstraint, or &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;specify &#39;primaryjoin&#39; and &#39;secondaryjoin&#39; &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;expressions.&#34; % (self.prop, self.secondary)</pre>
<pre class="line before"><span class="ws">                </span>) from nfe</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>raise sa_exc.NoForeignKeysError(
<span class="ws">                </span>^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Could not determine join &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;condition between parent/child tables on &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;relationship %s - there are no foreign keys &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;linking these tables.  &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Ensure that referencing columns are associated &#34;</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 2437, in _determine_joins
    self.primaryjoin = join_condition(
                       ^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\util.py&#34;, line 123, in join_condition
    return Join._join_condition(
           ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py&#34;, line 1442, in _join_condition
    raise exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Can&#39;t find any foreign key relationships between &#39;commands&#39; and &#39;servers&#39;.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py&#34;, line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 275, in __init__
    self._set_entities(entities)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 287, in _set_entities
    self._raw_columns = [
                        ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 288, in &lt;listcomp&gt;
    coercions.expect(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py&#34;, line 388, in expect
    insp._post_inspect
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2724, in _post_inspect
    self._check_configure()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4254, in _do_configure_registries
    mapper._post_configure_properties()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2418, in _post_configure_properties
    prop.init()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py&#34;, line 589, in init
    self.do_init()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 1658, in do_init
    self._setup_join_conditions()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 1898, in _setup_join_conditions
    self._join_condition = jc = JoinCondition(
                                ^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 2324, in __init__
    self._determine_joins()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py&#34;, line 2458, in _determine_joins
    raise sa_exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 2437, in _determine_joins
    self.primaryjoin = join_condition(
                       ^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\util.py", line 123, in join_condition
    return Join._join_condition(
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py", line 1442, in _join_condition
    raise exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Can't find any foreign key relationships between 'commands' and 'servers'.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py", line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 275, in __init__
    self._set_entities(entities)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 287, in _set_entities
    self._raw_columns = [
                        ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 288, in <listcomp>
    coercions.expect(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py", line 388, in expect
    insp._post_inspect
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2724, in _post_inspect
    self._check_configure()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4254, in _do_configure_registries
    mapper._post_configure_properties()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2418, in _post_configure_properties
    prop.init()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py", line 589, in init
    self.do_init()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 1658, in do_init
    self._setup_join_conditions()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 1898, in _setup_join_conditions
    self._join_condition = jc = JoinCondition(
                                ^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 2324, in __init__
    self._determine_joins()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py", line 2458, in _determine_joins
    raise sa_exc.NoForeignKeysError(
sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.


-->

[2025-06-03 12:49:51,699] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:50:51,693] DEBUG: Checking approval status for server 8
[2025-06-03 12:50:51,693] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:50:53,732] DEBUG: Response status code: 500
[2025-06-03 12:50:53,732] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:50:53 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '38731', 'Connection': 'close'}
[2025-06-03 12:50:53,733] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "ylvYayhZRa9cjj7aRLiE";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1730237391360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1730237391504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1730237391648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1730237391792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1730237391936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1730237392080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1730237392224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">20</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws">        </span>g.server = server</pre>
<pre class="line after"><span class="ws">        </span>return f(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre></div>
</div>

<li><div class="frame" id="frame-1730237398128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py"</cite>,
      line <em class="line">22</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>:meta private:</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __get__(self, obj: Model | None, cls: type[Model]) -&gt; Query:</pre>
<pre class="line current"><span class="ws">        </span>return cls.query_class(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>cls, session=cls.__fsa__.session()  # type: ignore[arg-type]</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class Model:</pre></div>
</div>

<li><div class="frame" id="frame-1730237398272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">275</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># where it stores a Query without a Session and also there are tests</pre>
<pre class="line before"><span class="ws">        </span># for the query(Entity).with_session(session) API which is likely in</pre>
<pre class="line before"><span class="ws">        </span># some old recipes, however these are legacy as select() can now be</pre>
<pre class="line before"><span class="ws">        </span># used.</pre>
<pre class="line before"><span class="ws">        </span>self.session = session  # type: ignore</pre>
<pre class="line current"><span class="ws">        </span>self._set_entities(entities)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _set_propagate_attrs(self, values: Mapping[str, Any]) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>self._propagate_attrs = util.immutabledict(values)</pre>
<pre class="line after"><span class="ws">        </span>return self</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730237398416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">287</em>,
      in <code class="function">_set_entities</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self,</pre>
<pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line current"><span class="ws">        </span>self._raw_columns = [
<span class="ws">        </span>                    </pre>
<pre class="line after"><span class="ws">            </span>coercions.expect(</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre></div>
</div>

<li><div class="frame" id="frame-1730237398560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">288</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>self._raw_columns = [</pre>
<pre class="line current"><span class="ws">            </span>coercions.expect(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-1730237398704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py"</cite>,
      line <em class="line">388</em>,
      in <code class="function">expect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if not is_clause_element:</pre>
<pre class="line before"><span class="ws">                </span>if impl._use_inspection and not disable_inspection:</pre>
<pre class="line before"><span class="ws">                    </span>insp = inspection.inspect(element, raiseerr=False)</pre>
<pre class="line before"><span class="ws">                    </span>if insp is not None:</pre>
<pre class="line before"><span class="ws">                        </span>if post_inspect:</pre>
<pre class="line current"><span class="ws">                            </span>insp._post_inspect
<span class="ws">                            </span>^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                        </span>try:</pre>
<pre class="line after"><span class="ws">                            </span>resolved = insp.__clause_element__()</pre>
<pre class="line after"><span class="ws">                        </span>except AttributeError:</pre>
<pre class="line after"><span class="ws">                            </span>impl._raise_for_expected(original_element, argname)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730237398848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">1257</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>def __get__(self, obj: Any, cls: Any) -&gt; _T: ...</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def __get__(self, obj, cls):</pre>
<pre class="line before"><span class="ws">            </span>if obj is None:</pre>
<pre class="line before"><span class="ws">                </span>return self</pre>
<pre class="line current"><span class="ws">            </span>obj.__dict__[self.__name__] = result = self.fget(obj)
<span class="ws">            </span>                                       ^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>obj._memoized_keys |= {self.__name__}</pre>
<pre class="line after"><span class="ws">            </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@classmethod</pre>
<pre class="line after"><span class="ws">    </span>def memoized_instancemethod(cls, fn: _F) -&gt; _F:</pre></div>
</div>

<li><div class="frame" id="frame-1730238283840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2724</em>,
      in <code class="function">_post_inspect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>coercions.expect(roles.ColumnsClauseRole, ent, keep_inspect=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>This allows the inspection process run a configure mappers hook.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>self._check_configure()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@HasMemoized_ro_memoized_attribute</pre>
<pre class="line after"><span class="ws">    </span>def _with_polymorphic_selectable(self) -&gt; FromClause:</pre>
<pre class="line after"><span class="ws">        </span>if not self.with_polymorphic:</pre>
<pre class="line after"><span class="ws">            </span>return self.persist_selectable</pre></div>
</div>

<li><div class="frame" id="frame-1730238283984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2401</em>,
      in <code class="function">_check_configure</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;operation.&#34;,</pre>
<pre class="line before"><span class="ws">        </span>sa_exc.SAWarning,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def _check_configure(self) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self.registry._new_mappers:</pre>
<pre class="line current"><span class="ws">            </span>_configure_registries({self.registry}, cascade=True)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _post_configure_properties(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Call the ``init()`` method on all ``MapperProperties``</pre>
<pre class="line after"><span class="ws">        </span>attached to this mapper.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730238284128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4213</em>,
      in <code class="function">_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># initialize properties on all mappers</pre>
<pre class="line before"><span class="ws">            </span># note that _mapper_registry is unordered, which</pre>
<pre class="line before"><span class="ws">            </span># may randomly conceal/reveal issues related to</pre>
<pre class="line before"><span class="ws">            </span># the order of mapper compilation</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>_do_configure_registries(registries, cascade)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>_already_compiling = False</pre>
<pre class="line after"><span class="ws">    </span>Mapper.dispatch._for_class(Mapper).after_configured()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730238284272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4250</em>,
      in <code class="function">_do_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>&#34;mappers. Triggering mapper: &#39;%s&#39;. &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;Original exception was: %s&#34;</pre>
<pre class="line before"><span class="ws">                    </span>% (mapper, mapper._configure_failed)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws">                </span>e._configure_failed = mapper._configure_failed  # type: ignore</pre>
<pre class="line current"><span class="ws">                </span>raise e
<span class="ws">                </span>^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if not mapper.configured:</pre>
<pre class="line after"><span class="ws">                </span>try:</pre>
<pre class="line after"><span class="ws">                    </span>mapper._post_configure_properties()</pre>
<pre class="line after"><span class="ws">                    </span>mapper._expire_memoizations()</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py&#34;, line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 275, in __init__
    self._set_entities(entities)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 287, in _set_entities
    self._raw_columns = [
                        ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 288, in &lt;listcomp&gt;
    coercions.expect(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py&#34;, line 388, in expect
    insp._post_inspect
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2724, in _post_inspect
    self._check_configure()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4250, in _do_configure_registries
    raise e
sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py", line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 275, in __init__
    self._set_entities(entities)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 287, in _set_entities
    self._raw_columns = [
                        ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 288, in <listcomp>
    coercions.expect(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py", line 388, in expect
    insp._post_inspect
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2724, in _post_inspect
    self._check_configure()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4250, in _do_configure_registries
    raise e
sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Command(commands)]'. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.


-->

[2025-06-03 12:50:53,733] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "ylvYayhZRa9cjj7aRLiE";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InvalidRequestError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1730237391360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1730237391504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1730237391648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1730237391792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1730237391936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1730237392080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1730237392224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">20</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws">        </span>g.server = server</pre>
<pre class="line after"><span class="ws">        </span>return f(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre></div>
</div>

<li><div class="frame" id="frame-1730237398128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py"</cite>,
      line <em class="line">22</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>:meta private:</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __get__(self, obj: Model | None, cls: type[Model]) -&gt; Query:</pre>
<pre class="line current"><span class="ws">        </span>return cls.query_class(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>cls, session=cls.__fsa__.session()  # type: ignore[arg-type]</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class Model:</pre></div>
</div>

<li><div class="frame" id="frame-1730237398272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">275</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># where it stores a Query without a Session and also there are tests</pre>
<pre class="line before"><span class="ws">        </span># for the query(Entity).with_session(session) API which is likely in</pre>
<pre class="line before"><span class="ws">        </span># some old recipes, however these are legacy as select() can now be</pre>
<pre class="line before"><span class="ws">        </span># used.</pre>
<pre class="line before"><span class="ws">        </span>self.session = session  # type: ignore</pre>
<pre class="line current"><span class="ws">        </span>self._set_entities(entities)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _set_propagate_attrs(self, values: Mapping[str, Any]) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>self._propagate_attrs = util.immutabledict(values)</pre>
<pre class="line after"><span class="ws">        </span>return self</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730237398416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">287</em>,
      in <code class="function">_set_entities</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self,</pre>
<pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line current"><span class="ws">        </span>self._raw_columns = [
<span class="ws">        </span>                    </pre>
<pre class="line after"><span class="ws">            </span>coercions.expect(</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre></div>
</div>

<li><div class="frame" id="frame-1730237398560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">288</em>,
      in <code class="function">&lt;listcomp&gt;</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>entities: Union[</pre>
<pre class="line before"><span class="ws">            </span>_ColumnsClauseArgument[Any], Iterable[_ColumnsClauseArgument[Any]]</pre>
<pre class="line before"><span class="ws">        </span>],</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>self._raw_columns = [</pre>
<pre class="line current"><span class="ws">            </span>coercions.expect(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>roles.ColumnsClauseRole,</pre>
<pre class="line after"><span class="ws">                </span>ent,</pre>
<pre class="line after"><span class="ws">                </span>apply_propagate_attrs=self,</pre>
<pre class="line after"><span class="ws">                </span>post_inspect=True,</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-1730237398704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py"</cite>,
      line <em class="line">388</em>,
      in <code class="function">expect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if not is_clause_element:</pre>
<pre class="line before"><span class="ws">                </span>if impl._use_inspection and not disable_inspection:</pre>
<pre class="line before"><span class="ws">                    </span>insp = inspection.inspect(element, raiseerr=False)</pre>
<pre class="line before"><span class="ws">                    </span>if insp is not None:</pre>
<pre class="line before"><span class="ws">                        </span>if post_inspect:</pre>
<pre class="line current"><span class="ws">                            </span>insp._post_inspect
<span class="ws">                            </span>^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                        </span>try:</pre>
<pre class="line after"><span class="ws">                            </span>resolved = insp.__clause_element__()</pre>
<pre class="line after"><span class="ws">                        </span>except AttributeError:</pre>
<pre class="line after"><span class="ws">                            </span>impl._raise_for_expected(original_element, argname)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730237398848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">1257</em>,
      in <code class="function">__get__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>def __get__(self, obj: Any, cls: Any) -&gt; _T: ...</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def __get__(self, obj, cls):</pre>
<pre class="line before"><span class="ws">            </span>if obj is None:</pre>
<pre class="line before"><span class="ws">                </span>return self</pre>
<pre class="line current"><span class="ws">            </span>obj.__dict__[self.__name__] = result = self.fget(obj)
<span class="ws">            </span>                                       ^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>obj._memoized_keys |= {self.__name__}</pre>
<pre class="line after"><span class="ws">            </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@classmethod</pre>
<pre class="line after"><span class="ws">    </span>def memoized_instancemethod(cls, fn: _F) -&gt; _F:</pre></div>
</div>

<li><div class="frame" id="frame-1730238283840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2724</em>,
      in <code class="function">_post_inspect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>coercions.expect(roles.ColumnsClauseRole, ent, keep_inspect=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>This allows the inspection process run a configure mappers hook.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>self._check_configure()
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@HasMemoized_ro_memoized_attribute</pre>
<pre class="line after"><span class="ws">    </span>def _with_polymorphic_selectable(self) -&gt; FromClause:</pre>
<pre class="line after"><span class="ws">        </span>if not self.with_polymorphic:</pre>
<pre class="line after"><span class="ws">            </span>return self.persist_selectable</pre></div>
</div>

<li><div class="frame" id="frame-1730238283984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">2401</em>,
      in <code class="function">_check_configure</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;operation.&#34;,</pre>
<pre class="line before"><span class="ws">        </span>sa_exc.SAWarning,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def _check_configure(self) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self.registry._new_mappers:</pre>
<pre class="line current"><span class="ws">            </span>_configure_registries({self.registry}, cascade=True)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _post_configure_properties(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Call the ``init()`` method on all ``MapperProperties``</pre>
<pre class="line after"><span class="ws">        </span>attached to this mapper.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730238284128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4213</em>,
      in <code class="function">_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># initialize properties on all mappers</pre>
<pre class="line before"><span class="ws">            </span># note that _mapper_registry is unordered, which</pre>
<pre class="line before"><span class="ws">            </span># may randomly conceal/reveal issues related to</pre>
<pre class="line before"><span class="ws">            </span># the order of mapper compilation</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>_do_configure_registries(registries, cascade)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>_already_compiling = False</pre>
<pre class="line after"><span class="ws">    </span>Mapper.dispatch._for_class(Mapper).after_configured()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1730238284272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py"</cite>,
      line <em class="line">4250</em>,
      in <code class="function">_do_configure_registries</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>&#34;mappers. Triggering mapper: &#39;%s&#39;. &#34;</pre>
<pre class="line before"><span class="ws">                    </span>&#34;Original exception was: %s&#34;</pre>
<pre class="line before"><span class="ws">                    </span>% (mapper, mapper._configure_failed)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws">                </span>e._configure_failed = mapper._configure_failed  # type: ignore</pre>
<pre class="line current"><span class="ws">                </span>raise e
<span class="ws">                </span>^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if not mapper.configured:</pre>
<pre class="line after"><span class="ws">                </span>try:</pre>
<pre class="line after"><span class="ws">                    </span>mapper._post_configure_properties()</pre>
<pre class="line after"><span class="ws">                    </span>mapper._expire_memoizations()</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py&#34;, line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 275, in __init__
    self._set_entities(entities)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 287, in _set_entities
    self._raw_columns = [
                        ^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 288, in &lt;listcomp&gt;
    coercions.expect(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py&#34;, line 388, in expect
    insp._post_inspect
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2724, in _post_inspect
    self._check_configure()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py&#34;, line 4250, in _do_configure_registries
    raise e
sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can&#39;t proceed with initialization of other mappers. Triggering mapper: &#39;Mapper[Command(commands)]&#39;. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a &#39;primaryjoin&#39; expression.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 20, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_sqlalchemy\model.py", line 22, in __get__
    return cls.query_class(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 275, in __init__
    self._set_entities(entities)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 287, in _set_entities
    self._raw_columns = [
                        ^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 288, in <listcomp>
    coercions.expect(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py", line 388, in expect
    insp._post_inspect
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 1257, in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
                                           ^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2724, in _post_inspect
    self._check_configure()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 2401, in _check_configure
    _configure_registries({self.registry}, cascade=True)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4213, in _configure_registries
    _do_configure_registries(registries, cascade)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py", line 4250, in _do_configure_registries
    raise e
sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Command(commands)]'. Original exception was: Could not determine join condition between parent/child tables on relationship Command.server - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.


-->

[2025-06-03 12:50:53,734] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:51:53,728] DEBUG: Checking approval status for server 8
[2025-06-03 12:51:53,728] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:51:55,799] DEBUG: Response status code: 200
[2025-06-03 12:51:55,800] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:51:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:51:55,800] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:51:55,801] INFO: Server is approved and ready to process commands
[2025-06-03 12:51:55,801] INFO: Fetching commands...
[2025-06-03 12:51:55,801] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:51:55,801] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:51:57,966] DEBUG: Response status code: 500
[2025-06-03 12:51:57,966] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:51:57 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '67600', 'Connection': 'close'}
[2025-06-03 12:51:57,968] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "lSDoAuOhY33mJsUNPz7u";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1647180607648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1647180607792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1647180607936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1647180608080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180608224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1647178961616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1647178966224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1647178966368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1647178966512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1647178966656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1647178966800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1647178966944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647178972848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1690</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>CommandHistory.executed_time.is_(None),</pre>
<pre class="line before"><span class="ws">        </span>db.or_(</pre>
<pre class="line before"><span class="ws">            </span>CommandHistory.scheduled_time.is_(None),</pre>
<pre class="line before"><span class="ws">            </span>CommandHistory.scheduled_time &lt;= now</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">    </span>).all()
<span class="ws">    </span>  ^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(hist.command_id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: hist.command.command_text if hist.command else hist.command_name,</pre></div>
</div>

<li><div class="frame" id="frame-1647178972992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore
<span class="ws">        </span>       ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1647179550576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647179550720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1647179557056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1647179557200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1647179559216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180598576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180602608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1647180602752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1647180602896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180603040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1647180603184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1647180603328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1647180606208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1647180606928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180607072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1690, in get_client_commands
    ).all()
      ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'command_history.run_status' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1690, in get_client_commands
    ).all()
      ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'command_history.run_status' in 'field list'")
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time <= %s)]
[parameters: (8, 'pending', datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 12:51:57,970] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "lSDoAuOhY33mJsUNPz7u";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1647180607648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1647180607792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1647180607936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1647180608080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180608224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1647178961616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1647178966224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1647178966368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1647178966512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1647178966656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1647178966800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1647178966944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647178972848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1690</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>CommandHistory.executed_time.is_(None),</pre>
<pre class="line before"><span class="ws">        </span>db.or_(</pre>
<pre class="line before"><span class="ws">            </span>CommandHistory.scheduled_time.is_(None),</pre>
<pre class="line before"><span class="ws">            </span>CommandHistory.scheduled_time &lt;= now</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">    </span>).all()
<span class="ws">    </span>  ^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return jsonify({</pre>
<pre class="line after"><span class="ws">        </span>&#39;commands&#39;: [{</pre>
<pre class="line after"><span class="ws">            </span>&#39;id&#39;: str(hist.command_id),</pre>
<pre class="line after"><span class="ws">            </span>&#39;command&#39;: hist.command.command_text if hist.command else hist.command_name,</pre></div>
</div>

<li><div class="frame" id="frame-1647178972992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore
<span class="ws">        </span>       ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1647179550576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647179550720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1647179557056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1647179557200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1647179559216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180598576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180602608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1647180602752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1647180602896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180603040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1647180603184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1647180603328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1647180606208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1647180606928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1647180607072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1690, in get_client_commands
    ).all()
      ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;command_history.run_status&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time &lt;= %s)]
[parameters: (8, &#39;pending&#39;, datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'command_history.run_status' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1690, in get_client_commands
    ).all()
      ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'command_history.run_status' in 'field list'")
[SQL: SELECT command_history.id AS command_history_id, command_history.server_id AS command_history_server_id, command_history.server_name AS command_history_server_name, command_history.command_id AS command_history_command_id, command_history.command_name AS command_history_command_name, command_history.task_id AS command_history_task_id, command_history.task_command_id AS command_history_task_command_id, command_history.scheduled_time AS command_history_scheduled_time, command_history.executed_time AS command_history_executed_time, command_history.duration_seconds AS command_history_duration_seconds, command_history.output AS command_history_output, command_history.run_type AS command_history_run_type, command_history.run_status AS command_history_run_status, command_history.created_by AS command_history_created_by, command_history.reason AS command_history_reason, command_history.created_at AS command_history_created_at 
FROM command_history INNER JOIN commands ON commands.id = command_history.command_id 
WHERE command_history.server_id = %s AND command_history.run_status = %s AND command_history.executed_time IS NULL AND (command_history.scheduled_time IS NULL OR command_history.scheduled_time <= %s)]
[parameters: (8, 'pending', datetime.datetime(2025, 6, 3, 9, 51, 57, 841274, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 12:51:57,971] INFO: Commands: []
[2025-06-03 12:52:30,006] DEBUG: Checking approval status for server 8
[2025-06-03 12:52:30,006] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:52:34,074] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000025730BB0A50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-03 12:52:34,176] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000025730BB0A50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000025730BB0A50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 320, in check_approval_status
    log_debug(f"Response status code: {resp.status_code}")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000025730BB0A50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-03 12:52:34,176] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 12:53:32,016] DEBUG: Checking approval status for server 8
[2025-06-03 12:53:32,017] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:53:34,070] DEBUG: Response status code: 200
[2025-06-03 12:53:34,070] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:53:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:53:34,071] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:53:34,072] INFO: Server is approved and ready to process commands
[2025-06-03 12:53:34,072] INFO: Fetching commands...
[2025-06-03 12:53:34,073] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:53:34,074] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:53:36,126] DEBUG: Response status code: 200
[2025-06-03 12:53:36,127] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:53:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:53:36,127] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:53:36,128] INFO: Commands: []
[2025-06-03 12:54:08,163] DEBUG: Checking approval status for server 8
[2025-06-03 12:54:08,164] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:54:10,210] DEBUG: Response status code: 200
[2025-06-03 12:54:10,213] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:54:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:54:10,214] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:54:10,215] INFO: Server is approved and ready to process commands
[2025-06-03 12:54:10,216] INFO: Fetching commands...
[2025-06-03 12:54:10,218] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:54:10,218] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:54:12,249] DEBUG: Response status code: 200
[2025-06-03 12:54:12,249] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:54:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:54:12,250] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:54:12,250] INFO: Commands: []
[2025-06-03 12:54:44,282] DEBUG: Checking approval status for server 8
[2025-06-03 12:54:44,282] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:54:46,332] DEBUG: Response status code: 200
[2025-06-03 12:54:46,333] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:54:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:54:46,333] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:54:46,334] INFO: Server is approved and ready to process commands
[2025-06-03 12:54:46,334] INFO: Fetching commands...
[2025-06-03 12:54:46,336] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:54:46,336] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:54:48,369] DEBUG: Response status code: 200
[2025-06-03 12:54:48,369] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:54:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:54:48,369] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:54:48,370] INFO: Commands: []
[2025-06-03 12:55:20,400] DEBUG: Checking approval status for server 8
[2025-06-03 12:55:20,400] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:55:22,452] DEBUG: Response status code: 200
[2025-06-03 12:55:22,452] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:55:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:55:22,453] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:55:22,453] INFO: Server is approved and ready to process commands
[2025-06-03 12:55:22,454] INFO: Fetching commands...
[2025-06-03 12:55:22,455] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:55:22,456] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:55:24,481] DEBUG: Response status code: 200
[2025-06-03 12:55:24,481] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:55:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:55:24,482] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:55:24,482] INFO: Commands: []
[2025-06-03 12:55:56,525] DEBUG: Checking approval status for server 8
[2025-06-03 12:55:56,526] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:55:58,572] DEBUG: Response status code: 200
[2025-06-03 12:55:58,573] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:55:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:55:58,573] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:55:58,574] INFO: Server is approved and ready to process commands
[2025-06-03 12:55:58,574] INFO: Fetching commands...
[2025-06-03 12:55:58,575] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:55:58,575] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:56:00,603] DEBUG: Response status code: 200
[2025-06-03 12:56:00,604] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:56:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:56:00,604] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:56:00,605] INFO: Commands: []
[2025-06-03 12:56:32,656] DEBUG: Checking approval status for server 8
[2025-06-03 12:56:32,656] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:56:34,678] DEBUG: Response status code: 200
[2025-06-03 12:56:34,678] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:56:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:56:34,680] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:56:34,681] INFO: Server is approved and ready to process commands
[2025-06-03 12:56:34,681] INFO: Fetching commands...
[2025-06-03 12:56:34,682] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:56:34,682] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:56:36,713] DEBUG: Response status code: 200
[2025-06-03 12:56:36,713] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:56:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:56:36,714] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:56:36,714] INFO: Commands: []
[2025-06-03 12:57:08,753] DEBUG: Checking approval status for server 8
[2025-06-03 12:57:08,754] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:57:10,795] DEBUG: Response status code: 200
[2025-06-03 12:57:10,795] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:57:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:57:10,795] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:57:10,796] INFO: Server is approved and ready to process commands
[2025-06-03 12:57:10,796] INFO: Fetching commands...
[2025-06-03 12:57:10,797] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:57:10,797] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:57:12,847] DEBUG: Response status code: 200
[2025-06-03 12:57:12,847] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:57:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:57:12,848] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:57:12,848] INFO: Commands: []
[2025-06-03 12:57:44,875] DEBUG: Checking approval status for server 8
[2025-06-03 12:57:44,876] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:57:46,897] DEBUG: Response status code: 200
[2025-06-03 12:57:46,897] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:57:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:57:46,898] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:57:46,898] INFO: Server is approved and ready to process commands
[2025-06-03 12:57:46,899] INFO: Fetching commands...
[2025-06-03 12:57:46,900] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:57:46,900] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:57:48,942] DEBUG: Response status code: 200
[2025-06-03 12:57:48,943] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:57:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:57:48,943] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:57:48,944] INFO: Commands: []
[2025-06-03 12:58:20,979] DEBUG: Checking approval status for server 8
[2025-06-03 12:58:20,979] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:58:23,008] DEBUG: Response status code: 200
[2025-06-03 12:58:23,008] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:58:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:58:23,009] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:58:23,009] INFO: Server is approved and ready to process commands
[2025-06-03 12:58:23,010] INFO: Fetching commands...
[2025-06-03 12:58:23,010] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:58:23,010] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:58:25,065] DEBUG: Response status code: 200
[2025-06-03 12:58:25,067] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:58:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:58:25,068] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:58:25,068] INFO: Commands: []
[2025-06-03 12:58:57,106] DEBUG: Checking approval status for server 8
[2025-06-03 12:58:57,106] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:58:59,159] DEBUG: Response status code: 200
[2025-06-03 12:58:59,159] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:58:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:58:59,159] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:58:59,160] INFO: Server is approved and ready to process commands
[2025-06-03 12:58:59,160] INFO: Fetching commands...
[2025-06-03 12:58:59,160] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:58:59,160] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:59:01,189] DEBUG: Response status code: 200
[2025-06-03 12:59:01,189] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:59:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:59:01,189] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:59:01,191] INFO: Commands: []
[2025-06-03 12:59:33,221] DEBUG: Checking approval status for server 8
[2025-06-03 12:59:33,221] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:59:35,256] DEBUG: Response status code: 200
[2025-06-03 12:59:35,257] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:59:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 12:59:35,257] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 12:59:35,258] INFO: Server is approved and ready to process commands
[2025-06-03 12:59:35,259] INFO: Fetching commands...
[2025-06-03 12:59:35,259] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 12:59:35,260] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 12:59:37,293] DEBUG: Response status code: 200
[2025-06-03 12:59:37,294] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 09:59:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 12:59:37,294] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 12:59:37,294] INFO: Commands: []
[2025-06-03 13:00:09,308] DEBUG: Checking approval status for server 8
[2025-06-03 13:00:09,309] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:00:11,355] DEBUG: Response status code: 200
[2025-06-03 13:00:11,355] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:00:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:00:11,356] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:00:11,356] INFO: Server is approved and ready to process commands
[2025-06-03 13:00:11,356] INFO: Fetching commands...
[2025-06-03 13:00:11,357] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:00:11,357] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:00:13,393] DEBUG: Response status code: 200
[2025-06-03 13:00:13,393] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:00:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:00:13,394] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:00:13,394] INFO: Commands: []
[2025-06-03 13:00:45,448] DEBUG: Checking approval status for server 8
[2025-06-03 13:00:45,448] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:00:47,475] DEBUG: Response status code: 200
[2025-06-03 13:00:47,475] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:00:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:00:47,476] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:00:47,476] INFO: Server is approved and ready to process commands
[2025-06-03 13:00:47,476] INFO: Fetching commands...
[2025-06-03 13:00:47,477] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:00:47,478] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:00:49,507] DEBUG: Response status code: 200
[2025-06-03 13:00:49,508] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:00:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:00:49,508] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:00:49,508] INFO: Commands: []
[2025-06-03 13:01:21,546] DEBUG: Checking approval status for server 8
[2025-06-03 13:01:21,546] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:01:23,575] DEBUG: Response status code: 200
[2025-06-03 13:01:23,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:01:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:01:23,576] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:01:23,576] INFO: Server is approved and ready to process commands
[2025-06-03 13:01:23,576] INFO: Fetching commands...
[2025-06-03 13:01:23,577] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:01:23,577] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:01:25,622] DEBUG: Response status code: 200
[2025-06-03 13:01:25,623] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:01:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:01:25,624] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:01:25,624] INFO: Commands: []
[2025-06-03 13:01:57,666] DEBUG: Checking approval status for server 8
[2025-06-03 13:01:57,667] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:01:59,705] DEBUG: Response status code: 200
[2025-06-03 13:01:59,705] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:01:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:01:59,705] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:01:59,706] INFO: Server is approved and ready to process commands
[2025-06-03 13:01:59,706] INFO: Fetching commands...
[2025-06-03 13:01:59,707] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:01:59,707] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:02:01,754] DEBUG: Response status code: 200
[2025-06-03 13:02:01,754] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:02:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:02:01,754] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:02:01,755] INFO: Commands: []
[2025-06-03 13:02:33,804] DEBUG: Checking approval status for server 8
[2025-06-03 13:02:33,804] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:02:35,892] DEBUG: Response status code: 200
[2025-06-03 13:02:35,892] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:02:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:02:35,893] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:02:35,894] INFO: Server is approved and ready to process commands
[2025-06-03 13:02:35,894] INFO: Fetching commands...
[2025-06-03 13:02:35,895] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:02:35,895] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:02:37,937] DEBUG: Response status code: 200
[2025-06-03 13:02:37,937] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:02:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:02:37,939] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:02:37,940] INFO: Commands: []
[2025-06-03 13:03:09,993] DEBUG: Checking approval status for server 8
[2025-06-03 13:03:09,993] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:03:12,027] DEBUG: Response status code: 200
[2025-06-03 13:03:12,027] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:03:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:03:12,028] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:03:12,028] INFO: Server is approved and ready to process commands
[2025-06-03 13:03:12,028] INFO: Fetching commands...
[2025-06-03 13:03:12,028] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:03:12,029] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:03:14,083] DEBUG: Response status code: 200
[2025-06-03 13:03:14,083] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:03:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:03:14,086] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:03:14,086] INFO: Commands: []
[2025-06-03 13:03:46,119] DEBUG: Checking approval status for server 8
[2025-06-03 13:03:46,120] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:03:48,169] DEBUG: Response status code: 200
[2025-06-03 13:03:48,170] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:03:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:03:48,170] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:03:48,170] INFO: Server is approved and ready to process commands
[2025-06-03 13:03:48,171] INFO: Fetching commands...
[2025-06-03 13:03:48,172] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:03:48,172] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:03:50,239] DEBUG: Response status code: 200
[2025-06-03 13:03:50,240] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:03:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:03:50,243] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:03:50,246] INFO: Commands: []
[2025-06-03 13:04:22,290] DEBUG: Checking approval status for server 8
[2025-06-03 13:04:22,290] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:04:24,338] DEBUG: Response status code: 200
[2025-06-03 13:04:24,338] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:04:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:04:24,339] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:04:24,340] INFO: Server is approved and ready to process commands
[2025-06-03 13:04:24,341] INFO: Fetching commands...
[2025-06-03 13:04:24,341] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:04:24,342] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:04:26,395] DEBUG: Response status code: 200
[2025-06-03 13:04:26,395] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:04:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:04:26,396] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:04:26,396] INFO: Commands: []
[2025-06-03 13:04:58,414] DEBUG: Checking approval status for server 8
[2025-06-03 13:04:58,416] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:05:00,470] DEBUG: Response status code: 200
[2025-06-03 13:05:00,470] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:05:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:05:00,470] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:05:00,471] INFO: Server is approved and ready to process commands
[2025-06-03 13:05:00,471] INFO: Fetching commands...
[2025-06-03 13:05:00,473] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:05:00,473] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:05:02,513] DEBUG: Response status code: 200
[2025-06-03 13:05:02,514] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:05:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:05:02,515] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:05:02,516] INFO: Commands: []
[2025-06-03 13:05:34,547] DEBUG: Checking approval status for server 8
[2025-06-03 13:05:34,547] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:05:36,585] DEBUG: Response status code: 200
[2025-06-03 13:05:36,586] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:05:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:05:36,587] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:05:36,588] INFO: Server is approved and ready to process commands
[2025-06-03 13:05:36,588] INFO: Fetching commands...
[2025-06-03 13:05:36,589] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:05:36,590] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:05:38,614] DEBUG: Response status code: 200
[2025-06-03 13:05:38,615] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:05:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:05:38,615] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:05:38,615] INFO: Commands: []
[2025-06-03 13:06:10,661] DEBUG: Checking approval status for server 8
[2025-06-03 13:06:10,662] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:06:12,699] DEBUG: Response status code: 200
[2025-06-03 13:06:12,699] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:06:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:06:12,700] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:06:12,700] INFO: Server is approved and ready to process commands
[2025-06-03 13:06:12,700] INFO: Fetching commands...
[2025-06-03 13:06:12,701] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:06:12,701] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:06:14,743] DEBUG: Response status code: 200
[2025-06-03 13:06:14,743] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:06:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:06:14,743] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:06:14,745] INFO: Commands: []
[2025-06-03 13:06:47,223] DEBUG: Checking approval status for server 8
[2025-06-03 13:06:47,223] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:06:49,264] DEBUG: Response status code: 200
[2025-06-03 13:06:49,264] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:06:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:06:49,264] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:06:49,265] INFO: Server is approved and ready to process commands
[2025-06-03 13:06:49,265] INFO: Fetching commands...
[2025-06-03 13:06:49,265] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:06:49,266] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:06:51,327] DEBUG: Response status code: 200
[2025-06-03 13:06:51,327] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:06:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:06:51,329] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:06:51,330] INFO: Commands: []
[2025-06-03 13:07:23,383] DEBUG: Checking approval status for server 8
[2025-06-03 13:07:23,384] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:07:25,423] DEBUG: Response status code: 200
[2025-06-03 13:07:25,424] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:07:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:07:25,424] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:07:25,425] INFO: Server is approved and ready to process commands
[2025-06-03 13:07:25,426] INFO: Fetching commands...
[2025-06-03 13:07:25,426] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:07:25,426] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:07:27,481] DEBUG: Response status code: 200
[2025-06-03 13:07:27,482] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:07:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '229', 'Connection': 'close'}
[2025-06-03 13:07:27,482] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "3",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "4",
      "id": null
    }
  ]
}
[2025-06-03 13:07:27,482] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '3', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '4', 'id': None}]
[2025-06-03 13:07:29,513] INFO: Running command: dir (admin=True)
[2025-06-03 13:07:29,832] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025  12:50 PM          14949 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.31800270080566406, 'returncode': 0}
[2025-06-03 13:09:40,522] DEBUG: Checking approval status for server 8
[2025-06-03 13:09:40,522] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:09:42,635] DEBUG: Response status code: 200
[2025-06-03 13:09:42,635] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:09:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:09:42,636] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:09:42,636] INFO: Server is approved and ready to process commands
[2025-06-03 13:09:42,636] INFO: Fetching commands...
[2025-06-03 13:09:42,637] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:09:42,637] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:09:44,678] DEBUG: Response status code: 404
[2025-06-03 13:09:44,679] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:09:44 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-03 13:09:44,680] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 13:09:44,680] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 13:09:44,681] INFO: Commands: []
[2025-06-03 13:09:46,714] ERROR: Failed to check for update: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-03 13:12:18,658] DEBUG: Checking approval status for server 8
[2025-06-03 13:12:18,658] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:12:20,752] DEBUG: Response status code: 200
[2025-06-03 13:12:20,752] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:12:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:12:20,752] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:12:20,753] INFO: Server is approved and ready to process commands
[2025-06-03 13:12:20,753] INFO: Fetching commands...
[2025-06-03 13:12:20,754] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:12:20,754] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:12:22,786] DEBUG: Response status code: 200
[2025-06-03 13:12:22,786] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:12:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:12:22,787] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:12:22,787] INFO: Commands: []
[2025-06-03 13:12:54,823] DEBUG: Checking approval status for server 8
[2025-06-03 13:12:54,825] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:12:56,949] DEBUG: Response status code: 200
[2025-06-03 13:12:56,950] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:12:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:12:56,951] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:12:56,951] INFO: Server is approved and ready to process commands
[2025-06-03 13:12:56,952] INFO: Fetching commands...
[2025-06-03 13:12:56,952] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:12:56,953] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:12:59,000] DEBUG: Response status code: 200
[2025-06-03 13:12:59,001] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:12:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:12:59,001] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:12:59,001] INFO: Commands: []
[2025-06-03 13:13:31,043] DEBUG: Checking approval status for server 8
[2025-06-03 13:13:31,045] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:13:33,131] DEBUG: Response status code: 200
[2025-06-03 13:13:33,132] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:13:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:13:33,132] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:13:33,133] INFO: Server is approved and ready to process commands
[2025-06-03 13:13:33,133] INFO: Fetching commands...
[2025-06-03 13:13:33,133] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:13:33,134] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:13:35,189] DEBUG: Response status code: 200
[2025-06-03 13:13:35,189] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:13:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:13:35,190] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:13:35,190] INFO: Commands: []
[2025-06-03 13:14:07,221] DEBUG: Checking approval status for server 8
[2025-06-03 13:14:07,222] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:14:09,253] DEBUG: Response status code: 200
[2025-06-03 13:14:09,254] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:14:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:14:09,254] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:14:09,255] INFO: Server is approved and ready to process commands
[2025-06-03 13:14:09,255] INFO: Fetching commands...
[2025-06-03 13:14:09,255] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:14:09,256] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:14:11,287] DEBUG: Response status code: 200
[2025-06-03 13:14:11,288] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:14:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:14:11,289] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:14:11,289] INFO: Commands: []
[2025-06-03 13:14:43,326] DEBUG: Checking approval status for server 8
[2025-06-03 13:14:43,327] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:14:45,369] DEBUG: Response status code: 200
[2025-06-03 13:14:45,370] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:14:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:14:45,370] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:14:45,372] INFO: Server is approved and ready to process commands
[2025-06-03 13:14:45,372] INFO: Fetching commands...
[2025-06-03 13:14:45,373] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:14:45,373] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:14:47,413] DEBUG: Response status code: 200
[2025-06-03 13:14:47,413] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:14:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 13:14:47,414] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 13:14:47,415] INFO: Commands: []
[2025-06-03 13:15:19,449] DEBUG: Checking approval status for server 8
[2025-06-03 13:15:19,450] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:15:21,495] DEBUG: Response status code: 200
[2025-06-03 13:15:21,495] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:15:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:15:21,495] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:15:21,496] INFO: Server is approved and ready to process commands
[2025-06-03 13:15:21,496] INFO: Fetching commands...
[2025-06-03 13:15:21,497] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:15:21,498] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:15:23,537] DEBUG: Response status code: 200
[2025-06-03 13:15:23,537] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:15:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '125', 'Connection': 'close'}
[2025-06-03 13:15:23,538] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    }
  ]
}
[2025-06-03 13:15:23,539] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}]
[2025-06-03 13:15:25,577] INFO: Running command: dir (admin=True)
[2025-06-03 13:15:26,571] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.9927811622619629, 'returncode': 0}
[2025-06-03 13:15:30,698] INFO: Result for command 1 sent successfully
[2025-06-03 13:16:00,698] DEBUG: Checking approval status for server 8
[2025-06-03 13:16:00,700] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:16:02,732] DEBUG: Response status code: 200
[2025-06-03 13:16:02,733] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:16:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:16:02,733] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:16:02,733] INFO: Server is approved and ready to process commands
[2025-06-03 13:16:02,734] INFO: Fetching commands...
[2025-06-03 13:16:02,734] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:16:02,734] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:16:04,758] DEBUG: Response status code: 200
[2025-06-03 13:16:04,758] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:16:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '227', 'Connection': 'close'}
[2025-06-03 13:16:04,759] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 13:16:04,760] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 13:16:06,804] INFO: Running command: dir (admin=True)
[2025-06-03 13:16:08,050] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 1.246556043624878, 'returncode': 0}
[2025-06-03 13:16:12,183] INFO: Result for command 1 sent successfully
[2025-06-03 13:16:12,184] INFO: Running command: dir (admin=True)
[2025-06-03 13:16:12,431] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2465531826019287, 'returncode': 0}
[2025-06-03 13:16:16,500] INFO: Result for command 1 sent successfully
[2025-06-03 13:16:46,499] DEBUG: Checking approval status for server 8
[2025-06-03 13:16:46,500] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:16:48,560] DEBUG: Response status code: 200
[2025-06-03 13:16:48,560] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:16:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 13:16:48,562] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 13:16:48,563] INFO: Server is approved and ready to process commands
[2025-06-03 13:16:48,564] INFO: Fetching commands...
[2025-06-03 13:16:48,565] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 13:16:48,567] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 13:16:50,622] DEBUG: Response status code: 200
[2025-06-03 13:16:50,623] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 10:16:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '227', 'Connection': 'close'}
[2025-06-03 13:16:50,623] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 13:16:50,623] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 13:16:52,648] INFO: Running command: dir (admin=True)
[2025-06-03 13:16:52,859] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2113347053527832, 'returncode': 0}
[2025-06-03 13:16:56,967] INFO: Result for command 1 sent successfully
[2025-06-03 13:16:56,967] INFO: Running command: dir (admin=True)
[2025-06-03 13:16:57,206] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.23789048194885254, 'returncode': 0}
[2025-06-03 14:15:21,649] DEBUG: Checking approval status for server 8
[2025-06-03 14:15:21,651] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:15:23,693] DEBUG: Response status code: 200
[2025-06-03 14:15:23,693] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:15:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:15:23,694] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:15:23,694] INFO: Server is approved and ready to process commands
[2025-06-03 14:15:23,695] INFO: Fetching commands...
[2025-06-03 14:15:23,695] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:15:23,695] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:15:25,717] DEBUG: Response status code: 200
[2025-06-03 14:15:25,718] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:15:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '227', 'Connection': 'close'}
[2025-06-03 14:15:25,718] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 14:15:25,719] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 14:15:27,730] INFO: Running command: dir (admin=True)
[2025-06-03 14:15:28,676] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.9455199241638184, 'returncode': 0}
[2025-06-03 14:15:32,704] INFO: Result for command 1 sent successfully
[2025-06-03 14:15:32,704] INFO: Running command: dir (admin=True)
[2025-06-03 14:15:32,946] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2426464557647705, 'returncode': 0}
[2025-06-03 14:15:36,971] INFO: Result for command 1 sent successfully
[2025-06-03 14:16:06,972] DEBUG: Checking approval status for server 8
[2025-06-03 14:16:06,973] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:16:08,989] DEBUG: Response status code: 200
[2025-06-03 14:16:08,989] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:16:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:16:08,990] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:16:08,990] INFO: Server is approved and ready to process commands
[2025-06-03 14:16:08,990] INFO: Fetching commands...
[2025-06-03 14:16:08,990] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:16:08,990] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:16:11,012] DEBUG: Response status code: 200
[2025-06-03 14:16:11,012] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:16:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '227', 'Connection': 'close'}
[2025-06-03 14:16:11,015] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 14:16:11,016] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 14:16:13,030] INFO: Running command: dir (admin=True)
[2025-06-03 14:16:13,266] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.23597383499145508, 'returncode': 0}
[2025-06-03 14:16:17,294] INFO: Result for command 1 sent successfully
[2025-06-03 14:16:17,295] INFO: Running command: dir (admin=True)
[2025-06-03 14:16:17,579] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2834906578063965, 'returncode': 0}
[2025-06-03 14:16:21,601] INFO: Result for command 1 sent successfully
[2025-06-03 14:16:51,602] DEBUG: Checking approval status for server 8
[2025-06-03 14:16:51,602] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:16:53,614] DEBUG: Response status code: 200
[2025-06-03 14:16:53,614] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:16:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:16:53,615] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:16:53,615] INFO: Server is approved and ready to process commands
[2025-06-03 14:16:53,616] INFO: Fetching commands...
[2025-06-03 14:16:53,616] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:16:53,616] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:16:55,632] DEBUG: Response status code: 200
[2025-06-03 14:16:55,633] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:16:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '227', 'Connection': 'close'}
[2025-06-03 14:16:55,633] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 14:16:55,634] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 14:16:57,658] INFO: Running command: dir (admin=True)
[2025-06-03 14:16:57,903] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.24506068229675293, 'returncode': 0}
[2025-06-03 14:17:01,925] INFO: Result for command 1 sent successfully
[2025-06-03 14:17:01,925] INFO: Running command: dir (admin=True)
[2025-06-03 14:17:02,167] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.24005651473999023, 'returncode': 0}
[2025-06-03 14:17:06,193] INFO: Result for command 1 sent successfully
[2025-06-03 14:17:36,194] DEBUG: Checking approval status for server 8
[2025-06-03 14:17:36,194] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:17:38,263] DEBUG: Response status code: 200
[2025-06-03 14:17:38,263] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:17:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:17:38,264] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:17:38,264] INFO: Server is approved and ready to process commands
[2025-06-03 14:17:38,265] INFO: Fetching commands...
[2025-06-03 14:17:38,265] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:17:38,266] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:17:40,282] DEBUG: Response status code: 200
[2025-06-03 14:17:40,282] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:17:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '227', 'Connection': 'close'}
[2025-06-03 14:17:40,283] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 14:17:40,283] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 14:17:42,298] INFO: Running command: dir (admin=True)
[2025-06-03 14:17:42,555] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.25658392906188965, 'returncode': 0}
[2025-06-03 14:17:46,668] INFO: Result for command 1 sent successfully
[2025-06-03 14:17:46,668] INFO: Running command: dir (admin=True)
[2025-06-03 14:17:47,010] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   1:10 PM          14563 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.3395712375640869, 'returncode': 0}
[2025-06-03 14:17:51,703] INFO: Result for command 1 sent successfully
[2025-06-03 14:19:37,027] DEBUG: Checking approval status for server 8
[2025-06-03 14:19:37,028] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:19:39,102] DEBUG: Response status code: 200
[2025-06-03 14:19:39,102] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:19:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:19:39,102] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:19:39,103] INFO: Server is approved and ready to process commands
[2025-06-03 14:19:39,103] INFO: Fetching commands...
[2025-06-03 14:19:39,104] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:19:39,104] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:19:41,129] DEBUG: Response status code: 200
[2025-06-03 14:19:41,129] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:19:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '433', 'Connection': 'close'}
[2025-06-03 14:19:41,130] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "3",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "4",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    }
  ]
}
[2025-06-03 14:19:41,130] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '3', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '4', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}]
[2025-06-03 14:19:43,146] INFO: Running command: dir (admin=True)
[2025-06-03 14:19:43,459] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:18 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.3134632110595703, 'returncode': 0}
[2025-06-03 14:19:45,688] ERROR: Failed to send result for command None: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:43Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:43Z&#39;, 0.3134632110595703, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "tqaOJ15GuijQmAje8PqB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:43Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:43Z&#39;, 0.3134632110595703, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2886927973056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886927973200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886927973344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886927973488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886927973632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2886926259760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2886926264512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2886926264656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2886926264800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2886926264944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2886926265088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2886926265232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886926894272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1760</em>,
      in <code class="function">submit_client_command_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>history.output = data[&#39;output&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.executed_time = data[&#39;executed_time&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.duration_seconds = data[&#39;duration_seconds&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.run_status = &#39;completed&#39; if data.get(&#39;success&#39;, True) else &#39;failed&#39;</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#39;message&#39;: &#39;Result submitted&#39;})</pre></div>
</div>

<li><div class="frame" id="frame-2886926894416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-2886926896720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-2886926903056">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886926903200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886926903488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-2886926903632">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886926903776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886926903920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-2886926904064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-2886926904208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-2886926904352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886926905648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886926905792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)
<span class="ws">                </span>^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886926905936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886926906080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">85</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>update = _collect_update_commands(</pre>
<pre class="line before"><span class="ws">            </span>uowtransaction, table, states_to_update</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_update_statements(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>update,</pre></div>
</div>

<li><div class="frame" id="frame-2886926908096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">912</em>,
      in <code class="function">_emit_update_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>check_rowcount = enable_check_rowcount and (</pre>
<pre class="line before"><span class="ws">                    </span>assert_multirow</pre>
<pre class="line before"><span class="ws">                    </span>or (assert_singlerow and len(multiparams) == 1)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">                </span>c = connection.execute(
<span class="ws">                </span>    </pre>
<pre class="line after"><span class="ws">                    </span>statement, multiparams, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">                </span>rows += c.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886926908240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886927963984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886927968016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2886927968160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2886927968304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886927968448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2886927968592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886927968736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886927971616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886927972336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886927972480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:43Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:43Z&#39;, 0.3134632110595703, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:43Z&#39; for column &#39;executed_time&#39; at row 1&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1760, in submit_client_command_result
    db.session.commit()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 85, in save_obj
    _emit_update_statements(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:43Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:43Z&#39;, 0.3134632110595703, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, "Incorrect datetime value: '2025-06-03T11:19:43Z' for column 'executed_time' at row 1")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1760, in submit_client_command_result
    db.session.commit()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 85, in save_obj
    _emit_update_statements(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, "Incorrect datetime value: '2025-06-03T11:19:43Z' for column 'executed_time' at row 1")
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: ('2025-06-03T11:19:43Z', 0.3134632110595703, '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a-l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'completed', 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 14:19:45,689] INFO: Running command: dir (admin=True)
[2025-06-03 14:19:45,921] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:18 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2311267852783203, 'returncode': 0}
[2025-06-03 14:19:47,949] ERROR: Failed to send result for command None: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:45Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:45Z&#39;, 0.2311267852783203, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 4)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "tqaOJ15GuijQmAje8PqB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:45Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:45Z&#39;, 0.2311267852783203, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 4)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2886928962256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886928962400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886928962544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886928962688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928962832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2886927974064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2886927974208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2886928957504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2886928957648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2886928957792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2886928957936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2886928958080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928958224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1760</em>,
      in <code class="function">submit_client_command_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>history.output = data[&#39;output&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.executed_time = data[&#39;executed_time&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.duration_seconds = data[&#39;duration_seconds&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.run_status = &#39;completed&#39; if data.get(&#39;success&#39;, True) else &#39;failed&#39;</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#39;message&#39;: &#39;Result submitted&#39;})</pre></div>
</div>

<li><div class="frame" id="frame-2886928958368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-2886928958512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-2886928958656">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886928958800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886928958944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-2886928959088">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886928959232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886928959376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-2886928959520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-2886928959664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-2886928959808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928959952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928960096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)
<span class="ws">                </span>^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928960240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928960384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">85</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>update = _collect_update_commands(</pre>
<pre class="line before"><span class="ws">            </span>uowtransaction, table, states_to_update</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_update_statements(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>update,</pre></div>
</div>

<li><div class="frame" id="frame-2886928960528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">912</em>,
      in <code class="function">_emit_update_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>check_rowcount = enable_check_rowcount and (</pre>
<pre class="line before"><span class="ws">                    </span>assert_multirow</pre>
<pre class="line before"><span class="ws">                    </span>or (assert_singlerow and len(multiparams) == 1)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">                </span>c = connection.execute(
<span class="ws">                </span>    </pre>
<pre class="line after"><span class="ws">                    </span>statement, multiparams, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">                </span>rows += c.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928960672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928960816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928960960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2886928961104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2886928961248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928961392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2886928961536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886928961680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886928961824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886928961968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928962112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:45Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:45Z&#39;, 0.2311267852783203, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 4)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:45Z&#39; for column &#39;executed_time&#39; at row 1&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1760, in submit_client_command_result
    db.session.commit()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 85, in save_obj
    _emit_update_statements(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:45Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:45Z&#39;, 0.2311267852783203, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 4)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, "Incorrect datetime value: '2025-06-03T11:19:45Z' for column 'executed_time' at row 1")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1760, in submit_client_command_result
    db.session.commit()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 85, in save_obj
    _emit_update_statements(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, "Incorrect datetime value: '2025-06-03T11:19:45Z' for column 'executed_time' at row 1")
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: ('2025-06-03T11:19:45Z', 0.2311267852783203, '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a-l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'completed', 4)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 14:19:47,949] INFO: Running command: dir (admin=True)
[2025-06-03 14:19:48,200] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:18 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2499527931213379, 'returncode': 0}
[2025-06-03 14:19:50,249] ERROR: Failed to send result for command 1: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:48Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:48Z&#39;, 0.2499527931213379, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 5)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "tqaOJ15GuijQmAje8PqB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:48Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:48Z&#39;, 0.2499527931213379, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 5)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2886928968304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886928968448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886928968592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886928968736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928968880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2886928963264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2886928963408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2886928963552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2886928963696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2886928963840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2886928963984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2886928964128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928964272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1760</em>,
      in <code class="function">submit_client_command_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>history.output = data[&#39;output&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.executed_time = data[&#39;executed_time&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.duration_seconds = data[&#39;duration_seconds&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.run_status = &#39;completed&#39; if data.get(&#39;success&#39;, True) else &#39;failed&#39;</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#39;message&#39;: &#39;Result submitted&#39;})</pre></div>
</div>

<li><div class="frame" id="frame-2886928964416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-2886928964560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-2886928964704">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886928964848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886928964992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-2886928965136">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886928965280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886928965424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-2886928965568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-2886928965712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-2886928965856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928966000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928966144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)
<span class="ws">                </span>^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928966288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928966432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">85</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>update = _collect_update_commands(</pre>
<pre class="line before"><span class="ws">            </span>uowtransaction, table, states_to_update</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_update_statements(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>update,</pre></div>
</div>

<li><div class="frame" id="frame-2886928966576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">912</em>,
      in <code class="function">_emit_update_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>check_rowcount = enable_check_rowcount and (</pre>
<pre class="line before"><span class="ws">                    </span>assert_multirow</pre>
<pre class="line before"><span class="ws">                    </span>or (assert_singlerow and len(multiparams) == 1)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">                </span>c = connection.execute(
<span class="ws">                </span>    </pre>
<pre class="line after"><span class="ws">                    </span>statement, multiparams, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">                </span>rows += c.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928966720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928966864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928967008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2886928967152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2886928967296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928967440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2886928967584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886928967728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886928967872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886928968016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928968160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:48Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:48Z&#39;, 0.2499527931213379, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 5)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:48Z&#39; for column &#39;executed_time&#39; at row 1&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1760, in submit_client_command_result
    db.session.commit()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 85, in save_obj
    _emit_update_statements(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:48Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:48Z&#39;, 0.2499527931213379, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 5)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, "Incorrect datetime value: '2025-06-03T11:19:48Z' for column 'executed_time' at row 1")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1760, in submit_client_command_result
    db.session.commit()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 85, in save_obj
    _emit_update_statements(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, "Incorrect datetime value: '2025-06-03T11:19:48Z' for column 'executed_time' at row 1")
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: ('2025-06-03T11:19:48Z', 0.2499527931213379, '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a-l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'completed', 5)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 14:19:50,250] INFO: Running command: dir (admin=True)
[2025-06-03 14:19:50,494] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:18 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.24298405647277832, 'returncode': 0}
[2025-06-03 14:19:52,548] ERROR: Failed to send result for command 1: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:50Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:50Z&#39;, 0.24298405647277832, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 6)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "tqaOJ15GuijQmAje8PqB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:50Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:50Z&#39;, 0.24298405647277832, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 6)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2886929072912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886929073056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886929073200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886929073344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886929073488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2886928969456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2886928969600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2886928969744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2886928969888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2886928970032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2886928970176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2886928970320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928970464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1760</em>,
      in <code class="function">submit_client_command_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>history.output = data[&#39;output&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.executed_time = data[&#39;executed_time&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.duration_seconds = data[&#39;duration_seconds&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.run_status = &#39;completed&#39; if data.get(&#39;success&#39;, True) else &#39;failed&#39;</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#39;message&#39;: &#39;Result submitted&#39;})</pre></div>
</div>

<li><div class="frame" id="frame-2886928970608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-2886928970752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-2886928970896">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886928971040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886928971184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-2886928971328">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2886928971472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2886928971616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-2886928971760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-2886928971904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-2886928972048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928972192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928972336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)
<span class="ws">                </span>^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928972480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928972624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">85</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>update = _collect_update_commands(</pre>
<pre class="line before"><span class="ws">            </span>uowtransaction, table, states_to_update</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_update_statements(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>update,</pre></div>
</div>

<li><div class="frame" id="frame-2886928972768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">912</em>,
      in <code class="function">_emit_update_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>check_rowcount = enable_check_rowcount and (</pre>
<pre class="line before"><span class="ws">                    </span>assert_multirow</pre>
<pre class="line before"><span class="ws">                    </span>or (assert_singlerow and len(multiparams) == 1)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">                </span>c = connection.execute(
<span class="ws">                </span>    </pre>
<pre class="line after"><span class="ws">                    </span>statement, multiparams, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">                </span>rows += c.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928972912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928973056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928973200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2886928973344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2886928973488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886928973632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2886929072192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2886929072336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2886929072480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2886929072624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2886929072768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:50Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:50Z&#39;, 0.24298405647277832, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 6)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:50Z&#39; for column &#39;executed_time&#39; at row 1&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1760, in submit_client_command_result
    db.session.commit()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 85, in save_obj
    _emit_update_statements(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:19:50Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:19:50Z&#39;, 0.24298405647277832, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 6)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, "Incorrect datetime value: '2025-06-03T11:19:50Z' for column 'executed_time' at row 1")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1760, in submit_client_command_result
    db.session.commit()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 85, in save_obj
    _emit_update_statements(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, "Incorrect datetime value: '2025-06-03T11:19:50Z' for column 'executed_time' at row 1")
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: ('2025-06-03T11:19:50Z', 0.24298405647277832, '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a-l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'completed', 6)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 14:20:54,047] DEBUG: Checking approval status for server 8
[2025-06-03 14:20:54,047] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:20:56,110] DEBUG: Response status code: 200
[2025-06-03 14:20:56,111] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:20:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:20:56,111] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:20:56,111] INFO: Server is approved and ready to process commands
[2025-06-03 14:20:56,112] INFO: Fetching commands...
[2025-06-03 14:20:56,112] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:20:56,112] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:20:58,143] DEBUG: Response status code: 200
[2025-06-03 14:20:58,143] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:20:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '536', 'Connection': 'close'}
[2025-06-03 14:20:58,143] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "3",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "4",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "7",
      "id": null
    }
  ]
}
[2025-06-03 14:20:58,144] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '3', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '4', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '7', 'id': None}]
[2025-06-03 14:21:00,170] INFO: Running command: dir (admin=True)
[2025-06-03 14:21:00,451] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:20 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2808401584625244, 'returncode': 0}
[2025-06-03 14:21:02,484] ERROR: Failed to send result for command None: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:21:00Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:21:00Z&#39;, 0.2808401584625244, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "XaTQuczklIUrNJz2ZMDp";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:21:00Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:21:00Z&#39;, 0.2808401584625244, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1965520255680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1965520255824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1965520255968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1965520256112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965520256256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1965518542384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1965518547136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1965518547280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1965518547424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1965518547568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1965518547712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1965518547856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">24</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line before"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()</pre>
<pre class="line before"><span class="ws">        </span>if not server:</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965519176896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1760</em>,
      in <code class="function">submit_client_command_result</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>history.output = data[&#39;output&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.executed_time = data[&#39;executed_time&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.duration_seconds = data[&#39;duration_seconds&#39;]</pre>
<pre class="line before"><span class="ws">    </span>history.run_status = &#39;completed&#39; if data.get(&#39;success&#39;, True) else &#39;failed&#39;</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#39;message&#39;: &#39;Result submitted&#39;})</pre></div>
</div>

<li><div class="frame" id="frame-1965519177040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1965519179344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1965519185680">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1965519185824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1965519186112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1965519186256">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1965519186400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)
<span class="ws">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1965519186544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1965519186688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1965519186832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1965519186976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965519188272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965519188416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)
<span class="ws">                </span>^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965519188560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965519188704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">85</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>update = _collect_update_commands(</pre>
<pre class="line before"><span class="ws">            </span>uowtransaction, table, states_to_update</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_update_statements(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>update,</pre></div>
</div>

<li><div class="frame" id="frame-1965519190720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">912</em>,
      in <code class="function">_emit_update_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>check_rowcount = enable_check_rowcount and (</pre>
<pre class="line before"><span class="ws">                    </span>assert_multirow</pre>
<pre class="line before"><span class="ws">                    </span>or (assert_singlerow and len(multiparams) == 1)</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">                </span>c = connection.execute(
<span class="ws">                </span>    </pre>
<pre class="line after"><span class="ws">                    </span>statement, multiparams, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">                </span>rows += c.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965519190864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965520246608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965520250640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1965520250784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1965520250928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965520251072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1965520251216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1965520251360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1965520254240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1965520254960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1965520255104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:21:00Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:21:00Z&#39;, 0.2808401584625244, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:21:00Z&#39; for column &#39;executed_time&#39; at row 1&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1760, in submit_client_command_result
    db.session.commit()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 85, in save_obj
    _emit_update_statements(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, &#34;Incorrect datetime value: &#39;2025-06-03T11:21:00Z&#39; for column &#39;executed_time&#39; at row 1&#34;)
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: (&#39;2025-06-03T11:21:00Z&#39;, 0.2808401584625244, &#39;\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n&#39;, &#39;completed&#39;, 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1292, "Incorrect datetime value: '2025-06-03T11:21:00Z' for column 'executed_time' at row 1")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 24, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1760, in submit_client_command_result
    db.session.commit()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 85, in save_obj
    _emit_update_statements(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 912, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1292, "Incorrect datetime value: '2025-06-03T11:21:00Z' for column 'executed_time' at row 1")
[SQL: UPDATE command_history SET executed_time=%s, duration_seconds=%s, output=%s, run_status=%s WHERE command_history.id = %s]
[parameters: ('2025-06-03T11:21:00Z', 0.2808401584625244, '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-mast ... (1159 characters truncated) ...                           \n-a-l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'completed', 3)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-03 14:21:02,484] INFO: Running command: dir (admin=True)
[2025-06-03 14:21:02,735] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:20 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.24996399879455566, 'returncode': 0}
[2025-06-03 14:21:32,567] DEBUG: Checking approval status for server 8
[2025-06-03 14:21:32,568] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:21:34,590] DEBUG: Response status code: 200
[2025-06-03 14:21:34,590] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:21:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:21:34,591] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:21:34,591] INFO: Server is approved and ready to process commands
[2025-06-03 14:21:34,591] INFO: Fetching commands...
[2025-06-03 14:21:34,592] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:21:34,592] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:21:36,606] DEBUG: Response status code: 200
[2025-06-03 14:21:36,606] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:21:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '536', 'Connection': 'close'}
[2025-06-03 14:21:36,607] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "3",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "4",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "5",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "6",
      "id": "1"
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "7",
      "id": null
    }
  ]
}
[2025-06-03 14:21:36,607] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '3', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '4', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '5', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '6', 'id': '1'}, {'as_admin': True, 'command': 'dir', 'history_id': '7', 'id': None}]
[2025-06-03 14:21:38,620] INFO: Running command: dir (admin=True)
[2025-06-03 14:21:38,888] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:20 PM          14651 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.2685389518737793, 'returncode': 0}
[2025-06-03 14:28:06,591] DEBUG: Checking approval status for server 8
[2025-06-03 14:28:06,591] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:28:08,667] DEBUG: Response status code: 200
[2025-06-03 14:28:08,667] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:28:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:28:08,668] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:28:08,668] INFO: Server is approved and ready to process commands
[2025-06-03 14:28:08,669] INFO: Fetching commands...
[2025-06-03 14:28:08,670] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:28:08,670] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:28:10,687] DEBUG: Response status code: 200
[2025-06-03 14:28:10,687] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:28:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '229', 'Connection': 'close'}
[2025-06-03 14:28:10,688] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "8",
      "id": null
    },
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "9",
      "id": null
    }
  ]
}
[2025-06-03 14:28:10,689] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '8', 'id': None}, {'as_admin': True, 'command': 'dir', 'history_id': '9', 'id': None}]
[2025-06-03 14:28:12,703] INFO: Running command: dir (admin=True)
[2025-06-03 14:28:12,977] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:25 PM          14650 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.27286219596862793, 'returncode': 0}
[2025-06-03 14:28:15,014] INFO: Result for command None sent successfully
[2025-06-03 14:28:15,014] INFO: Running command: dir (admin=True)
[2025-06-03 14:28:15,249] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM \n    ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                             \n----                 -------------         ------ ----                                                             \nda---l          6/3/2025   5:43 AM                nssm                                                             \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                             \n-a---l          6/3/2025   2:25 PM          14650 client.py                                                        \n-a---l          6/3/2025  10:45 AM            139 client_config.json                                               \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                          \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                       \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                    \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                         \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                             \n\n\n', 'error': '', 'duration': 0.23517227172851562, 'returncode': 0}
[2025-06-03 14:28:17,267] INFO: Result for command None sent successfully
[2025-06-03 14:28:47,267] DEBUG: Checking approval status for server 8
[2025-06-03 14:28:47,267] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:28:49,283] DEBUG: Response status code: 200
[2025-06-03 14:28:49,284] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:28:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:28:49,284] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:28:49,284] INFO: Server is approved and ready to process commands
[2025-06-03 14:28:49,285] INFO: Fetching commands...
[2025-06-03 14:28:49,287] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:28:49,289] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:28:51,319] DEBUG: Response status code: 200
[2025-06-03 14:28:51,319] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:28:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:28:51,322] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:28:51,323] INFO: Commands: []
[2025-06-03 14:29:23,350] DEBUG: Checking approval status for server 8
[2025-06-03 14:29:23,350] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:29:25,365] DEBUG: Response status code: 200
[2025-06-03 14:29:25,365] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:29:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:29:25,366] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:29:25,366] INFO: Server is approved and ready to process commands
[2025-06-03 14:29:25,366] INFO: Fetching commands...
[2025-06-03 14:29:25,367] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:29:25,367] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:29:27,385] DEBUG: Response status code: 200
[2025-06-03 14:29:27,386] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:29:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:29:27,386] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:29:27,387] INFO: Commands: []
[2025-06-03 14:29:59,404] DEBUG: Checking approval status for server 8
[2025-06-03 14:29:59,405] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:30:01,422] DEBUG: Response status code: 200
[2025-06-03 14:30:01,423] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:30:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:30:01,423] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:30:01,424] INFO: Server is approved and ready to process commands
[2025-06-03 14:30:01,424] INFO: Fetching commands...
[2025-06-03 14:30:01,425] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:30:01,425] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:30:03,441] DEBUG: Response status code: 200
[2025-06-03 14:30:03,442] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:30:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:30:03,442] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:30:03,443] INFO: Commands: []
[2025-06-03 14:30:35,465] DEBUG: Checking approval status for server 8
[2025-06-03 14:30:35,465] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:30:37,488] DEBUG: Response status code: 200
[2025-06-03 14:30:37,489] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:30:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:30:37,489] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:30:37,490] INFO: Server is approved and ready to process commands
[2025-06-03 14:30:37,490] INFO: Fetching commands...
[2025-06-03 14:30:37,490] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:30:37,490] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:30:39,521] DEBUG: Response status code: 200
[2025-06-03 14:30:39,522] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:30:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:30:39,522] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:30:39,523] INFO: Commands: []
[2025-06-03 14:31:11,566] DEBUG: Checking approval status for server 8
[2025-06-03 14:31:11,566] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:31:13,581] DEBUG: Response status code: 200
[2025-06-03 14:31:13,581] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:31:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:31:13,583] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:31:13,583] INFO: Server is approved and ready to process commands
[2025-06-03 14:31:13,583] INFO: Fetching commands...
[2025-06-03 14:31:13,584] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:31:13,584] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:31:15,606] DEBUG: Response status code: 200
[2025-06-03 14:31:15,606] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:31:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:31:15,607] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:31:15,607] INFO: Commands: []
[2025-06-03 14:31:47,628] DEBUG: Checking approval status for server 8
[2025-06-03 14:31:47,629] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:31:49,652] DEBUG: Response status code: 200
[2025-06-03 14:31:49,652] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:31:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:31:49,653] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:31:49,653] INFO: Server is approved and ready to process commands
[2025-06-03 14:31:49,653] INFO: Fetching commands...
[2025-06-03 14:31:49,654] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:31:49,654] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:31:51,667] DEBUG: Response status code: 200
[2025-06-03 14:31:51,667] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:31:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:31:51,667] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:31:51,668] INFO: Commands: []
[2025-06-03 14:32:23,678] DEBUG: Checking approval status for server 8
[2025-06-03 14:32:23,679] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:32:25,694] DEBUG: Response status code: 200
[2025-06-03 14:32:25,696] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:32:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:32:25,697] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:32:25,697] INFO: Server is approved and ready to process commands
[2025-06-03 14:32:25,697] INFO: Fetching commands...
[2025-06-03 14:32:25,698] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:32:25,698] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:32:27,711] DEBUG: Response status code: 200
[2025-06-03 14:32:27,712] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:32:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:32:27,712] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:32:27,713] INFO: Commands: []
[2025-06-03 14:32:59,729] DEBUG: Checking approval status for server 8
[2025-06-03 14:32:59,729] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:33:01,744] DEBUG: Response status code: 200
[2025-06-03 14:33:01,744] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:33:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:33:01,745] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:33:01,746] INFO: Server is approved and ready to process commands
[2025-06-03 14:33:01,746] INFO: Fetching commands...
[2025-06-03 14:33:01,747] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:33:01,747] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:33:03,760] DEBUG: Response status code: 200
[2025-06-03 14:33:03,761] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:33:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:33:03,762] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:33:03,762] INFO: Commands: []
[2025-06-03 14:33:35,782] DEBUG: Checking approval status for server 8
[2025-06-03 14:33:35,782] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:33:37,802] DEBUG: Response status code: 200
[2025-06-03 14:33:37,803] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:33:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:33:37,804] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:33:37,805] INFO: Server is approved and ready to process commands
[2025-06-03 14:33:37,806] INFO: Fetching commands...
[2025-06-03 14:33:37,807] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:33:37,807] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:33:39,822] DEBUG: Response status code: 200
[2025-06-03 14:33:39,822] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:33:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:33:39,823] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:33:39,823] INFO: Commands: []
[2025-06-03 14:34:11,842] DEBUG: Checking approval status for server 8
[2025-06-03 14:34:11,842] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:34:13,857] DEBUG: Response status code: 200
[2025-06-03 14:34:13,858] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:34:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:34:13,858] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:34:13,859] INFO: Server is approved and ready to process commands
[2025-06-03 14:34:13,859] INFO: Fetching commands...
[2025-06-03 14:34:13,860] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:34:13,860] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:34:15,873] DEBUG: Response status code: 200
[2025-06-03 14:34:15,873] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:34:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:34:15,874] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:34:15,874] INFO: Commands: []
[2025-06-03 14:34:47,893] DEBUG: Checking approval status for server 8
[2025-06-03 14:34:47,894] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:34:49,914] DEBUG: Response status code: 200
[2025-06-03 14:34:49,914] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:34:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:34:49,915] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:34:49,915] INFO: Server is approved and ready to process commands
[2025-06-03 14:34:49,915] INFO: Fetching commands...
[2025-06-03 14:34:49,915] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:34:49,916] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:34:51,935] DEBUG: Response status code: 200
[2025-06-03 14:34:51,935] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:34:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:34:51,935] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:34:51,937] INFO: Commands: []
[2025-06-03 14:35:23,956] DEBUG: Checking approval status for server 8
[2025-06-03 14:35:23,957] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:35:25,976] DEBUG: Response status code: 200
[2025-06-03 14:35:25,977] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:35:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:35:25,977] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:35:25,978] INFO: Server is approved and ready to process commands
[2025-06-03 14:35:25,978] INFO: Fetching commands...
[2025-06-03 14:35:25,979] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:35:25,979] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:35:27,998] DEBUG: Response status code: 200
[2025-06-03 14:35:27,998] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:35:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:35:27,999] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:35:27,999] INFO: Commands: []
[2025-06-03 14:36:00,016] DEBUG: Checking approval status for server 8
[2025-06-03 14:36:00,017] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:36:02,049] DEBUG: Response status code: 200
[2025-06-03 14:36:02,050] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:36:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:36:02,052] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:36:02,053] INFO: Server is approved and ready to process commands
[2025-06-03 14:36:02,054] INFO: Fetching commands...
[2025-06-03 14:36:02,055] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:36:02,056] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:36:04,078] DEBUG: Response status code: 200
[2025-06-03 14:36:04,079] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:36:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:36:04,079] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:36:04,079] INFO: Commands: []
[2025-06-03 14:36:36,103] DEBUG: Checking approval status for server 8
[2025-06-03 14:36:36,104] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:36:38,118] DEBUG: Response status code: 200
[2025-06-03 14:36:38,118] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:36:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:36:38,119] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:36:38,119] INFO: Server is approved and ready to process commands
[2025-06-03 14:36:38,120] INFO: Fetching commands...
[2025-06-03 14:36:38,120] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:36:38,121] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:36:40,141] DEBUG: Response status code: 200
[2025-06-03 14:36:40,141] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:36:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:36:40,143] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:36:40,143] INFO: Commands: []
[2025-06-03 14:37:12,152] DEBUG: Checking approval status for server 8
[2025-06-03 14:37:12,154] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:37:14,166] DEBUG: Response status code: 200
[2025-06-03 14:37:14,166] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:37:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:37:14,167] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:37:14,167] INFO: Server is approved and ready to process commands
[2025-06-03 14:37:14,167] INFO: Fetching commands...
[2025-06-03 14:37:14,168] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:37:14,168] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:37:16,200] DEBUG: Response status code: 200
[2025-06-03 14:37:16,201] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:37:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:37:16,201] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:37:16,203] INFO: Commands: []
[2025-06-03 14:37:48,220] DEBUG: Checking approval status for server 8
[2025-06-03 14:37:48,220] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:37:50,237] DEBUG: Response status code: 200
[2025-06-03 14:37:50,237] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:37:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:37:50,238] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:37:50,238] INFO: Server is approved and ready to process commands
[2025-06-03 14:37:50,239] INFO: Fetching commands...
[2025-06-03 14:37:50,239] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:37:50,239] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:37:52,268] DEBUG: Response status code: 200
[2025-06-03 14:37:52,269] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:37:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:37:52,271] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:37:52,272] INFO: Commands: []
[2025-06-03 14:38:24,300] DEBUG: Checking approval status for server 8
[2025-06-03 14:38:24,301] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:38:26,324] DEBUG: Response status code: 200
[2025-06-03 14:38:26,325] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:38:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:38:26,326] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:38:26,327] INFO: Server is approved and ready to process commands
[2025-06-03 14:38:26,327] INFO: Fetching commands...
[2025-06-03 14:38:26,328] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:38:26,328] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:38:28,349] DEBUG: Response status code: 200
[2025-06-03 14:38:28,349] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:38:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:38:28,349] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:38:28,350] INFO: Commands: []
[2025-06-03 14:39:00,369] DEBUG: Checking approval status for server 8
[2025-06-03 14:39:00,370] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:39:02,387] DEBUG: Response status code: 200
[2025-06-03 14:39:02,388] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:39:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:39:02,388] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:39:02,388] INFO: Server is approved and ready to process commands
[2025-06-03 14:39:02,389] INFO: Fetching commands...
[2025-06-03 14:39:02,389] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:39:02,390] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:39:04,409] DEBUG: Response status code: 200
[2025-06-03 14:39:04,409] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:39:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:39:04,409] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:39:04,410] INFO: Commands: []
[2025-06-03 14:39:36,429] DEBUG: Checking approval status for server 8
[2025-06-03 14:39:36,429] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:39:38,445] DEBUG: Response status code: 200
[2025-06-03 14:39:38,445] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:39:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:39:38,445] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:39:38,446] INFO: Server is approved and ready to process commands
[2025-06-03 14:39:38,446] INFO: Fetching commands...
[2025-06-03 14:39:38,446] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:39:38,446] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:39:40,466] DEBUG: Response status code: 200
[2025-06-03 14:39:40,467] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:39:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:39:40,467] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:39:40,467] INFO: Commands: []
[2025-06-03 14:40:12,486] DEBUG: Checking approval status for server 8
[2025-06-03 14:40:12,486] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:40:14,505] DEBUG: Response status code: 200
[2025-06-03 14:40:14,505] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:40:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:40:14,506] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:40:14,507] INFO: Server is approved and ready to process commands
[2025-06-03 14:40:14,507] INFO: Fetching commands...
[2025-06-03 14:40:14,507] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:40:14,507] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:40:16,547] DEBUG: Response status code: 200
[2025-06-03 14:40:16,548] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:40:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:40:16,548] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:40:16,549] INFO: Commands: []
[2025-06-03 14:40:48,577] DEBUG: Checking approval status for server 8
[2025-06-03 14:40:48,578] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:40:50,594] DEBUG: Response status code: 200
[2025-06-03 14:40:50,594] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:40:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:40:50,595] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:40:50,595] INFO: Server is approved and ready to process commands
[2025-06-03 14:40:50,595] INFO: Fetching commands...
[2025-06-03 14:40:50,596] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:40:50,596] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:40:52,627] DEBUG: Response status code: 200
[2025-06-03 14:40:52,628] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:40:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:40:52,629] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:40:52,630] INFO: Commands: []
[2025-06-03 14:41:24,645] DEBUG: Checking approval status for server 8
[2025-06-03 14:41:24,645] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:41:26,662] DEBUG: Response status code: 200
[2025-06-03 14:41:26,663] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:41:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:41:26,663] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:41:26,663] INFO: Server is approved and ready to process commands
[2025-06-03 14:41:26,663] INFO: Fetching commands...
[2025-06-03 14:41:26,664] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:41:26,664] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:41:28,678] DEBUG: Response status code: 200
[2025-06-03 14:41:28,678] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:41:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:41:28,678] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:41:28,679] INFO: Commands: []
[2025-06-03 14:42:00,704] DEBUG: Checking approval status for server 8
[2025-06-03 14:42:00,704] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:42:02,719] DEBUG: Response status code: 200
[2025-06-03 14:42:02,719] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:42:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:42:02,719] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:42:02,720] INFO: Server is approved and ready to process commands
[2025-06-03 14:42:02,721] INFO: Fetching commands...
[2025-06-03 14:42:02,721] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:42:02,721] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:42:04,739] DEBUG: Response status code: 200
[2025-06-03 14:42:04,739] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:42:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:42:04,742] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:42:04,743] INFO: Commands: []
[2025-06-03 14:42:36,758] DEBUG: Checking approval status for server 8
[2025-06-03 14:42:36,759] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:42:38,776] DEBUG: Response status code: 200
[2025-06-03 14:42:38,776] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:42:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:42:38,777] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:42:38,777] INFO: Server is approved and ready to process commands
[2025-06-03 14:42:38,778] INFO: Fetching commands...
[2025-06-03 14:42:38,778] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:42:38,779] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:42:40,806] DEBUG: Response status code: 200
[2025-06-03 14:42:40,806] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:42:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:42:40,807] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:42:40,808] INFO: Commands: []
[2025-06-03 14:43:12,825] DEBUG: Checking approval status for server 8
[2025-06-03 14:43:12,825] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:43:14,845] DEBUG: Response status code: 200
[2025-06-03 14:43:14,845] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:43:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:43:14,846] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:43:14,846] INFO: Server is approved and ready to process commands
[2025-06-03 14:43:14,847] INFO: Fetching commands...
[2025-06-03 14:43:14,847] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:43:14,848] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:43:16,877] DEBUG: Response status code: 200
[2025-06-03 14:43:16,877] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:43:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:43:16,878] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:43:16,878] INFO: Commands: []
[2025-06-03 14:43:48,908] DEBUG: Checking approval status for server 8
[2025-06-03 14:43:48,909] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:43:50,934] DEBUG: Response status code: 200
[2025-06-03 14:43:50,935] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:43:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:43:50,937] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:43:50,937] INFO: Server is approved and ready to process commands
[2025-06-03 14:43:50,938] INFO: Fetching commands...
[2025-06-03 14:43:50,939] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:43:50,940] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:43:52,969] DEBUG: Response status code: 200
[2025-06-03 14:43:52,971] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:43:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:43:52,971] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:43:52,973] INFO: Commands: []
[2025-06-03 14:44:24,994] DEBUG: Checking approval status for server 8
[2025-06-03 14:44:24,995] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:44:27,014] DEBUG: Response status code: 200
[2025-06-03 14:44:27,015] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:44:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:44:27,016] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:44:27,016] INFO: Server is approved and ready to process commands
[2025-06-03 14:44:27,016] INFO: Fetching commands...
[2025-06-03 14:44:27,017] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:44:27,017] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:44:29,032] DEBUG: Response status code: 200
[2025-06-03 14:44:29,032] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:44:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:44:29,033] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:44:29,033] INFO: Commands: []
[2025-06-03 14:45:01,058] DEBUG: Checking approval status for server 8
[2025-06-03 14:45:01,059] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:45:03,074] DEBUG: Response status code: 200
[2025-06-03 14:45:03,075] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:45:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 14:45:03,076] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 14:45:03,077] INFO: Server is approved and ready to process commands
[2025-06-03 14:45:03,078] INFO: Fetching commands...
[2025-06-03 14:45:03,079] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 14:45:03,081] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 14:45:05,098] DEBUG: Response status code: 200
[2025-06-03 14:45:05,098] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 11:45:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 14:45:05,099] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 14:45:05,100] INFO: Commands: []
[2025-06-03 15:32:42,409] DEBUG: Checking approval status for server 8
[2025-06-03 15:32:42,409] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 15:32:44,476] DEBUG: Response status code: 200
[2025-06-03 15:32:44,476] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 12:32:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 15:32:44,477] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 15:32:44,478] INFO: Server is approved and ready to process commands
[2025-06-03 15:32:44,478] INFO: Fetching commands...
[2025-06-03 15:32:44,478] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 15:32:44,479] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 15:32:46,518] DEBUG: Response status code: 200
[2025-06-03 15:32:46,518] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 12:32:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 15:32:46,518] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 15:32:46,519] INFO: Commands: []
[2025-06-03 15:33:18,565] DEBUG: Checking approval status for server 8
[2025-06-03 15:33:18,566] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 15:33:20,619] DEBUG: Response status code: 500
[2025-06-03 15:33:20,619] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 12:33:20 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '19807', 'Connection': 'close'}
[2025-06-03 15:33:20,620] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "miCAhOGf6IdscnihfOyG";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>ValueError</h1>
<div class="detail">
  <p class="errormsg">ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2190681413600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2190681415040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2190681415184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2190681415328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">245</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def locate_app(</pre>
<pre class="line before"><span class="ws">    </span>module_name: str, app_name: str | None, raise_if_not_found: bool = True</pre>
<pre class="line before"><span class="ws"></span>) -&gt; Flask | None:</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>__import__(module_name)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except ImportError:</pre>
<pre class="line after"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line after"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line after"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(</pre></div>
</div>

<li><div class="frame" id="frame-2190681415472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">&lt;module&gt;</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>exit(&#39;Error: Invalid &lt;config_mode&gt;. Expected values [Debug, Production] &#39;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>app = create_app(app_config)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>from apps.authentication import init_app</pre>
<pre class="line current"><span class="ws"></span>init_app(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Create tables &amp; Fallback to SQLite</pre>
<pre class="line after"><span class="ws"></span>with app.app_context():</pre>
<pre class="line after"><span class="ws">    </span>try:</pre>
<pre class="line after"><span class="ws">        </span>db.create_all()</pre></div>
</div>

<li><div class="frame" id="frame-2190681415616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\authentication\__init__.py"</cite>,
      line <em class="line">16</em>,
      in <code class="function">init_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>__name__,</pre>
<pre class="line before"><span class="ws">    </span>url_prefix=&#39;&#39;</pre>
<pre class="line before"><span class="ws"></span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def init_app(app):</pre>
<pre class="line current"><span class="ws">    </span>app.register_blueprint(blueprint)  # Register the main authentication blueprint
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>register_routes(app)  # Register additional routes (permissions and users)</pre></div>
</div>

<li><div class="frame" id="frame-2190681415760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\scaffold.py"</cite>,
      line <em class="line">47</em>,
      in <code class="function">wrapper_func</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span>def setupmethod(f: F) -&gt; F:</pre>
<pre class="line before"><span class="ws">    </span>f_name = f.__name__</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>self._check_setup_finished(f_name)</pre>
<pre class="line current"><span class="ws">        </span>return f(self, *args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return t.cast(F, update_wrapper(wrapper_func, f))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class Scaffold:</pre></div>
</div>

<li><div class="frame" id="frame-2190681415904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\app.py"</cite>,
      line <em class="line">595</em>,
      in <code class="function">register_blueprint</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>blueprint to be registered multiple times with unique names</pre>
<pre class="line before"><span class="ws">            </span>for ``url_for``.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>.. versionadded:: 0.7</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>blueprint.register(self, options)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iter_blueprints(self) -&gt; t.ValuesView[Blueprint]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Iterates over all blueprints by the order they were registered.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>.. versionadded:: 0.11</pre></div>
</div>

<li><div class="frame" id="frame-2190681416048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\blueprints.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">register</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if name in app.blueprints:</pre>
<pre class="line before"><span class="ws">            </span>bp_desc = &#34;this&#34; if app.blueprints[name] is self else &#34;a different&#34;</pre>
<pre class="line before"><span class="ws">            </span>existing_at = f&#34; &#39;{name}&#39;&#34; if self_name != name else &#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>raise ValueError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The name &#39;{self_name}&#39; is already registered for&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; {bp_desc} blueprint{existing_at}. Use &#39;name=&#39; to&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; provide a unique name.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 31, in &lt;module&gt;
    init_app(app)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\authentication\__init__.py&#34;, line 16, in init_app
    app.register_blueprint(blueprint)  # Register the main authentication blueprint
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\scaffold.py&#34;, line 47, in wrapper_func
    return f(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\app.py&#34;, line 595, in register_blueprint
    blueprint.register(self, options)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\blueprints.py&#34;, line 310, in register
    raise ValueError(
ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 31, in <module>
    init_app(app)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\authentication\__init__.py", line 16, in init_app
    app.register_blueprint(blueprint)  # Register the main authentication blueprint
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\scaffold.py", line 47, in wrapper_func
    return f(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\app.py", line 595, in register_blueprint
    blueprint.register(self, options)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\blueprints.py", line 310, in register
    raise ValueError(
ValueError: The name 'authentication_blueprint' is already registered for this blueprint. Use 'name=' to provide a unique name.


-->

[2025-06-03 15:33:20,621] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "miCAhOGf6IdscnihfOyG";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>ValueError</h1>
<div class="detail">
  <p class="errormsg">ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2190681413600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2190681415040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2190681415184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2190681415328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">245</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def locate_app(</pre>
<pre class="line before"><span class="ws">    </span>module_name: str, app_name: str | None, raise_if_not_found: bool = True</pre>
<pre class="line before"><span class="ws"></span>) -&gt; Flask | None:</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>__import__(module_name)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except ImportError:</pre>
<pre class="line after"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line after"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line after"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(</pre></div>
</div>

<li><div class="frame" id="frame-2190681415472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">&lt;module&gt;</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>exit(&#39;Error: Invalid &lt;config_mode&gt;. Expected values [Debug, Production] &#39;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>app = create_app(app_config)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>from apps.authentication import init_app</pre>
<pre class="line current"><span class="ws"></span>init_app(app)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Create tables &amp; Fallback to SQLite</pre>
<pre class="line after"><span class="ws"></span>with app.app_context():</pre>
<pre class="line after"><span class="ws">    </span>try:</pre>
<pre class="line after"><span class="ws">        </span>db.create_all()</pre></div>
</div>

<li><div class="frame" id="frame-2190681415616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\authentication\__init__.py"</cite>,
      line <em class="line">16</em>,
      in <code class="function">init_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>__name__,</pre>
<pre class="line before"><span class="ws">    </span>url_prefix=&#39;&#39;</pre>
<pre class="line before"><span class="ws"></span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def init_app(app):</pre>
<pre class="line current"><span class="ws">    </span>app.register_blueprint(blueprint)  # Register the main authentication blueprint
<span class="ws">    </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>register_routes(app)  # Register additional routes (permissions and users)</pre></div>
</div>

<li><div class="frame" id="frame-2190681415760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\scaffold.py"</cite>,
      line <em class="line">47</em>,
      in <code class="function">wrapper_func</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span>def setupmethod(f: F) -&gt; F:</pre>
<pre class="line before"><span class="ws">    </span>f_name = f.__name__</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>self._check_setup_finished(f_name)</pre>
<pre class="line current"><span class="ws">        </span>return f(self, *args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return t.cast(F, update_wrapper(wrapper_func, f))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class Scaffold:</pre></div>
</div>

<li><div class="frame" id="frame-2190681415904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\app.py"</cite>,
      line <em class="line">595</em>,
      in <code class="function">register_blueprint</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>blueprint to be registered multiple times with unique names</pre>
<pre class="line before"><span class="ws">            </span>for ``url_for``.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>.. versionadded:: 0.7</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>blueprint.register(self, options)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iter_blueprints(self) -&gt; t.ValuesView[Blueprint]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Iterates over all blueprints by the order they were registered.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>.. versionadded:: 0.11</pre></div>
</div>

<li><div class="frame" id="frame-2190681416048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\blueprints.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">register</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if name in app.blueprints:</pre>
<pre class="line before"><span class="ws">            </span>bp_desc = &#34;this&#34; if app.blueprints[name] is self else &#34;a different&#34;</pre>
<pre class="line before"><span class="ws">            </span>existing_at = f&#34; &#39;{name}&#39;&#34; if self_name != name else &#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>raise ValueError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The name &#39;{self_name}&#39; is already registered for&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; {bp_desc} blueprint{existing_at}. Use &#39;name=&#39; to&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; provide a unique name.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 31, in &lt;module&gt;
    init_app(app)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\authentication\__init__.py&#34;, line 16, in init_app
    app.register_blueprint(blueprint)  # Register the main authentication blueprint
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\scaffold.py&#34;, line 47, in wrapper_func
    return f(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\app.py&#34;, line 595, in register_blueprint
    blueprint.register(self, options)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\blueprints.py&#34;, line 310, in register
    raise ValueError(
ValueError: The name &#39;authentication_blueprint&#39; is already registered for this blueprint. Use &#39;name=&#39; to provide a unique name.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 31, in <module>
    init_app(app)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\authentication\__init__.py", line 16, in init_app
    app.register_blueprint(blueprint)  # Register the main authentication blueprint
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\scaffold.py", line 47, in wrapper_func
    return f(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\app.py", line 595, in register_blueprint
    blueprint.register(self, options)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\sansio\blueprints.py", line 310, in register
    raise ValueError(
ValueError: The name 'authentication_blueprint' is already registered for this blueprint. Use 'name=' to provide a unique name.


-->

[2025-06-03 15:33:20,622] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 16:34:38,889] DEBUG: Checking approval status for server 8
[2025-06-03 16:34:38,890] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:34:40,972] DEBUG: Response status code: 200
[2025-06-03 16:34:40,974] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:34:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:34:40,976] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:34:40,979] INFO: Server is approved and ready to process commands
[2025-06-03 16:34:40,981] INFO: Fetching commands...
[2025-06-03 16:34:40,982] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:34:40,984] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:34:43,040] DEBUG: Response status code: 200
[2025-06-03 16:34:43,041] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:34:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:34:43,043] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:34:43,046] INFO: Commands: []
[2025-06-03 16:35:15,077] DEBUG: Checking approval status for server 8
[2025-06-03 16:35:15,079] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:35:17,114] DEBUG: Response status code: 200
[2025-06-03 16:35:17,114] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:35:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:35:17,115] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:35:17,115] INFO: Server is approved and ready to process commands
[2025-06-03 16:35:17,116] INFO: Fetching commands...
[2025-06-03 16:35:17,116] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:35:17,117] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:35:19,151] DEBUG: Response status code: 200
[2025-06-03 16:35:19,152] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:35:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:35:19,153] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:35:19,153] INFO: Commands: []
[2025-06-03 16:35:51,213] DEBUG: Checking approval status for server 8
[2025-06-03 16:35:51,213] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:35:53,258] DEBUG: Response status code: 200
[2025-06-03 16:35:53,259] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:35:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:35:53,261] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:35:53,261] INFO: Server is approved and ready to process commands
[2025-06-03 16:35:53,262] INFO: Fetching commands...
[2025-06-03 16:35:53,262] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:35:53,262] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:35:55,306] DEBUG: Response status code: 200
[2025-06-03 16:35:55,307] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:35:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:35:55,307] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:35:55,308] INFO: Commands: []
[2025-06-03 16:36:27,333] DEBUG: Checking approval status for server 8
[2025-06-03 16:36:27,333] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:36:29,365] DEBUG: Response status code: 200
[2025-06-03 16:36:29,366] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:36:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:36:29,366] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:36:29,366] INFO: Server is approved and ready to process commands
[2025-06-03 16:36:29,367] INFO: Fetching commands...
[2025-06-03 16:36:29,367] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:36:29,367] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:36:31,399] DEBUG: Response status code: 200
[2025-06-03 16:36:31,399] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:36:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:36:31,400] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:36:31,400] INFO: Commands: []
[2025-06-03 16:37:03,428] DEBUG: Checking approval status for server 8
[2025-06-03 16:37:03,429] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:37:05,447] DEBUG: Response status code: 200
[2025-06-03 16:37:05,448] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:37:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:37:05,449] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:37:05,449] INFO: Server is approved and ready to process commands
[2025-06-03 16:37:05,450] INFO: Fetching commands...
[2025-06-03 16:37:05,451] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:37:05,451] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:37:07,477] DEBUG: Response status code: 200
[2025-06-03 16:37:07,478] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:37:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:37:07,478] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:37:07,479] INFO: Commands: []
[2025-06-03 16:37:39,534] DEBUG: Checking approval status for server 8
[2025-06-03 16:37:39,536] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:37:41,584] DEBUG: Response status code: 200
[2025-06-03 16:37:41,584] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:37:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:37:41,585] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:37:41,586] INFO: Server is approved and ready to process commands
[2025-06-03 16:37:41,586] INFO: Fetching commands...
[2025-06-03 16:37:41,587] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:37:41,587] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:37:43,623] DEBUG: Response status code: 200
[2025-06-03 16:37:43,623] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:37:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:37:43,623] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:37:43,624] INFO: Commands: []
[2025-06-03 16:38:15,650] DEBUG: Checking approval status for server 8
[2025-06-03 16:38:15,650] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:38:17,714] DEBUG: Response status code: 200
[2025-06-03 16:38:17,715] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:38:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:38:17,716] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:38:17,716] INFO: Server is approved and ready to process commands
[2025-06-03 16:38:17,717] INFO: Fetching commands...
[2025-06-03 16:38:17,717] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:38:17,718] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:38:19,752] DEBUG: Response status code: 200
[2025-06-03 16:38:19,752] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:38:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:38:19,753] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:38:19,753] INFO: Commands: []
[2025-06-03 16:38:51,800] DEBUG: Checking approval status for server 8
[2025-06-03 16:38:51,800] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:38:53,908] DEBUG: Response status code: 200
[2025-06-03 16:38:53,909] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:38:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 16:38:53,910] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 16:38:53,910] INFO: Server is approved and ready to process commands
[2025-06-03 16:38:53,910] INFO: Fetching commands...
[2025-06-03 16:38:53,911] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 16:38:53,911] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:38:55,939] DEBUG: Response status code: 200
[2025-06-03 16:38:55,939] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:38:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 16:38:55,940] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 16:38:55,940] INFO: Commands: []
[2025-06-03 16:39:27,976] DEBUG: Checking approval status for server 8
[2025-06-03 16:39:27,976] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 16:39:30,000] DEBUG: Response status code: 500
[2025-06-03 16:39:30,001] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 13:39:30 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '15799', 'Connection': 'close'}
[2025-06-03 16:39:30,002] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "UP7FfkccmMjTOm2BUfmR";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1840291996592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-1840291998032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-1840291998176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1840291998320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 20, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 3, in <module>
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named 'apps.authentication.decorators'



-->

[2025-06-03 16:39:30,002] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "UP7FfkccmMjTOm2BUfmR";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1840291996592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-1840291998032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-1840291998176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1840291998320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 3, in &lt;module&gt;
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named &#39;apps.authentication.decorators&#39;

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 20, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 3, in <module>
    from apps.authentication.decorators import login_required
ModuleNotFoundError: No module named 'apps.authentication.decorators'



-->

[2025-06-03 16:39:30,003] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 17:32:45,082] DEBUG: Checking approval status for server 8
[2025-06-03 17:32:45,082] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:32:47,140] DEBUG: Response status code: 200
[2025-06-03 17:32:47,141] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:32:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:32:47,142] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:32:47,143] INFO: Server is approved and ready to process commands
[2025-06-03 17:32:47,143] INFO: Fetching commands...
[2025-06-03 17:32:47,144] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:32:47,144] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:32:49,189] DEBUG: Response status code: 200
[2025-06-03 17:32:49,190] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:32:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:32:49,190] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:32:49,191] INFO: Commands: []
[2025-06-03 17:33:21,217] DEBUG: Checking approval status for server 8
[2025-06-03 17:33:21,217] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:33:23,253] DEBUG: Response status code: 200
[2025-06-03 17:33:23,254] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:33:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:33:23,254] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:33:23,254] INFO: Server is approved and ready to process commands
[2025-06-03 17:33:23,255] INFO: Fetching commands...
[2025-06-03 17:33:23,255] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:33:23,256] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:33:25,312] DEBUG: Response status code: 200
[2025-06-03 17:33:25,312] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:33:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:33:25,313] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:33:25,314] INFO: Commands: []
[2025-06-03 17:33:57,355] DEBUG: Checking approval status for server 8
[2025-06-03 17:33:57,356] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:33:59,402] DEBUG: Response status code: 200
[2025-06-03 17:33:59,403] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:33:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:33:59,403] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:33:59,404] INFO: Server is approved and ready to process commands
[2025-06-03 17:33:59,404] INFO: Fetching commands...
[2025-06-03 17:33:59,405] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:33:59,405] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:34:01,432] DEBUG: Response status code: 200
[2025-06-03 17:34:01,432] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:34:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:34:01,433] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:34:01,433] INFO: Commands: []
[2025-06-03 17:34:33,457] DEBUG: Checking approval status for server 8
[2025-06-03 17:34:33,458] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:34:35,474] DEBUG: Response status code: 200
[2025-06-03 17:34:35,474] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:34:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:34:35,474] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:34:35,474] INFO: Server is approved and ready to process commands
[2025-06-03 17:34:35,474] INFO: Fetching commands...
[2025-06-03 17:34:35,474] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:34:35,476] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:34:37,517] DEBUG: Response status code: 200
[2025-06-03 17:34:37,518] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:34:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:34:37,518] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:34:37,519] INFO: Commands: []
[2025-06-03 17:35:09,576] DEBUG: Checking approval status for server 8
[2025-06-03 17:35:09,576] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:35:11,607] DEBUG: Response status code: 200
[2025-06-03 17:35:11,608] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:35:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:35:11,609] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:35:11,609] INFO: Server is approved and ready to process commands
[2025-06-03 17:35:11,609] INFO: Fetching commands...
[2025-06-03 17:35:11,609] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:35:11,609] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:35:13,656] DEBUG: Response status code: 200
[2025-06-03 17:35:13,656] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:35:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:35:13,656] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:35:13,656] INFO: Commands: []
[2025-06-03 17:35:45,702] DEBUG: Checking approval status for server 8
[2025-06-03 17:35:45,702] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:35:47,730] DEBUG: Response status code: 200
[2025-06-03 17:35:47,731] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:35:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:35:47,731] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:35:47,732] INFO: Server is approved and ready to process commands
[2025-06-03 17:35:47,732] INFO: Fetching commands...
[2025-06-03 17:35:47,733] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:35:47,734] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:35:49,790] DEBUG: Response status code: 200
[2025-06-03 17:35:49,791] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:35:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:35:49,792] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:35:49,792] INFO: Commands: []
[2025-06-03 17:36:21,827] DEBUG: Checking approval status for server 8
[2025-06-03 17:36:21,827] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:36:23,847] DEBUG: Response status code: 200
[2025-06-03 17:36:23,847] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:36:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:36:23,847] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:36:23,848] INFO: Server is approved and ready to process commands
[2025-06-03 17:36:23,848] INFO: Fetching commands...
[2025-06-03 17:36:23,848] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:36:23,848] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:36:25,898] DEBUG: Response status code: 200
[2025-06-03 17:36:25,898] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:36:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:36:25,898] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:36:25,898] INFO: Commands: []
[2025-06-03 17:36:57,933] DEBUG: Checking approval status for server 8
[2025-06-03 17:36:57,933] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:36:59,989] DEBUG: Response status code: 200
[2025-06-03 17:36:59,990] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:36:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:36:59,990] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:36:59,990] INFO: Server is approved and ready to process commands
[2025-06-03 17:36:59,990] INFO: Fetching commands...
[2025-06-03 17:36:59,991] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:36:59,991] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:37:02,039] DEBUG: Response status code: 200
[2025-06-03 17:37:02,040] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:37:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:37:02,040] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:37:02,040] INFO: Commands: []
[2025-06-03 17:37:34,082] DEBUG: Checking approval status for server 8
[2025-06-03 17:37:34,082] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:37:36,144] DEBUG: Response status code: 200
[2025-06-03 17:37:36,144] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:37:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:37:36,145] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:37:36,146] INFO: Server is approved and ready to process commands
[2025-06-03 17:37:36,146] INFO: Fetching commands...
[2025-06-03 17:37:36,146] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:37:36,147] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:37:38,193] DEBUG: Response status code: 200
[2025-06-03 17:37:38,194] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:37:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:37:38,194] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:37:38,195] INFO: Commands: []
[2025-06-03 17:38:10,253] DEBUG: Checking approval status for server 8
[2025-06-03 17:38:10,253] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:38:12,295] DEBUG: Response status code: 200
[2025-06-03 17:38:12,295] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:38:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:38:12,295] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:38:12,297] INFO: Server is approved and ready to process commands
[2025-06-03 17:38:12,297] INFO: Fetching commands...
[2025-06-03 17:38:12,297] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:38:12,298] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:38:14,328] DEBUG: Response status code: 200
[2025-06-03 17:38:14,329] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:38:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:38:14,330] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:38:14,330] INFO: Commands: []
[2025-06-03 17:38:46,381] DEBUG: Checking approval status for server 8
[2025-06-03 17:38:46,381] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:38:48,406] DEBUG: Response status code: 200
[2025-06-03 17:38:48,406] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:38:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:38:48,407] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:38:48,407] INFO: Server is approved and ready to process commands
[2025-06-03 17:38:48,407] INFO: Fetching commands...
[2025-06-03 17:38:48,408] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:38:48,408] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:38:50,467] DEBUG: Response status code: 200
[2025-06-03 17:38:50,467] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:38:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:38:50,468] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:38:50,468] INFO: Commands: []
[2025-06-03 17:39:22,496] DEBUG: Checking approval status for server 8
[2025-06-03 17:39:22,496] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:39:24,535] DEBUG: Response status code: 200
[2025-06-03 17:39:24,536] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:39:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:39:24,537] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:39:24,537] INFO: Server is approved and ready to process commands
[2025-06-03 17:39:24,538] INFO: Fetching commands...
[2025-06-03 17:39:24,538] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:39:24,539] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:39:26,573] DEBUG: Response status code: 200
[2025-06-03 17:39:26,573] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:39:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:39:26,573] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:39:26,574] INFO: Commands: []
[2025-06-03 17:39:58,608] DEBUG: Checking approval status for server 8
[2025-06-03 17:39:58,608] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:40:00,643] DEBUG: Response status code: 200
[2025-06-03 17:40:00,643] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:40:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:40:00,644] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:40:00,644] INFO: Server is approved and ready to process commands
[2025-06-03 17:40:00,645] INFO: Fetching commands...
[2025-06-03 17:40:00,645] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:40:00,645] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:40:02,668] DEBUG: Response status code: 200
[2025-06-03 17:40:02,668] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:40:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:40:02,669] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:40:02,670] INFO: Commands: []
[2025-06-03 17:40:34,723] DEBUG: Checking approval status for server 8
[2025-06-03 17:40:34,723] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:40:36,746] DEBUG: Response status code: 200
[2025-06-03 17:40:36,746] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:40:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:40:36,747] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:40:36,748] INFO: Server is approved and ready to process commands
[2025-06-03 17:40:36,748] INFO: Fetching commands...
[2025-06-03 17:40:36,749] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:40:36,749] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:40:38,781] DEBUG: Response status code: 200
[2025-06-03 17:40:38,781] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:40:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:40:38,782] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:40:38,782] INFO: Commands: []
[2025-06-03 17:41:10,819] DEBUG: Checking approval status for server 8
[2025-06-03 17:41:10,820] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:41:12,867] DEBUG: Response status code: 200
[2025-06-03 17:41:12,867] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:41:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:41:12,868] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:41:12,869] INFO: Server is approved and ready to process commands
[2025-06-03 17:41:12,869] INFO: Fetching commands...
[2025-06-03 17:41:12,869] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:41:12,870] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:41:14,909] DEBUG: Response status code: 200
[2025-06-03 17:41:14,909] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:41:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:41:14,910] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:41:14,910] INFO: Commands: []
[2025-06-03 17:41:46,941] DEBUG: Checking approval status for server 8
[2025-06-03 17:41:46,942] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:41:49,009] DEBUG: Response status code: 200
[2025-06-03 17:41:49,009] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:41:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:41:49,009] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:41:49,009] INFO: Server is approved and ready to process commands
[2025-06-03 17:41:49,010] INFO: Fetching commands...
[2025-06-03 17:41:49,010] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:41:49,011] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:41:51,061] DEBUG: Response status code: 200
[2025-06-03 17:41:51,061] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:41:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:41:51,061] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:41:51,062] INFO: Commands: []
[2025-06-03 17:42:23,121] DEBUG: Checking approval status for server 8
[2025-06-03 17:42:23,121] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:42:25,262] DEBUG: Response status code: 200
[2025-06-03 17:42:25,263] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:42:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:42:25,263] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:42:25,264] INFO: Server is approved and ready to process commands
[2025-06-03 17:42:25,264] INFO: Fetching commands...
[2025-06-03 17:42:25,265] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:42:25,265] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:42:27,322] DEBUG: Response status code: 200
[2025-06-03 17:42:27,322] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:42:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:42:27,323] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:42:27,323] INFO: Commands: []
[2025-06-03 17:42:59,377] DEBUG: Checking approval status for server 8
[2025-06-03 17:42:59,377] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:43:01,416] DEBUG: Response status code: 200
[2025-06-03 17:43:01,417] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:43:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:43:01,418] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:43:01,418] INFO: Server is approved and ready to process commands
[2025-06-03 17:43:01,418] INFO: Fetching commands...
[2025-06-03 17:43:01,419] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:43:01,419] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:43:03,473] DEBUG: Response status code: 200
[2025-06-03 17:43:03,473] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:43:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:43:03,474] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:43:03,474] INFO: Commands: []
[2025-06-03 17:44:21,628] DEBUG: Checking approval status for server 8
[2025-06-03 17:44:21,628] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:44:23,671] DEBUG: Response status code: 200
[2025-06-03 17:44:23,671] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:44:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:44:23,672] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:44:23,672] INFO: Server is approved and ready to process commands
[2025-06-03 17:44:23,672] INFO: Fetching commands...
[2025-06-03 17:44:23,672] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:44:23,673] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:44:25,716] DEBUG: Response status code: 200
[2025-06-03 17:44:25,717] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:44:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:44:25,717] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:44:25,717] INFO: Commands: []
[2025-06-03 17:44:57,772] DEBUG: Checking approval status for server 8
[2025-06-03 17:44:57,773] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:44:59,813] DEBUG: Response status code: 200
[2025-06-03 17:44:59,813] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:44:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:44:59,814] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:44:59,814] INFO: Server is approved and ready to process commands
[2025-06-03 17:44:59,814] INFO: Fetching commands...
[2025-06-03 17:44:59,814] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:44:59,815] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:45:01,869] DEBUG: Response status code: 200
[2025-06-03 17:45:01,869] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:45:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:45:01,870] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:45:01,870] INFO: Commands: []
[2025-06-03 17:45:33,914] DEBUG: Checking approval status for server 8
[2025-06-03 17:45:33,914] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:45:35,964] DEBUG: Response status code: 200
[2025-06-03 17:45:35,964] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:45:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:45:35,964] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:45:35,965] INFO: Server is approved and ready to process commands
[2025-06-03 17:45:35,965] INFO: Fetching commands...
[2025-06-03 17:45:35,965] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:45:35,966] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:45:38,016] DEBUG: Response status code: 200
[2025-06-03 17:45:38,016] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:45:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:45:38,017] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:45:38,017] INFO: Commands: []
[2025-06-03 17:46:10,081] DEBUG: Checking approval status for server 8
[2025-06-03 17:46:10,081] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:46:12,130] DEBUG: Response status code: 200
[2025-06-03 17:46:12,131] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:46:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:46:12,131] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:46:12,131] INFO: Server is approved and ready to process commands
[2025-06-03 17:46:12,132] INFO: Fetching commands...
[2025-06-03 17:46:12,132] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:46:12,132] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:46:14,177] DEBUG: Response status code: 200
[2025-06-03 17:46:14,178] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:46:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:46:14,178] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:46:14,179] INFO: Commands: []
[2025-06-03 17:46:46,229] DEBUG: Checking approval status for server 8
[2025-06-03 17:46:46,229] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:46:51,283] DEBUG: Response status code: 200
[2025-06-03 17:46:51,283] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:46:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:46:51,284] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:46:51,284] INFO: Server is approved and ready to process commands
[2025-06-03 17:46:51,285] INFO: Fetching commands...
[2025-06-03 17:46:51,285] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:46:51,285] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:46:53,337] DEBUG: Response status code: 200
[2025-06-03 17:46:53,337] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:46:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:46:53,338] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:46:53,338] INFO: Commands: []
[2025-06-03 17:47:25,391] DEBUG: Checking approval status for server 8
[2025-06-03 17:47:25,391] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:47:27,437] DEBUG: Response status code: 200
[2025-06-03 17:47:27,437] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:47:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:47:27,438] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:47:27,438] INFO: Server is approved and ready to process commands
[2025-06-03 17:47:27,438] INFO: Fetching commands...
[2025-06-03 17:47:27,438] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:47:27,438] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:47:29,514] DEBUG: Response status code: 200
[2025-06-03 17:47:29,514] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:47:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:47:29,514] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:47:29,515] INFO: Commands: []
[2025-06-03 17:48:01,579] DEBUG: Checking approval status for server 8
[2025-06-03 17:48:01,579] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:48:03,634] DEBUG: Response status code: 200
[2025-06-03 17:48:03,635] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:48:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:48:03,635] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:48:03,635] INFO: Server is approved and ready to process commands
[2025-06-03 17:48:03,636] INFO: Fetching commands...
[2025-06-03 17:48:03,636] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:48:03,637] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:48:05,693] DEBUG: Response status code: 200
[2025-06-03 17:48:05,693] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:48:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:48:05,694] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:48:05,694] INFO: Commands: []
[2025-06-03 17:48:37,741] DEBUG: Checking approval status for server 8
[2025-06-03 17:48:37,741] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:48:39,793] DEBUG: Response status code: 200
[2025-06-03 17:48:39,793] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:48:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:48:39,794] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:48:39,794] INFO: Server is approved and ready to process commands
[2025-06-03 17:48:39,795] INFO: Fetching commands...
[2025-06-03 17:48:39,795] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:48:39,795] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:48:41,860] DEBUG: Response status code: 200
[2025-06-03 17:48:41,860] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:48:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:48:41,862] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:48:41,862] INFO: Commands: []
[2025-06-03 17:49:13,912] DEBUG: Checking approval status for server 8
[2025-06-03 17:49:13,912] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:49:15,966] DEBUG: Response status code: 200
[2025-06-03 17:49:15,966] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:49:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:49:15,967] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:49:15,967] INFO: Server is approved and ready to process commands
[2025-06-03 17:49:15,967] INFO: Fetching commands...
[2025-06-03 17:49:15,968] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:49:15,968] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:49:18,009] DEBUG: Response status code: 200
[2025-06-03 17:49:18,009] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:49:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:49:18,010] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:49:18,010] INFO: Commands: []
[2025-06-03 17:49:50,068] DEBUG: Checking approval status for server 8
[2025-06-03 17:49:50,068] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:49:52,124] DEBUG: Response status code: 200
[2025-06-03 17:49:52,124] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:49:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:49:52,125] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:49:52,125] INFO: Server is approved and ready to process commands
[2025-06-03 17:49:52,126] INFO: Fetching commands...
[2025-06-03 17:49:52,126] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:49:52,126] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:49:54,190] DEBUG: Response status code: 200
[2025-06-03 17:49:54,190] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:49:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:49:54,190] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:49:54,191] INFO: Commands: []
[2025-06-03 17:50:26,260] DEBUG: Checking approval status for server 8
[2025-06-03 17:50:26,260] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:50:28,319] DEBUG: Response status code: 200
[2025-06-03 17:50:28,319] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:50:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:50:28,320] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:50:28,322] INFO: Server is approved and ready to process commands
[2025-06-03 17:50:28,322] INFO: Fetching commands...
[2025-06-03 17:50:28,323] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:50:28,323] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:50:30,359] DEBUG: Response status code: 200
[2025-06-03 17:50:30,359] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:50:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:50:30,359] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:50:30,359] INFO: Commands: []
[2025-06-03 17:51:02,418] DEBUG: Checking approval status for server 8
[2025-06-03 17:51:02,419] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:51:04,461] DEBUG: Response status code: 200
[2025-06-03 17:51:04,461] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:51:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 17:51:04,462] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 17:51:04,462] INFO: Server is approved and ready to process commands
[2025-06-03 17:51:04,462] INFO: Fetching commands...
[2025-06-03 17:51:04,462] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 17:51:04,464] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 17:51:06,499] DEBUG: Response status code: 200
[2025-06-03 17:51:06,499] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 14:51:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 17:51:06,500] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 17:51:06,501] INFO: Commands: []
[2025-06-03 18:02:25,470] DEBUG: Checking approval status for server 8
[2025-06-03 18:02:25,471] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:02:27,546] DEBUG: Response status code: 200
[2025-06-03 18:02:27,547] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:02:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:02:27,548] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:02:27,549] INFO: Server is approved and ready to process commands
[2025-06-03 18:02:27,549] INFO: Fetching commands...
[2025-06-03 18:02:27,550] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:02:27,551] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:02:29,606] DEBUG: Response status code: 200
[2025-06-03 18:02:29,606] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:02:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:02:29,607] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:02:29,607] INFO: Commands: []
[2025-06-03 18:03:01,642] DEBUG: Checking approval status for server 8
[2025-06-03 18:03:01,643] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:03:03,721] DEBUG: Response status code: 200
[2025-06-03 18:03:03,722] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:03:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:03:03,723] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:03:03,724] INFO: Server is approved and ready to process commands
[2025-06-03 18:03:03,725] INFO: Fetching commands...
[2025-06-03 18:03:03,725] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:03:03,726] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:03:05,762] DEBUG: Response status code: 200
[2025-06-03 18:03:05,762] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:03:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:03:05,763] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:03:05,764] INFO: Commands: []
[2025-06-03 18:03:37,814] DEBUG: Checking approval status for server 8
[2025-06-03 18:03:37,815] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:03:39,875] DEBUG: Response status code: 200
[2025-06-03 18:03:39,875] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:03:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:03:39,876] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:03:39,877] INFO: Server is approved and ready to process commands
[2025-06-03 18:03:39,877] INFO: Fetching commands...
[2025-06-03 18:03:39,878] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:03:39,878] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:03:41,931] DEBUG: Response status code: 200
[2025-06-03 18:03:41,931] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:03:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:03:41,931] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:03:41,932] INFO: Commands: []
[2025-06-03 18:04:14,013] DEBUG: Checking approval status for server 8
[2025-06-03 18:04:14,014] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:04:16,098] DEBUG: Response status code: 200
[2025-06-03 18:04:16,098] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:04:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:04:16,098] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:04:16,098] INFO: Server is approved and ready to process commands
[2025-06-03 18:04:16,098] INFO: Fetching commands...
[2025-06-03 18:04:16,099] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:04:16,101] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:04:18,174] DEBUG: Response status code: 200
[2025-06-03 18:04:18,174] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:04:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:04:18,175] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:04:18,175] INFO: Commands: []
[2025-06-03 18:04:50,246] DEBUG: Checking approval status for server 8
[2025-06-03 18:04:50,246] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:04:52,308] DEBUG: Response status code: 200
[2025-06-03 18:04:52,308] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:04:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:04:52,309] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:04:52,309] INFO: Server is approved and ready to process commands
[2025-06-03 18:04:52,309] INFO: Fetching commands...
[2025-06-03 18:04:52,310] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:04:52,310] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:04:54,349] DEBUG: Response status code: 200
[2025-06-03 18:04:54,350] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:04:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:04:54,350] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:04:54,351] INFO: Commands: []
[2025-06-03 18:05:26,405] DEBUG: Checking approval status for server 8
[2025-06-03 18:05:26,405] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:05:28,439] DEBUG: Response status code: 200
[2025-06-03 18:05:28,440] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:05:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:05:28,440] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:05:28,441] INFO: Server is approved and ready to process commands
[2025-06-03 18:05:28,442] INFO: Fetching commands...
[2025-06-03 18:05:28,442] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:05:28,443] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:05:30,473] DEBUG: Response status code: 200
[2025-06-03 18:05:30,473] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:05:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:05:30,473] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:05:30,474] INFO: Commands: []
[2025-06-03 18:06:02,543] DEBUG: Checking approval status for server 8
[2025-06-03 18:06:02,544] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:06:04,609] DEBUG: Response status code: 200
[2025-06-03 18:06:04,610] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:06:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:06:04,610] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:06:04,612] INFO: Server is approved and ready to process commands
[2025-06-03 18:06:04,613] INFO: Fetching commands...
[2025-06-03 18:06:04,615] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:06:04,616] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:06:06,670] DEBUG: Response status code: 200
[2025-06-03 18:06:06,670] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:06:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:06:06,671] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:06:06,671] INFO: Commands: []
[2025-06-03 18:06:38,723] DEBUG: Checking approval status for server 8
[2025-06-03 18:06:38,724] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:06:40,781] DEBUG: Response status code: 200
[2025-06-03 18:06:40,782] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:06:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:06:40,782] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:06:40,783] INFO: Server is approved and ready to process commands
[2025-06-03 18:06:40,784] INFO: Fetching commands...
[2025-06-03 18:06:40,784] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:06:40,784] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:06:42,826] DEBUG: Response status code: 200
[2025-06-03 18:06:42,827] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:06:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:06:42,827] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:06:42,827] INFO: Commands: []
[2025-06-03 18:07:14,860] DEBUG: Checking approval status for server 8
[2025-06-03 18:07:14,860] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:07:16,918] DEBUG: Response status code: 200
[2025-06-03 18:07:16,918] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:07:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:07:16,918] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:07:16,919] INFO: Server is approved and ready to process commands
[2025-06-03 18:07:16,919] INFO: Fetching commands...
[2025-06-03 18:07:16,919] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:07:16,919] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:07:18,973] DEBUG: Response status code: 200
[2025-06-03 18:07:18,974] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:07:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:07:18,974] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:07:18,975] INFO: Commands: []
[2025-06-03 18:07:51,046] DEBUG: Checking approval status for server 8
[2025-06-03 18:07:51,047] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:07:53,098] DEBUG: Response status code: 200
[2025-06-03 18:07:53,098] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:07:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:07:53,098] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:07:53,099] INFO: Server is approved and ready to process commands
[2025-06-03 18:07:53,099] INFO: Fetching commands...
[2025-06-03 18:07:53,099] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:07:53,100] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:07:55,141] DEBUG: Response status code: 200
[2025-06-03 18:07:55,141] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:07:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:07:55,141] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:07:55,142] INFO: Commands: []
[2025-06-03 18:08:27,203] DEBUG: Checking approval status for server 8
[2025-06-03 18:08:27,203] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:08:29,261] DEBUG: Response status code: 200
[2025-06-03 18:08:29,261] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:08:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:08:29,262] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:08:29,262] INFO: Server is approved and ready to process commands
[2025-06-03 18:08:29,262] INFO: Fetching commands...
[2025-06-03 18:08:29,263] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:08:29,263] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:08:31,333] DEBUG: Response status code: 200
[2025-06-03 18:08:31,334] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:08:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:08:31,334] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:08:31,335] INFO: Commands: []
[2025-06-03 18:09:03,386] DEBUG: Checking approval status for server 8
[2025-06-03 18:09:03,386] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:09:05,544] ERROR: Error checking approval status: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))
[2025-06-03 18:09:05,650] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 468, in _make_request
    six.raise_from(e, None)
  File "<string>", line 3, in raise_from
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 463, in _make_request
    httplib_response = conn.getresponse()
                       ^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\http\client.py", line 1395, in getresponse
    response.begin()
  File "C:\Program Files\Python311\Lib\http\client.py", line 325, in begin
    version, status, reason = self._read_status()
                              ^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\http\client.py", line 286, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\socket.py", line 706, in readinto
    return self._sock.recv_into(b)
           ^^^^^^^^^^^^^^^^^^^^^^^
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 552, in increment
    raise six.reraise(type(error), error, _stacktrace)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\packages\six.py", line 769, in reraise
    raise value.with_traceback(tb)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 468, in _make_request
    six.raise_from(e, None)
  File "<string>", line 3, in raise_from
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 463, in _make_request
    httplib_response = conn.getresponse()
                       ^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\http\client.py", line 1395, in getresponse
    response.begin()
  File "C:\Program Files\Python311\Lib\http\client.py", line 325, in begin
    version, status, reason = self._read_status()
                              ^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\http\client.py", line 286, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\socket.py", line 706, in readinto
    return self._sock.recv_into(b)
           ^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 319, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 501, in send
    raise ConnectionError(err, request=request)
requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))

[2025-06-03 18:09:05,651] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-03 18:10:05,652] DEBUG: Checking approval status for server 8
[2025-06-03 18:10:05,652] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:10:07,705] DEBUG: Response status code: 200
[2025-06-03 18:10:07,705] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:10:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:10:07,705] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:10:07,706] INFO: Server is approved and ready to process commands
[2025-06-03 18:10:07,706] INFO: Fetching commands...
[2025-06-03 18:10:07,706] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:10:07,706] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:10:09,776] DEBUG: Response status code: 200
[2025-06-03 18:10:09,776] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:10:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:10:09,777] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:10:09,778] INFO: Commands: []
[2025-06-03 18:10:41,841] DEBUG: Checking approval status for server 8
[2025-06-03 18:10:41,841] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:10:43,885] DEBUG: Response status code: 200
[2025-06-03 18:10:43,886] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:10:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:10:43,886] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:10:43,887] INFO: Server is approved and ready to process commands
[2025-06-03 18:10:43,887] INFO: Fetching commands...
[2025-06-03 18:10:43,887] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:10:43,887] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:10:45,949] DEBUG: Response status code: 200
[2025-06-03 18:10:45,949] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:10:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:10:45,950] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:10:45,950] INFO: Commands: []
[2025-06-03 18:11:18,007] DEBUG: Checking approval status for server 8
[2025-06-03 18:11:18,007] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:11:20,059] DEBUG: Response status code: 200
[2025-06-03 18:11:20,060] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:11:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:11:20,060] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:11:20,060] INFO: Server is approved and ready to process commands
[2025-06-03 18:11:20,061] INFO: Fetching commands...
[2025-06-03 18:11:20,061] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:11:20,061] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:11:22,124] DEBUG: Response status code: 200
[2025-06-03 18:11:22,124] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:11:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:11:22,124] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:11:22,125] INFO: Commands: []
[2025-06-03 18:11:54,199] DEBUG: Checking approval status for server 8
[2025-06-03 18:11:54,199] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:11:56,232] DEBUG: Response status code: 200
[2025-06-03 18:11:56,232] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:11:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:11:56,234] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:11:56,234] INFO: Server is approved and ready to process commands
[2025-06-03 18:11:56,234] INFO: Fetching commands...
[2025-06-03 18:11:56,235] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:11:56,235] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:11:58,276] DEBUG: Response status code: 200
[2025-06-03 18:11:58,276] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:11:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:11:58,277] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:11:58,278] INFO: Commands: []
[2025-06-03 18:12:30,329] DEBUG: Checking approval status for server 8
[2025-06-03 18:12:30,330] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:12:32,389] DEBUG: Response status code: 200
[2025-06-03 18:12:32,389] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:12:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:12:32,390] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:12:32,390] INFO: Server is approved and ready to process commands
[2025-06-03 18:12:32,391] INFO: Fetching commands...
[2025-06-03 18:12:32,392] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:12:32,392] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:12:34,472] DEBUG: Response status code: 200
[2025-06-03 18:12:34,472] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:12:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:12:34,473] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:12:34,473] INFO: Commands: []
[2025-06-03 18:13:06,531] DEBUG: Checking approval status for server 8
[2025-06-03 18:13:06,532] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:13:08,617] DEBUG: Response status code: 200
[2025-06-03 18:13:08,618] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:13:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:13:08,618] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:13:08,618] INFO: Server is approved and ready to process commands
[2025-06-03 18:13:08,620] INFO: Fetching commands...
[2025-06-03 18:13:08,620] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:13:08,620] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:13:10,662] DEBUG: Response status code: 200
[2025-06-03 18:13:10,663] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:13:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:13:10,663] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:13:10,663] INFO: Commands: []
[2025-06-03 18:13:42,717] DEBUG: Checking approval status for server 8
[2025-06-03 18:13:42,718] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:13:44,796] DEBUG: Response status code: 200
[2025-06-03 18:13:44,797] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:13:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:13:44,797] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:13:44,797] INFO: Server is approved and ready to process commands
[2025-06-03 18:13:44,798] INFO: Fetching commands...
[2025-06-03 18:13:44,798] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:13:44,799] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:13:46,867] DEBUG: Response status code: 200
[2025-06-03 18:13:46,867] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:13:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:13:46,868] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:13:46,868] INFO: Commands: []
[2025-06-03 18:14:18,931] DEBUG: Checking approval status for server 8
[2025-06-03 18:14:18,931] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:14:21,010] DEBUG: Response status code: 200
[2025-06-03 18:14:21,010] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:14:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:14:21,010] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:14:21,011] INFO: Server is approved and ready to process commands
[2025-06-03 18:14:21,011] INFO: Fetching commands...
[2025-06-03 18:14:21,012] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:14:21,012] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:14:23,070] DEBUG: Response status code: 200
[2025-06-03 18:14:23,070] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:14:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:14:23,070] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:14:23,071] INFO: Commands: []
[2025-06-03 18:14:55,122] DEBUG: Checking approval status for server 8
[2025-06-03 18:14:55,122] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:14:57,196] DEBUG: Response status code: 200
[2025-06-03 18:14:57,196] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:14:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:14:57,197] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:14:57,197] INFO: Server is approved and ready to process commands
[2025-06-03 18:14:57,198] INFO: Fetching commands...
[2025-06-03 18:14:57,198] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:14:57,198] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:14:59,250] DEBUG: Response status code: 200
[2025-06-03 18:14:59,250] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:14:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:14:59,251] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:14:59,251] INFO: Commands: []
[2025-06-03 18:15:31,310] DEBUG: Checking approval status for server 8
[2025-06-03 18:15:31,311] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:15:33,379] DEBUG: Response status code: 200
[2025-06-03 18:15:33,380] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:15:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:15:33,380] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:15:33,381] INFO: Server is approved and ready to process commands
[2025-06-03 18:15:33,381] INFO: Fetching commands...
[2025-06-03 18:15:33,381] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:15:33,382] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:15:35,448] DEBUG: Response status code: 200
[2025-06-03 18:15:35,448] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:15:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:15:35,449] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:15:35,449] INFO: Commands: []
[2025-06-03 18:16:07,517] DEBUG: Checking approval status for server 8
[2025-06-03 18:16:07,517] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:16:09,568] DEBUG: Response status code: 200
[2025-06-03 18:16:09,568] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:16:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:16:09,568] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:16:09,569] INFO: Server is approved and ready to process commands
[2025-06-03 18:16:09,569] INFO: Fetching commands...
[2025-06-03 18:16:09,569] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:16:09,569] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:16:11,631] DEBUG: Response status code: 200
[2025-06-03 18:16:11,631] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:16:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:16:11,632] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:16:11,632] INFO: Commands: []
[2025-06-03 18:16:43,676] DEBUG: Checking approval status for server 8
[2025-06-03 18:16:43,676] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:16:45,723] DEBUG: Response status code: 200
[2025-06-03 18:16:45,723] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:16:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:16:45,723] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:16:45,724] INFO: Server is approved and ready to process commands
[2025-06-03 18:16:45,724] INFO: Fetching commands...
[2025-06-03 18:16:45,724] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:16:45,724] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:16:47,800] DEBUG: Response status code: 200
[2025-06-03 18:16:47,800] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:16:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:16:47,801] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:16:47,801] INFO: Commands: []
[2025-06-03 18:17:19,845] DEBUG: Checking approval status for server 8
[2025-06-03 18:17:19,846] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:17:21,944] DEBUG: Response status code: 200
[2025-06-03 18:17:21,945] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:17:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:17:21,945] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:17:21,946] INFO: Server is approved and ready to process commands
[2025-06-03 18:17:21,946] INFO: Fetching commands...
[2025-06-03 18:17:21,947] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:17:21,947] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:17:24,005] DEBUG: Response status code: 200
[2025-06-03 18:17:24,006] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:17:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:17:24,006] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:17:24,006] INFO: Commands: []
[2025-06-03 18:17:56,091] DEBUG: Checking approval status for server 8
[2025-06-03 18:17:56,092] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:17:58,149] DEBUG: Response status code: 200
[2025-06-03 18:17:58,149] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:17:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:17:58,150] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:17:58,150] INFO: Server is approved and ready to process commands
[2025-06-03 18:17:58,151] INFO: Fetching commands...
[2025-06-03 18:17:58,151] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:17:58,152] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:18:00,197] DEBUG: Response status code: 200
[2025-06-03 18:18:00,197] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:18:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:18:00,198] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:18:00,198] INFO: Commands: []
[2025-06-03 18:18:32,228] DEBUG: Checking approval status for server 8
[2025-06-03 18:18:32,229] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:18:34,293] DEBUG: Response status code: 200
[2025-06-03 18:18:34,293] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:18:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:18:34,295] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:18:34,295] INFO: Server is approved and ready to process commands
[2025-06-03 18:18:34,295] INFO: Fetching commands...
[2025-06-03 18:18:34,297] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:18:34,297] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:18:36,367] DEBUG: Response status code: 200
[2025-06-03 18:18:36,367] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:18:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:18:36,368] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:18:36,369] INFO: Commands: []
[2025-06-03 18:19:08,419] DEBUG: Checking approval status for server 8
[2025-06-03 18:19:08,420] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:19:10,480] DEBUG: Response status code: 200
[2025-06-03 18:19:10,481] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:19:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:19:10,482] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:19:10,483] INFO: Server is approved and ready to process commands
[2025-06-03 18:19:10,483] INFO: Fetching commands...
[2025-06-03 18:19:10,484] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:19:10,485] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:19:12,539] DEBUG: Response status code: 200
[2025-06-03 18:19:12,539] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:19:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:19:12,540] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:19:12,540] INFO: Commands: []
[2025-06-03 18:19:44,594] DEBUG: Checking approval status for server 8
[2025-06-03 18:19:44,595] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:19:46,659] DEBUG: Response status code: 200
[2025-06-03 18:19:46,660] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:19:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:19:46,660] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:19:46,661] INFO: Server is approved and ready to process commands
[2025-06-03 18:19:46,661] INFO: Fetching commands...
[2025-06-03 18:19:46,661] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:19:46,662] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:19:48,716] DEBUG: Response status code: 200
[2025-06-03 18:19:48,717] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:19:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:19:48,718] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:19:48,718] INFO: Commands: []
[2025-06-03 18:20:20,771] DEBUG: Checking approval status for server 8
[2025-06-03 18:20:20,772] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:20:22,815] DEBUG: Response status code: 200
[2025-06-03 18:20:22,815] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:20:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:20:22,815] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:20:22,816] INFO: Server is approved and ready to process commands
[2025-06-03 18:20:22,816] INFO: Fetching commands...
[2025-06-03 18:20:22,816] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:20:22,817] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:20:24,883] DEBUG: Response status code: 200
[2025-06-03 18:20:24,883] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:20:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:20:24,883] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:20:24,884] INFO: Commands: []
[2025-06-03 18:20:56,962] DEBUG: Checking approval status for server 8
[2025-06-03 18:20:56,962] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:20:59,047] DEBUG: Response status code: 200
[2025-06-03 18:20:59,048] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:20:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:20:59,048] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:20:59,049] INFO: Server is approved and ready to process commands
[2025-06-03 18:20:59,049] INFO: Fetching commands...
[2025-06-03 18:20:59,049] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:20:59,050] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:21:01,117] DEBUG: Response status code: 200
[2025-06-03 18:21:01,118] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:21:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:21:01,118] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:21:01,119] INFO: Commands: []
[2025-06-03 18:21:33,168] DEBUG: Checking approval status for server 8
[2025-06-03 18:21:33,169] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:21:35,234] DEBUG: Response status code: 200
[2025-06-03 18:21:35,234] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:21:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:21:35,235] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:21:35,235] INFO: Server is approved and ready to process commands
[2025-06-03 18:21:35,235] INFO: Fetching commands...
[2025-06-03 18:21:35,236] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:21:35,237] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:21:37,312] DEBUG: Response status code: 200
[2025-06-03 18:21:37,313] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:21:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:21:37,313] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:21:37,314] INFO: Commands: []
[2025-06-03 18:22:09,378] DEBUG: Checking approval status for server 8
[2025-06-03 18:22:09,379] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:22:11,438] DEBUG: Response status code: 200
[2025-06-03 18:22:11,438] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:22:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:22:11,438] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:22:11,439] INFO: Server is approved and ready to process commands
[2025-06-03 18:22:11,439] INFO: Fetching commands...
[2025-06-03 18:22:11,439] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:22:11,440] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:22:13,517] DEBUG: Response status code: 200
[2025-06-03 18:22:13,517] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:22:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:22:13,518] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:22:13,518] INFO: Commands: []
[2025-06-03 18:50:20,443] DEBUG: Checking approval status for server 8
[2025-06-03 18:50:20,443] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:50:22,514] DEBUG: Response status code: 200
[2025-06-03 18:50:22,515] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:50:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:50:22,515] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:50:22,515] INFO: Server is approved and ready to process commands
[2025-06-03 18:50:22,516] INFO: Fetching commands...
[2025-06-03 18:50:22,516] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:50:22,517] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:50:24,571] DEBUG: Response status code: 200
[2025-06-03 18:50:24,572] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:50:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:50:24,575] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:50:24,576] DEBUG: No pending commands found
[2025-06-03 18:50:56,631] DEBUG: Checking approval status for server 8
[2025-06-03 18:50:56,631] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:50:58,714] DEBUG: Response status code: 200
[2025-06-03 18:50:58,714] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:50:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:50:58,716] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:50:58,717] INFO: Server is approved and ready to process commands
[2025-06-03 18:50:58,718] INFO: Fetching commands...
[2025-06-03 18:50:58,718] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:50:58,720] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:51:00,753] DEBUG: Response status code: 200
[2025-06-03 18:51:00,754] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:51:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:51:00,756] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:51:00,757] DEBUG: No pending commands found
[2025-06-03 18:51:32,798] DEBUG: Checking approval status for server 8
[2025-06-03 18:51:32,799] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:51:34,828] DEBUG: Response status code: 200
[2025-06-03 18:51:34,829] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:51:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:51:34,829] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:51:34,830] INFO: Server is approved and ready to process commands
[2025-06-03 18:51:34,830] INFO: Fetching commands...
[2025-06-03 18:51:34,830] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:51:34,831] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:51:36,896] DEBUG: Response status code: 200
[2025-06-03 18:51:36,896] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:51:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:51:36,897] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:51:36,897] DEBUG: No pending commands found
[2025-06-03 18:52:08,940] DEBUG: Checking approval status for server 8
[2025-06-03 18:52:08,941] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:52:11,013] DEBUG: Response status code: 200
[2025-06-03 18:52:11,013] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:52:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:52:11,014] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:52:11,015] INFO: Server is approved and ready to process commands
[2025-06-03 18:52:11,015] INFO: Fetching commands...
[2025-06-03 18:52:11,016] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:52:11,016] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:52:13,073] DEBUG: Response status code: 200
[2025-06-03 18:52:13,074] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:52:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:52:13,074] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:52:13,075] DEBUG: No pending commands found
[2025-06-03 18:52:45,139] DEBUG: Checking approval status for server 8
[2025-06-03 18:52:45,139] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:52:47,200] DEBUG: Response status code: 200
[2025-06-03 18:52:47,200] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:52:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:52:47,201] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:52:47,202] INFO: Server is approved and ready to process commands
[2025-06-03 18:52:47,202] INFO: Fetching commands...
[2025-06-03 18:52:47,203] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:52:47,203] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:52:49,266] DEBUG: Response status code: 200
[2025-06-03 18:52:49,267] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:52:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:52:49,268] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:52:49,269] DEBUG: No pending commands found
[2025-06-03 18:53:21,338] DEBUG: Checking approval status for server 8
[2025-06-03 18:53:21,338] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:53:23,390] DEBUG: Response status code: 200
[2025-06-03 18:53:23,391] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:53:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:53:23,392] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:53:23,392] INFO: Server is approved and ready to process commands
[2025-06-03 18:53:23,392] INFO: Fetching commands...
[2025-06-03 18:53:23,393] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:53:23,393] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:53:25,426] DEBUG: Response status code: 200
[2025-06-03 18:53:25,426] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:53:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:53:25,427] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:53:25,427] DEBUG: No pending commands found
[2025-06-03 18:53:57,479] DEBUG: Checking approval status for server 8
[2025-06-03 18:53:57,479] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:53:59,583] DEBUG: Response status code: 200
[2025-06-03 18:53:59,585] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:53:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:53:59,585] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:53:59,586] INFO: Server is approved and ready to process commands
[2025-06-03 18:53:59,586] INFO: Fetching commands...
[2025-06-03 18:53:59,586] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:53:59,587] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:54:01,626] DEBUG: Response status code: 200
[2025-06-03 18:54:01,626] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:54:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:54:01,627] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:54:01,628] DEBUG: No pending commands found
[2025-06-03 18:54:33,857] DEBUG: Checking approval status for server 8
[2025-06-03 18:54:33,857] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:54:35,975] DEBUG: Response status code: 200
[2025-06-03 18:54:35,975] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:54:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:54:35,976] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:54:35,976] INFO: Server is approved and ready to process commands
[2025-06-03 18:54:35,976] INFO: Fetching commands...
[2025-06-03 18:54:35,977] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:54:35,977] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:54:38,014] DEBUG: Response status code: 200
[2025-06-03 18:54:38,015] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:54:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:54:38,015] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:54:38,015] DEBUG: No pending commands found
[2025-06-03 18:55:10,056] DEBUG: Checking approval status for server 8
[2025-06-03 18:55:10,057] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:55:12,188] DEBUG: Response status code: 200
[2025-06-03 18:55:12,189] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:55:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:55:12,190] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:55:12,191] INFO: Server is approved and ready to process commands
[2025-06-03 18:55:12,191] INFO: Fetching commands...
[2025-06-03 18:55:12,191] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:55:12,192] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:55:14,257] DEBUG: Response status code: 200
[2025-06-03 18:55:14,257] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:55:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:55:14,257] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:55:14,258] DEBUG: No pending commands found
[2025-06-03 18:55:46,287] DEBUG: Checking approval status for server 8
[2025-06-03 18:55:46,287] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:55:48,364] DEBUG: Response status code: 200
[2025-06-03 18:55:48,365] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:55:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:55:48,365] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:55:48,365] INFO: Server is approved and ready to process commands
[2025-06-03 18:55:48,366] INFO: Fetching commands...
[2025-06-03 18:55:48,367] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:55:48,367] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:55:50,432] DEBUG: Response status code: 200
[2025-06-03 18:55:50,433] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:55:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:55:50,433] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:55:50,434] DEBUG: No pending commands found
[2025-06-03 18:56:22,475] DEBUG: Checking approval status for server 8
[2025-06-03 18:56:22,475] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:56:24,513] DEBUG: Response status code: 200
[2025-06-03 18:56:24,514] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:56:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-03 18:56:24,515] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-03 18:56:24,515] INFO: Server is approved and ready to process commands
[2025-06-03 18:56:24,516] INFO: Fetching commands...
[2025-06-03 18:56:24,516] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-03 18:56:24,517] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:56:26,584] DEBUG: Response status code: 200
[2025-06-03 18:56:26,585] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:56:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-03 18:56:26,586] DEBUG: Response data: {
  "commands": []
}
[2025-06-03 18:56:26,587] DEBUG: No pending commands found
[2025-06-03 18:56:58,648] DEBUG: Checking approval status for server 8
[2025-06-03 18:56:58,648] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-03 18:57:00,706] DEBUG: Response status code: 500
[2025-06-03 18:57:00,707] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Tue, 03 Jun 2025 15:57:00 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '16491', 'Connection': 'close'}
[2025-06-03 18:57:00,708] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "RTIr7dKhB1BrL4qCJUhY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2541798581600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2541798583040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2541798583184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2541798583328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 20, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 8, in <module>
    from flask_wtf.csrf import exempt
ImportError: cannot import name 'exempt' from 'flask_wtf.csrf' (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)



-->

[2025-06-03 18:57:00,709] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "RTIr7dKhB1BrL4qCJUhY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2541798581600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-2541798583040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-2541798583184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2541798583328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 20, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 8, in &lt;module&gt;
    from flask_wtf.csrf import exempt
ImportError: cannot import name &#39;exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 20, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 8, in <module>
    from flask_wtf.csrf import exempt
ImportError: cannot import name 'exempt' from 'flask_wtf.csrf' (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)



-->

[2025-06-03 18:57:00,709] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 10:42:03,366] DEBUG: Checking approval status for server 8
[2025-06-04 10:42:03,367] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 10:42:05,453] DEBUG: Response status code: 200
[2025-06-04 10:42:05,454] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 07:42:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 10:42:05,454] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 10:42:05,454] INFO: Server is approved and ready to process commands
[2025-06-04 10:42:05,454] INFO: Fetching commands...
[2025-06-04 10:42:05,455] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 10:42:05,455] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 10:42:07,512] DEBUG: Response status code: 200
[2025-06-04 10:42:07,513] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 07:42:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 10:42:07,513] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 10:42:07,515] DEBUG: No pending commands found
[2025-06-04 10:42:39,567] DEBUG: Checking approval status for server 8
[2025-06-04 10:42:39,569] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 10:42:41,616] DEBUG: Response status code: 200
[2025-06-04 10:42:41,616] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 07:42:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 10:42:41,617] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 10:42:41,618] INFO: Server is approved and ready to process commands
[2025-06-04 10:42:41,618] INFO: Fetching commands...
[2025-06-04 10:42:41,619] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 10:42:41,619] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 10:42:43,653] DEBUG: Response status code: 200
[2025-06-04 10:42:43,654] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 07:42:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 10:42:43,655] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 10:42:43,655] DEBUG: No pending commands found
[2025-06-04 10:43:15,698] DEBUG: Checking approval status for server 8
[2025-06-04 10:43:15,699] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 10:43:17,770] DEBUG: Response status code: 200
[2025-06-04 10:43:17,772] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 07:43:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 10:43:17,772] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 10:43:17,772] INFO: Server is approved and ready to process commands
[2025-06-04 10:43:17,772] INFO: Fetching commands...
[2025-06-04 10:43:17,774] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 10:43:17,775] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 10:43:19,824] DEBUG: Response status code: 200
[2025-06-04 10:43:19,824] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 07:43:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 10:43:19,824] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 10:43:19,825] DEBUG: No pending commands found
[2025-06-04 11:00:50,121] DEBUG: Checking approval status for server 8
[2025-06-04 11:00:50,121] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:00:52,290] DEBUG: Response status code: 200
[2025-06-04 11:00:52,291] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:00:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:00:52,291] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:00:52,291] INFO: Server is approved and ready to process commands
[2025-06-04 11:00:52,292] INFO: Fetching commands...
[2025-06-04 11:00:52,292] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:00:52,293] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:00:54,379] DEBUG: Response status code: 200
[2025-06-04 11:00:54,379] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:00:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:00:54,380] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:00:54,380] DEBUG: No pending commands found
[2025-06-04 11:01:26,436] DEBUG: Checking approval status for server 8
[2025-06-04 11:01:26,436] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:01:28,474] DEBUG: Response status code: 200
[2025-06-04 11:01:28,474] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:01:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:01:28,475] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:01:28,476] INFO: Server is approved and ready to process commands
[2025-06-04 11:01:28,476] INFO: Fetching commands...
[2025-06-04 11:01:28,476] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:01:28,476] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:01:30,513] DEBUG: Response status code: 200
[2025-06-04 11:01:30,514] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:01:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:01:30,514] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:01:30,515] DEBUG: No pending commands found
[2025-06-04 11:02:02,577] DEBUG: Checking approval status for server 8
[2025-06-04 11:02:02,577] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:02:04,606] DEBUG: Response status code: 200
[2025-06-04 11:02:04,607] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:02:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:02:04,608] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:02:04,608] INFO: Server is approved and ready to process commands
[2025-06-04 11:02:04,609] INFO: Fetching commands...
[2025-06-04 11:02:04,610] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:02:04,610] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:02:06,657] DEBUG: Response status code: 200
[2025-06-04 11:02:06,657] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:02:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:02:06,658] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:02:06,658] DEBUG: No pending commands found
[2025-06-04 11:02:38,683] DEBUG: Checking approval status for server 8
[2025-06-04 11:02:38,684] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:02:40,724] DEBUG: Response status code: 200
[2025-06-04 11:02:40,725] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:02:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:02:40,725] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:02:40,726] INFO: Server is approved and ready to process commands
[2025-06-04 11:02:40,726] INFO: Fetching commands...
[2025-06-04 11:02:40,727] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:02:40,727] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:02:42,763] DEBUG: Response status code: 200
[2025-06-04 11:02:42,763] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:02:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:02:42,764] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:02:42,764] DEBUG: No pending commands found
[2025-06-04 11:03:14,786] DEBUG: Checking approval status for server 8
[2025-06-04 11:03:14,786] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:03:16,858] DEBUG: Response status code: 200
[2025-06-04 11:03:16,858] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:03:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:03:16,859] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:03:16,859] INFO: Server is approved and ready to process commands
[2025-06-04 11:03:16,860] INFO: Fetching commands...
[2025-06-04 11:03:16,860] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:03:16,861] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:03:18,929] DEBUG: Response status code: 200
[2025-06-04 11:03:18,930] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:03:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:03:18,930] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:03:18,930] DEBUG: No pending commands found
[2025-06-04 11:03:50,981] DEBUG: Checking approval status for server 8
[2025-06-04 11:03:50,981] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:03:53,004] DEBUG: Response status code: 200
[2025-06-04 11:03:53,005] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:03:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:03:53,005] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:03:53,006] INFO: Server is approved and ready to process commands
[2025-06-04 11:03:53,006] INFO: Fetching commands...
[2025-06-04 11:03:53,006] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:03:53,007] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:03:55,057] DEBUG: Response status code: 200
[2025-06-04 11:03:55,058] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:03:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:03:55,058] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:03:55,059] DEBUG: No pending commands found
[2025-06-04 11:04:27,103] DEBUG: Checking approval status for server 8
[2025-06-04 11:04:27,103] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:04:29,160] DEBUG: Response status code: 200
[2025-06-04 11:04:29,160] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:04:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:04:29,161] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:04:29,161] INFO: Server is approved and ready to process commands
[2025-06-04 11:04:29,162] INFO: Fetching commands...
[2025-06-04 11:04:29,162] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:04:29,163] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:04:31,217] DEBUG: Response status code: 200
[2025-06-04 11:04:31,218] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:04:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:04:31,219] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:04:31,220] DEBUG: No pending commands found
[2025-06-04 11:05:03,266] DEBUG: Checking approval status for server 8
[2025-06-04 11:05:03,266] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:05:05,307] DEBUG: Response status code: 200
[2025-06-04 11:05:05,308] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:05:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:05:05,308] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:05:05,309] INFO: Server is approved and ready to process commands
[2025-06-04 11:05:05,310] INFO: Fetching commands...
[2025-06-04 11:05:05,311] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:05:05,311] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:05:07,352] DEBUG: Response status code: 200
[2025-06-04 11:05:07,352] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:05:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:05:07,353] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:05:07,353] DEBUG: No pending commands found
[2025-06-04 11:05:39,398] DEBUG: Checking approval status for server 8
[2025-06-04 11:05:39,398] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:05:41,442] DEBUG: Response status code: 200
[2025-06-04 11:05:41,442] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:05:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:05:41,443] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:05:41,444] INFO: Server is approved and ready to process commands
[2025-06-04 11:05:41,444] INFO: Fetching commands...
[2025-06-04 11:05:41,446] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:05:41,446] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:05:43,484] DEBUG: Response status code: 200
[2025-06-04 11:05:43,485] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:05:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:05:43,485] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:05:43,485] DEBUG: No pending commands found
[2025-06-04 11:06:15,548] DEBUG: Checking approval status for server 8
[2025-06-04 11:06:15,549] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:06:17,656] DEBUG: Response status code: 200
[2025-06-04 11:06:17,657] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:06:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:06:17,657] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:06:17,658] INFO: Server is approved and ready to process commands
[2025-06-04 11:06:17,659] INFO: Fetching commands...
[2025-06-04 11:06:17,659] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:06:17,660] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:06:19,705] DEBUG: Response status code: 200
[2025-06-04 11:06:19,705] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:06:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:06:19,706] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:06:19,706] DEBUG: No pending commands found
[2025-06-04 11:06:51,770] DEBUG: Checking approval status for server 8
[2025-06-04 11:06:51,770] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:06:53,884] DEBUG: Response status code: 200
[2025-06-04 11:06:53,884] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:06:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:06:53,885] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:06:53,885] INFO: Server is approved and ready to process commands
[2025-06-04 11:06:53,886] INFO: Fetching commands...
[2025-06-04 11:06:53,886] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:06:53,887] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:06:55,923] DEBUG: Response status code: 200
[2025-06-04 11:06:55,924] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:06:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:06:55,924] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:06:55,925] DEBUG: No pending commands found
[2025-06-04 11:07:27,963] DEBUG: Checking approval status for server 8
[2025-06-04 11:07:27,964] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:07:29,999] DEBUG: Response status code: 200
[2025-06-04 11:07:30,000] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:07:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:07:30,000] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:07:30,001] INFO: Server is approved and ready to process commands
[2025-06-04 11:07:30,001] INFO: Fetching commands...
[2025-06-04 11:07:30,002] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:07:30,002] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:07:33,377] DEBUG: Response status code: 200
[2025-06-04 11:07:33,378] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:07:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:07:33,379] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:07:33,379] DEBUG: No pending commands found
[2025-06-04 11:08:05,424] DEBUG: Checking approval status for server 8
[2025-06-04 11:08:05,424] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:08:07,506] DEBUG: Response status code: 200
[2025-06-04 11:08:07,506] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:08:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:08:07,507] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:08:07,507] INFO: Server is approved and ready to process commands
[2025-06-04 11:08:07,508] INFO: Fetching commands...
[2025-06-04 11:08:07,508] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:08:07,508] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:08:09,553] DEBUG: Response status code: 200
[2025-06-04 11:08:09,554] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:08:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:08:09,554] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:08:09,555] DEBUG: No pending commands found
[2025-06-04 11:08:41,609] DEBUG: Checking approval status for server 8
[2025-06-04 11:08:41,610] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:08:43,710] DEBUG: Response status code: 200
[2025-06-04 11:08:43,710] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:08:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:08:43,710] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:08:43,711] INFO: Server is approved and ready to process commands
[2025-06-04 11:08:43,712] INFO: Fetching commands...
[2025-06-04 11:08:43,712] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:08:43,713] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:08:45,774] DEBUG: Response status code: 200
[2025-06-04 11:08:45,775] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:08:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:08:45,776] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:08:45,777] DEBUG: No pending commands found
[2025-06-04 11:09:17,831] DEBUG: Checking approval status for server 8
[2025-06-04 11:09:17,831] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:09:19,933] DEBUG: Response status code: 200
[2025-06-04 11:09:19,933] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:09:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:09:19,934] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:09:19,934] INFO: Server is approved and ready to process commands
[2025-06-04 11:09:19,935] INFO: Fetching commands...
[2025-06-04 11:09:19,935] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:09:19,936] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:09:21,986] DEBUG: Response status code: 200
[2025-06-04 11:09:21,987] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:09:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:09:21,987] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:09:21,988] DEBUG: No pending commands found
[2025-06-04 11:09:55,304] DEBUG: Checking approval status for server 8
[2025-06-04 11:09:55,304] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:09:57,383] DEBUG: Response status code: 200
[2025-06-04 11:09:57,384] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:09:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:09:57,384] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:09:57,384] INFO: Server is approved and ready to process commands
[2025-06-04 11:09:57,385] INFO: Fetching commands...
[2025-06-04 11:09:57,386] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:09:57,386] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:09:59,452] DEBUG: Response status code: 200
[2025-06-04 11:09:59,453] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:09:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:09:59,453] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:09:59,453] DEBUG: No pending commands found
[2025-06-04 11:10:31,524] DEBUG: Checking approval status for server 8
[2025-06-04 11:10:31,524] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:10:33,588] DEBUG: Response status code: 200
[2025-06-04 11:10:33,589] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:10:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:10:33,589] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:10:33,590] INFO: Server is approved and ready to process commands
[2025-06-04 11:10:33,590] INFO: Fetching commands...
[2025-06-04 11:10:33,590] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:10:33,591] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:10:35,647] DEBUG: Response status code: 200
[2025-06-04 11:10:35,647] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:10:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:10:35,648] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:10:35,648] DEBUG: No pending commands found
[2025-06-04 11:21:18,422] DEBUG: Checking approval status for server 8
[2025-06-04 11:21:18,423] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:21:20,505] DEBUG: Response status code: 200
[2025-06-04 11:21:20,506] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:21:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:21:20,507] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:21:20,507] INFO: Server is approved and ready to process commands
[2025-06-04 11:21:20,507] INFO: Fetching commands...
[2025-06-04 11:21:20,507] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:21:20,507] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:21:22,553] DEBUG: Response status code: 200
[2025-06-04 11:21:22,553] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:21:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:21:22,554] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:21:22,554] DEBUG: No pending commands found
[2025-06-04 11:21:54,601] DEBUG: Checking approval status for server 8
[2025-06-04 11:21:54,601] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:21:56,641] DEBUG: Response status code: 200
[2025-06-04 11:21:56,642] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:21:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 11:21:56,642] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 11:21:56,643] INFO: Server is approved and ready to process commands
[2025-06-04 11:21:56,643] INFO: Fetching commands...
[2025-06-04 11:21:56,644] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 11:21:56,645] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:21:58,709] DEBUG: Response status code: 200
[2025-06-04 11:21:58,710] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:21:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '21', 'Connection': 'close'}
[2025-06-04 11:21:58,710] DEBUG: Response data: {
  "commands": []
}
[2025-06-04 11:21:58,711] DEBUG: No pending commands found
[2025-06-04 11:22:30,758] DEBUG: Checking approval status for server 8
[2025-06-04 11:22:30,758] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:22:32,801] DEBUG: Response status code: 500
[2025-06-04 11:22:32,801] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:22:32 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '16546', 'Connection': 'close'}
[2025-06-04 11:22:32,802] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Ej9D9GjGFKUhEhXcr8b0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-3060099475792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060099477232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-3060099477376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-3060099477520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 21, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 12, in <module>
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name 'csrf_exempt' from 'flask_wtf.csrf' (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)



-->

[2025-06-04 11:22:32,803] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Ej9D9GjGFKUhEhXcr8b0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-3060099475792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060099477232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-3060099477376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-3060099477520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 21, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 12, in <module>
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name 'csrf_exempt' from 'flask_wtf.csrf' (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)



-->

[2025-06-04 11:22:32,804] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 11:23:32,804] DEBUG: Checking approval status for server 8
[2025-06-04 11:23:32,804] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 11:23:34,855] DEBUG: Response status code: 500
[2025-06-04 11:23:34,855] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 08:23:34 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '28243', 'Connection': 'close'}
[2025-06-04 11:23:34,857] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Ej9D9GjGFKUhEhXcr8b0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-3060100220960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100220528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-3060100221104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100221248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-3060100221392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100221536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-3060100221680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100221824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-3060100221968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-3060100222112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 21, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 12, in <module>
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name 'csrf_exempt' from 'flask_wtf.csrf' (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)



-->

[2025-06-04 11:23:34,858] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Ej9D9GjGFKUhEhXcr8b0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoAppException</h1>
<div class="detail">
  <p class="errormsg">flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-3060100220960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100220528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-3060100221104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100221248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-3060100221392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100221536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py"</cite>,
      line <em class="line">343</em>,
      in <code class="function">debug_application</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if self.evalex:</pre>
<pre class="line before"><span class="ws">            </span>environ[&#34;werkzeug.debug.preserve_context&#34;] = contexts.append</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>app_iter = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>app_iter = self.app(environ, start_response)
<span class="ws">            </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>yield from app_iter</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre>
<pre class="line after"><span class="ws">                </span>app_iter.close()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app_iter, &#34;close&#34;):</pre></div>
</div>

<li><div class="frame" id="frame-3060100221680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">974</em>,
      in <code class="function">app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>err = e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def app(</pre>
<pre class="line before"><span class="ws">                </span>environ: WSGIEnvironment, start_response: StartResponse</pre>
<pre class="line before"><span class="ws">            </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line current"><span class="ws">                </span>raise err from None
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># When not reloading, raise the error immediately so the</pre>
<pre class="line after"><span class="ws">            </span># command fails.</pre>
<pre class="line after"><span class="ws">            </span>raise e from None</pre></div>
</div>

<li><div class="frame" id="frame-3060100221824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">963</em>,
      in <code class="function">run_command</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>The reloader and debugger are enabled by default with the &#39;--debug&#39;</pre>
<pre class="line before"><span class="ws">    </span>option.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>app: WSGIApplication = info.load_app()  # pyright: ignore
<span class="ws">        </span>                       ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">        </span>if is_running_from_reloader():</pre>
<pre class="line after"><span class="ws">            </span># When reloading, print out the error immediately, but raise</pre>
<pre class="line after"><span class="ws">            </span># it later so the debugger or server can handle it.</pre>
<pre class="line after"><span class="ws">            </span>traceback.print_exc()</pre></div>
</div>

<li><div class="frame" id="frame-3060100221968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">load_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if self.app_import_path:</pre>
<pre class="line before"><span class="ws">                </span>path, name = (</pre>
<pre class="line before"><span class="ws">                    </span>re.split(r&#34;:(?![\\/])&#34;, self.app_import_path, maxsplit=1) + [None]</pre>
<pre class="line before"><span class="ws">                </span>)[:2]</pre>
<pre class="line before"><span class="ws">                </span>import_name = prepare_import(path)</pre>
<pre class="line current"><span class="ws">                </span>app = locate_app(import_name, name)
<span class="ws">                </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>for path in (&#34;wsgi.py&#34;, &#34;app.py&#34;):</pre>
<pre class="line after"><span class="ws">                    </span>import_name = prepare_import(path)</pre>
<pre class="line after"><span class="ws">                    </span>app = locate_app(import_name, None, raise_if_not_found=False)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-3060100222112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py"</cite>,
      line <em class="line">250</em>,
      in <code class="function">locate_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>__import__(module_name)</pre>
<pre class="line before"><span class="ws">    </span>except ImportError:</pre>
<pre class="line before"><span class="ws">        </span># Reraise the ImportError if it occurred within the imported module.</pre>
<pre class="line before"><span class="ws">        </span># Determine this by checking whether the trace has a depth &gt; 1.</pre>
<pre class="line before"><span class="ws">        </span>if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]</pre>
<pre class="line current"><span class="ws">            </span>raise NoAppException(
<span class="ws">            </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>f&#34;While importing {module_name!r}, an ImportError was&#34;</pre>
<pre class="line after"><span class="ws">                </span>f&#34; raised:\n\n{traceback.format_exc()}&#34;</pre>
<pre class="line after"><span class="ws">            </span>) from None</pre>
<pre class="line after"><span class="ws">        </span>elif raise_if_not_found:</pre>
<pre class="line after"><span class="ws">            </span>raise NoAppException(f&#34;Could not import {module_name!r}.&#34;) from None</pre></div>
</div>
</ul>
  <blockquote>flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py&#34;, line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 974, in app
    raise err from None
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing &#39;run&#39;, an ImportError was raised:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py&#34;, line 245, in locate_app
    __import__(module_name)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py&#34;, line 11, in &lt;module&gt;
    from apps.config import config_dict
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py&#34;, line 21, in &lt;module&gt;
    from apps.server_profiles.routes import server_profiles
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py&#34;, line 12, in &lt;module&gt;
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name &#39;csrf_exempt&#39; from &#39;flask_wtf.csrf&#39; (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\werkzeug\debug\__init__.py", line 343, in debug_application
    app_iter = self.app(environ, start_response)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 974, in app
    raise err from None
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 963, in run_command
    app: WSGIApplication = info.load_app()  # pyright: ignore
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 349, in load_app
    app = locate_app(import_name, name)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 250, in locate_app
    raise NoAppException(
flask.cli.NoAppException: While importing 'run', an ImportError was raised:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\cli.py", line 245, in locate_app
    __import__(module_name)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\run.py", line 11, in <module>
    from apps.config import config_dict
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\__init__.py", line 21, in <module>
    from apps.server_profiles.routes import server_profiles
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\server_profiles\routes.py", line 12, in <module>
    from flask_wtf.csrf import csrf_exempt
ImportError: cannot import name 'csrf_exempt' from 'flask_wtf.csrf' (C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask_wtf\csrf.py)



-->

[2025-06-04 11:23:34,858] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 13:38:58,989] DEBUG: Checking approval status for server 8
[2025-06-04 13:38:58,990] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:39:01,096] DEBUG: Response status code: 200
[2025-06-04 13:39:01,096] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:39:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 13:39:01,097] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 13:39:01,098] INFO: Server is approved and ready to process commands
[2025-06-04 13:39:01,098] INFO: Fetching commands...
[2025-06-04 13:39:01,099] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 13:39:01,099] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:39:03,158] DEBUG: Response status code: 200
[2025-06-04 13:39:03,159] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:39:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 13:39:03,160] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 13:39:03,161] INFO: Commands: []
[2025-06-04 13:39:25,209] DEBUG: Checking approval status for server 8
[2025-06-04 13:39:25,210] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:39:27,275] DEBUG: Response status code: 200
[2025-06-04 13:39:27,275] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:39:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 13:39:27,276] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 13:39:27,276] INFO: Server is approved and ready to process commands
[2025-06-04 13:39:27,277] INFO: Fetching commands...
[2025-06-04 13:39:27,278] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 13:39:27,278] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:39:29,325] DEBUG: Response status code: 200
[2025-06-04 13:39:29,325] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:39:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 13:39:29,326] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 13:39:29,327] INFO: Commands: []
[2025-06-04 13:39:51,379] DEBUG: Checking approval status for server 8
[2025-06-04 13:39:51,379] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:39:53,451] DEBUG: Response status code: 200
[2025-06-04 13:39:53,451] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:39:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 13:39:53,452] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 13:39:53,453] INFO: Server is approved and ready to process commands
[2025-06-04 13:39:53,454] INFO: Fetching commands...
[2025-06-04 13:39:53,455] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 13:39:53,456] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:39:55,508] DEBUG: Response status code: 200
[2025-06-04 13:39:55,509] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:39:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 13:39:55,511] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 13:39:55,512] INFO: Commands: []
[2025-06-04 13:40:17,584] DEBUG: Checking approval status for server 8
[2025-06-04 13:40:17,585] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:40:19,628] DEBUG: Response status code: 200
[2025-06-04 13:40:19,628] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:40:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 13:40:19,628] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 13:40:19,629] INFO: Server is approved and ready to process commands
[2025-06-04 13:40:19,629] INFO: Fetching commands...
[2025-06-04 13:40:19,630] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 13:40:19,630] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:40:21,681] DEBUG: Response status code: 200
[2025-06-04 13:40:21,682] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:40:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 13:40:21,682] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 13:40:21,684] INFO: Commands: []
[2025-06-04 13:40:43,721] DEBUG: Checking approval status for server 8
[2025-06-04 13:40:43,721] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:40:45,770] DEBUG: Response status code: 200
[2025-06-04 13:40:45,771] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:40:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 13:40:45,771] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 13:40:45,772] INFO: Server is approved and ready to process commands
[2025-06-04 13:40:45,772] INFO: Fetching commands...
[2025-06-04 13:40:45,773] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 13:40:45,774] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 13:40:47,824] DEBUG: Response status code: 200
[2025-06-04 13:40:47,826] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 10:40:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 13:40:47,828] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 13:40:47,830] INFO: Commands: []
[2025-06-04 15:21:47,089] DEBUG: Checking approval status for server 8
[2025-06-04 15:21:47,090] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:21:49,175] DEBUG: Response status code: 200
[2025-06-04 15:21:49,175] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:21:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:21:49,176] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:21:49,177] INFO: Server is approved and ready to process commands
[2025-06-04 15:21:49,177] INFO: Fetching commands...
[2025-06-04 15:21:49,178] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:21:49,179] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:21:51,228] DEBUG: Response status code: 200
[2025-06-04 15:21:51,229] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:21:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:21:51,230] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:21:51,231] INFO: Commands: []
[2025-06-04 15:22:14,306] DEBUG: Checking approval status for server 8
[2025-06-04 15:22:14,309] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:22:16,455] DEBUG: Response status code: 200
[2025-06-04 15:22:16,456] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:22:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:22:16,460] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:22:16,461] INFO: Server is approved and ready to process commands
[2025-06-04 15:22:16,465] INFO: Fetching commands...
[2025-06-04 15:22:16,466] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:22:16,466] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:22:18,524] DEBUG: Response status code: 200
[2025-06-04 15:22:18,539] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:22:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:22:18,711] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:22:18,726] INFO: Commands: []
[2025-06-04 15:22:41,870] DEBUG: Checking approval status for server 8
[2025-06-04 15:22:41,871] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:22:43,932] DEBUG: Response status code: 200
[2025-06-04 15:22:43,933] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:22:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:22:43,936] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:22:43,937] INFO: Server is approved and ready to process commands
[2025-06-04 15:22:43,937] INFO: Fetching commands...
[2025-06-04 15:22:43,937] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:22:43,938] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:22:45,993] DEBUG: Response status code: 200
[2025-06-04 15:22:45,994] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:22:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:22:45,995] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:22:45,996] INFO: Commands: []
[2025-06-04 15:23:09,035] DEBUG: Checking approval status for server 8
[2025-06-04 15:23:09,035] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:23:11,147] DEBUG: Response status code: 200
[2025-06-04 15:23:11,151] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:23:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:23:11,156] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:23:11,160] INFO: Server is approved and ready to process commands
[2025-06-04 15:23:11,160] INFO: Fetching commands...
[2025-06-04 15:23:11,166] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:23:11,167] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:23:13,211] DEBUG: Response status code: 200
[2025-06-04 15:23:13,215] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:23:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:23:13,230] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:23:13,242] INFO: Commands: []
[2025-06-04 15:23:36,314] DEBUG: Checking approval status for server 8
[2025-06-04 15:23:36,315] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:23:38,414] DEBUG: Response status code: 200
[2025-06-04 15:23:38,415] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:23:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:23:38,417] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:23:38,418] INFO: Server is approved and ready to process commands
[2025-06-04 15:23:38,419] INFO: Fetching commands...
[2025-06-04 15:23:38,420] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:23:38,420] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:23:40,506] DEBUG: Response status code: 200
[2025-06-04 15:23:40,508] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:23:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:23:40,512] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:23:40,518] INFO: Commands: []
[2025-06-04 15:24:03,585] DEBUG: Checking approval status for server 8
[2025-06-04 15:24:03,585] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:24:05,625] DEBUG: Response status code: 200
[2025-06-04 15:24:05,626] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:24:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:24:05,627] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:24:05,627] INFO: Server is approved and ready to process commands
[2025-06-04 15:24:05,629] INFO: Fetching commands...
[2025-06-04 15:24:05,629] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:24:05,629] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:24:07,686] DEBUG: Response status code: 200
[2025-06-04 15:24:07,687] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:24:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:24:07,687] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:24:07,689] INFO: Commands: []
[2025-06-04 15:24:30,730] DEBUG: Checking approval status for server 8
[2025-06-04 15:24:30,730] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:24:32,774] DEBUG: Response status code: 200
[2025-06-04 15:24:32,775] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:24:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:24:32,778] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:24:32,778] INFO: Server is approved and ready to process commands
[2025-06-04 15:24:32,778] INFO: Fetching commands...
[2025-06-04 15:24:32,778] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:24:32,778] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:24:34,821] DEBUG: Response status code: 200
[2025-06-04 15:24:34,823] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:24:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:24:34,825] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:24:34,826] INFO: Commands: []
[2025-06-04 15:24:57,877] DEBUG: Checking approval status for server 8
[2025-06-04 15:24:57,879] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:25:00,001] DEBUG: Response status code: 200
[2025-06-04 15:25:00,002] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:24:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:25:00,004] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:25:00,004] INFO: Server is approved and ready to process commands
[2025-06-04 15:25:00,005] INFO: Fetching commands...
[2025-06-04 15:25:00,006] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:25:00,020] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:25:02,143] DEBUG: Response status code: 200
[2025-06-04 15:25:02,147] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:25:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:25:02,154] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:25:02,155] INFO: Commands: []
[2025-06-04 15:25:25,218] DEBUG: Checking approval status for server 8
[2025-06-04 15:25:25,219] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:25:27,273] DEBUG: Response status code: 200
[2025-06-04 15:25:27,275] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:25:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:25:27,278] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:25:27,278] INFO: Server is approved and ready to process commands
[2025-06-04 15:25:27,279] INFO: Fetching commands...
[2025-06-04 15:25:27,279] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:25:27,279] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:25:29,375] DEBUG: Response status code: 200
[2025-06-04 15:25:29,375] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:25:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:25:29,376] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:25:29,378] INFO: Commands: []
[2025-06-04 15:25:52,432] DEBUG: Checking approval status for server 8
[2025-06-04 15:25:52,433] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:25:54,533] DEBUG: Response status code: 200
[2025-06-04 15:25:54,535] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:25:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:25:54,537] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:25:54,537] INFO: Server is approved and ready to process commands
[2025-06-04 15:25:54,541] INFO: Fetching commands...
[2025-06-04 15:25:54,541] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:25:54,541] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:25:56,623] DEBUG: Response status code: 200
[2025-06-04 15:25:56,624] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:25:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:25:56,626] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:25:56,631] INFO: Commands: []
[2025-06-04 15:26:19,705] DEBUG: Checking approval status for server 8
[2025-06-04 15:26:19,705] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:26:21,784] DEBUG: Response status code: 200
[2025-06-04 15:26:21,785] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:26:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:26:21,789] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:26:21,790] INFO: Server is approved and ready to process commands
[2025-06-04 15:26:21,792] INFO: Fetching commands...
[2025-06-04 15:26:21,794] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:26:21,795] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:26:23,867] DEBUG: Response status code: 200
[2025-06-04 15:26:23,872] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:26:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:26:23,895] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:26:23,903] INFO: Commands: []
[2025-06-04 15:26:46,963] DEBUG: Checking approval status for server 8
[2025-06-04 15:26:46,969] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:26:49,041] DEBUG: Response status code: 200
[2025-06-04 15:26:49,042] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:26:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:26:49,045] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:26:49,046] INFO: Server is approved and ready to process commands
[2025-06-04 15:26:49,047] INFO: Fetching commands...
[2025-06-04 15:26:49,049] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:26:49,050] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:26:51,102] DEBUG: Response status code: 200
[2025-06-04 15:26:51,105] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:26:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:26:51,106] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:26:51,109] INFO: Commands: []
[2025-06-04 15:27:14,170] DEBUG: Checking approval status for server 8
[2025-06-04 15:27:14,170] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:27:16,265] DEBUG: Response status code: 200
[2025-06-04 15:27:16,266] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:27:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:27:16,267] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:27:16,268] INFO: Server is approved and ready to process commands
[2025-06-04 15:27:16,268] INFO: Fetching commands...
[2025-06-04 15:27:16,270] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:27:16,270] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:27:18,344] DEBUG: Response status code: 200
[2025-06-04 15:27:18,345] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:27:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:27:18,351] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:27:18,353] INFO: Commands: []
[2025-06-04 15:27:41,425] DEBUG: Checking approval status for server 8
[2025-06-04 15:27:41,427] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:27:43,570] DEBUG: Response status code: 200
[2025-06-04 15:27:43,571] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:27:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:27:43,572] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:27:43,573] INFO: Server is approved and ready to process commands
[2025-06-04 15:27:43,576] INFO: Fetching commands...
[2025-06-04 15:27:43,578] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:27:43,578] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:27:45,720] DEBUG: Response status code: 200
[2025-06-04 15:27:46,093] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:27:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:27:46,752] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:27:47,001] INFO: Commands: []
[2025-06-04 15:28:10,171] DEBUG: Checking approval status for server 8
[2025-06-04 15:28:10,175] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:28:12,235] DEBUG: Response status code: 200
[2025-06-04 15:28:12,239] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:28:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:28:12,258] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:28:12,259] INFO: Server is approved and ready to process commands
[2025-06-04 15:28:12,269] INFO: Fetching commands...
[2025-06-04 15:28:12,277] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:28:12,279] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:28:14,322] DEBUG: Response status code: 200
[2025-06-04 15:28:14,324] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:28:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:28:14,330] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:28:14,338] INFO: Commands: []
[2025-06-04 15:28:37,397] DEBUG: Checking approval status for server 8
[2025-06-04 15:28:37,399] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:28:39,475] DEBUG: Response status code: 200
[2025-06-04 15:28:39,476] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:28:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:28:39,477] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:28:39,477] INFO: Server is approved and ready to process commands
[2025-06-04 15:28:39,477] INFO: Fetching commands...
[2025-06-04 15:28:39,477] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:28:39,479] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:28:41,560] DEBUG: Response status code: 200
[2025-06-04 15:28:41,563] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:28:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:28:41,568] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:28:41,575] INFO: Commands: []
[2025-06-04 15:29:04,604] DEBUG: Checking approval status for server 8
[2025-06-04 15:29:04,605] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:29:06,656] DEBUG: Response status code: 200
[2025-06-04 15:29:06,656] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:29:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:29:06,657] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:29:06,657] INFO: Server is approved and ready to process commands
[2025-06-04 15:29:06,658] INFO: Fetching commands...
[2025-06-04 15:29:06,659] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:29:06,660] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:29:08,740] DEBUG: Response status code: 200
[2025-06-04 15:29:08,740] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:29:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:29:08,743] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:29:08,744] INFO: Commands: []
[2025-06-04 15:29:31,866] DEBUG: Checking approval status for server 8
[2025-06-04 15:29:31,867] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:29:33,952] DEBUG: Response status code: 200
[2025-06-04 15:29:33,953] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:29:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:29:33,954] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:29:33,956] INFO: Server is approved and ready to process commands
[2025-06-04 15:29:33,959] INFO: Fetching commands...
[2025-06-04 15:29:33,960] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:29:33,960] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:29:36,877] DEBUG: Response status code: 200
[2025-06-04 15:29:36,901] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:29:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:29:36,913] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:29:36,962] INFO: Commands: []
[2025-06-04 15:30:00,193] DEBUG: Checking approval status for server 8
[2025-06-04 15:30:00,228] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:30:02,341] DEBUG: Response status code: 200
[2025-06-04 15:30:02,342] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:30:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:30:02,385] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:30:02,398] INFO: Server is approved and ready to process commands
[2025-06-04 15:30:02,403] INFO: Fetching commands...
[2025-06-04 15:30:02,406] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:30:02,409] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:30:04,531] DEBUG: Response status code: 200
[2025-06-04 15:30:04,532] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:30:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:30:04,532] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:30:04,536] INFO: Commands: []
[2025-06-04 15:30:27,596] DEBUG: Checking approval status for server 8
[2025-06-04 15:30:27,604] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:30:29,706] DEBUG: Response status code: 200
[2025-06-04 15:30:29,707] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:30:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:30:29,712] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:30:29,713] INFO: Server is approved and ready to process commands
[2025-06-04 15:30:29,714] INFO: Fetching commands...
[2025-06-04 15:30:29,743] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:30:29,772] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:30:31,879] DEBUG: Response status code: 200
[2025-06-04 15:30:31,880] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:30:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:30:31,883] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:30:31,904] INFO: Commands: []
[2025-06-04 15:30:54,977] DEBUG: Checking approval status for server 8
[2025-06-04 15:30:54,978] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:30:57,136] DEBUG: Response status code: 200
[2025-06-04 15:30:57,141] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:30:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:30:57,143] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:30:57,151] INFO: Server is approved and ready to process commands
[2025-06-04 15:30:57,154] INFO: Fetching commands...
[2025-06-04 15:30:57,157] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:30:57,158] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:30:59,223] DEBUG: Response status code: 200
[2025-06-04 15:30:59,224] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:30:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:30:59,226] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:30:59,228] INFO: Commands: []
[2025-06-04 15:31:22,302] DEBUG: Checking approval status for server 8
[2025-06-04 15:31:22,319] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:31:24,639] DEBUG: Response status code: 200
[2025-06-04 15:31:24,652] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:31:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:31:24,670] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:31:24,679] INFO: Server is approved and ready to process commands
[2025-06-04 15:31:24,686] INFO: Fetching commands...
[2025-06-04 15:31:24,692] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:31:24,696] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:31:26,773] DEBUG: Response status code: 200
[2025-06-04 15:31:26,774] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:31:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:31:26,785] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:31:26,817] INFO: Commands: []
[2025-06-04 15:31:49,914] DEBUG: Checking approval status for server 8
[2025-06-04 15:31:49,916] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:31:52,572] DEBUG: Response status code: 200
[2025-06-04 15:31:52,726] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:31:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:31:52,775] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:31:52,914] INFO: Server is approved and ready to process commands
[2025-06-04 15:31:53,012] INFO: Fetching commands...
[2025-06-04 15:31:53,136] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:31:53,267] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:31:55,500] DEBUG: Response status code: 200
[2025-06-04 15:31:55,502] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:31:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '145', 'Connection': 'close'}
[2025-06-04 15:31:55,563] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "10",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 15:31:55,569] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '10', 'id': None}]
[2025-06-04 15:31:57,694] INFO: Running command: dir (admin=True)
[2025-06-04 15:32:00,235] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                                                                                            \n----                 -------------         ------ ----                                                                                                                            \nda---l          6/3/2025   5:43 AM                nssm                                                                                                                            \nda---l          6/3/2025   5:43 PM                __pycache__                                                                                                                     \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                                                                                            \n-a---l          6/4/2025  12:04 PM          15075 client.py                                                                                                                       \n-a----          6/4/2025   3:31 PM            139 client_config.json                                                                                                              \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                                                                                         \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                                                                                      \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                                                                                   \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                                                                                        \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                                                                                            \n\n\n', 'error': '', 'duration': 2.4883835315704346, 'returncode': 0}
[2025-06-04 15:32:02,559] INFO: Result for command None sent successfully
[2025-06-04 15:32:23,570] DEBUG: Checking approval status for server 8
[2025-06-04 15:32:23,576] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:32:25,703] DEBUG: Response status code: 200
[2025-06-04 15:32:25,703] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:32:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:32:25,710] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:32:25,712] INFO: Server is approved and ready to process commands
[2025-06-04 15:32:25,713] INFO: Fetching commands...
[2025-06-04 15:32:25,714] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:32:25,715] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:32:27,864] DEBUG: Response status code: 200
[2025-06-04 15:32:27,865] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:32:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:32:27,873] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:32:27,900] INFO: Commands: []
[2025-06-04 15:32:51,249] DEBUG: Checking approval status for server 8
[2025-06-04 15:32:51,427] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:32:53,727] DEBUG: Response status code: 200
[2025-06-04 15:32:53,733] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:32:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:32:53,771] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:32:53,773] INFO: Server is approved and ready to process commands
[2025-06-04 15:32:53,774] INFO: Fetching commands...
[2025-06-04 15:32:53,788] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:32:53,800] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:32:55,951] DEBUG: Response status code: 200
[2025-06-04 15:32:55,952] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:32:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:32:55,957] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:32:55,959] INFO: Commands: []
[2025-06-04 15:33:19,457] DEBUG: Checking approval status for server 8
[2025-06-04 15:33:19,507] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:33:21,959] DEBUG: Response status code: 200
[2025-06-04 15:33:21,979] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:33:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:33:22,179] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:33:22,193] INFO: Server is approved and ready to process commands
[2025-06-04 15:33:22,204] INFO: Fetching commands...
[2025-06-04 15:33:22,219] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:33:22,229] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:33:24,340] DEBUG: Response status code: 200
[2025-06-04 15:33:24,341] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:33:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:33:24,367] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:33:24,434] INFO: Commands: []
[2025-06-04 15:33:47,505] DEBUG: Checking approval status for server 8
[2025-06-04 15:33:47,506] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:33:49,600] DEBUG: Response status code: 200
[2025-06-04 15:33:49,602] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:33:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:33:49,607] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:33:49,607] INFO: Server is approved and ready to process commands
[2025-06-04 15:33:49,607] INFO: Fetching commands...
[2025-06-04 15:33:49,609] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:33:49,610] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:33:51,689] DEBUG: Response status code: 200
[2025-06-04 15:33:51,691] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:33:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:33:51,692] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:33:51,695] INFO: Commands: []
[2025-06-04 15:34:14,759] DEBUG: Checking approval status for server 8
[2025-06-04 15:34:14,761] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:34:16,832] DEBUG: Response status code: 200
[2025-06-04 15:34:16,833] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:34:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:34:16,838] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:34:16,839] INFO: Server is approved and ready to process commands
[2025-06-04 15:34:16,840] INFO: Fetching commands...
[2025-06-04 15:34:16,847] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:34:16,847] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:34:18,919] DEBUG: Response status code: 200
[2025-06-04 15:34:18,920] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:34:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:34:18,926] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:34:18,929] INFO: Commands: []
[2025-06-04 15:34:43,260] DEBUG: Checking approval status for server 8
[2025-06-04 15:34:43,291] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:34:45,414] DEBUG: Response status code: 200
[2025-06-04 15:34:45,420] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:34:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:34:45,423] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:34:45,425] INFO: Server is approved and ready to process commands
[2025-06-04 15:34:45,427] INFO: Fetching commands...
[2025-06-04 15:34:45,428] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:34:45,429] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:34:47,624] DEBUG: Response status code: 200
[2025-06-04 15:34:47,642] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:34:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:34:47,650] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:34:47,656] INFO: Commands: []
[2025-06-04 15:35:22,928] DEBUG: Checking approval status for server 8
[2025-06-04 15:35:22,928] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:35:25,065] DEBUG: Response status code: 200
[2025-06-04 15:35:25,066] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:35:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:35:25,067] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:35:25,067] INFO: Server is approved and ready to process commands
[2025-06-04 15:35:25,067] INFO: Fetching commands...
[2025-06-04 15:35:25,068] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:35:25,069] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:35:27,602] DEBUG: Response status code: 200
[2025-06-04 15:35:27,603] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:35:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:35:27,604] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:35:27,606] INFO: Commands: []
[2025-06-04 15:35:50,686] DEBUG: Checking approval status for server 8
[2025-06-04 15:35:50,686] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:40:48,226] DEBUG: Response status code: 200
[2025-06-04 15:40:48,227] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:40:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:40:48,228] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:40:48,228] INFO: Server is approved and ready to process commands
[2025-06-04 15:40:48,228] INFO: Fetching commands...
[2025-06-04 15:40:48,229] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:40:48,229] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:40:50,503] DEBUG: Response status code: 200
[2025-06-04 15:40:50,503] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:40:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:40:50,504] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:40:50,505] INFO: Commands: []
[2025-06-04 15:41:14,292] DEBUG: Checking approval status for server 8
[2025-06-04 15:41:14,293] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:41:16,338] DEBUG: Response status code: 200
[2025-06-04 15:41:16,339] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:41:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:41:16,340] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:41:16,341] INFO: Server is approved and ready to process commands
[2025-06-04 15:41:16,342] INFO: Fetching commands...
[2025-06-04 15:41:16,343] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:41:16,344] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:41:18,396] DEBUG: Response status code: 200
[2025-06-04 15:41:18,397] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:41:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:41:18,400] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:41:18,402] INFO: Commands: []
[2025-06-04 15:41:41,447] DEBUG: Checking approval status for server 8
[2025-06-04 15:41:41,447] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:41:43,484] DEBUG: Response status code: 200
[2025-06-04 15:41:43,485] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:41:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:41:43,486] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:41:43,487] INFO: Server is approved and ready to process commands
[2025-06-04 15:41:43,489] INFO: Fetching commands...
[2025-06-04 15:41:43,489] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:41:43,491] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:41:45,532] DEBUG: Response status code: 200
[2025-06-04 15:41:45,532] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:41:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:41:45,534] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:41:45,535] INFO: Commands: []
[2025-06-04 15:42:08,584] DEBUG: Checking approval status for server 8
[2025-06-04 15:42:08,585] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:42:10,655] DEBUG: Response status code: 200
[2025-06-04 15:42:10,655] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:42:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:42:10,657] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:42:10,658] INFO: Server is approved and ready to process commands
[2025-06-04 15:42:10,660] INFO: Fetching commands...
[2025-06-04 15:42:10,661] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:42:10,662] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:42:12,719] DEBUG: Response status code: 200
[2025-06-04 15:42:12,719] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:42:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:42:12,721] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:42:12,723] INFO: Commands: []
[2025-06-04 15:42:35,800] DEBUG: Checking approval status for server 8
[2025-06-04 15:42:35,801] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:42:37,888] DEBUG: Response status code: 200
[2025-06-04 15:42:37,893] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:42:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:42:37,904] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:42:37,904] INFO: Server is approved and ready to process commands
[2025-06-04 15:42:37,908] INFO: Fetching commands...
[2025-06-04 15:42:37,910] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:42:37,912] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:42:39,997] DEBUG: Response status code: 200
[2025-06-04 15:42:40,001] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:42:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:42:40,027] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:42:40,153] INFO: Commands: []
[2025-06-04 15:43:03,225] DEBUG: Checking approval status for server 8
[2025-06-04 15:43:03,226] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:43:05,270] DEBUG: Response status code: 200
[2025-06-04 15:43:05,272] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:43:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 15:43:05,274] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 15:43:05,274] INFO: Server is approved and ready to process commands
[2025-06-04 15:43:05,277] INFO: Fetching commands...
[2025-06-04 15:43:05,278] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 15:43:05,280] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 15:43:07,354] DEBUG: Response status code: 200
[2025-06-04 15:43:07,359] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 12:43:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 15:43:07,364] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 15:43:07,367] INFO: Commands: []
[2025-06-04 16:16:06,159] DEBUG: Checking approval status for server 8
[2025-06-04 16:16:06,160] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:16:08,223] DEBUG: Response status code: 200
[2025-06-04 16:16:08,224] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:16:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:16:08,227] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:16:08,229] INFO: Server is approved and ready to process commands
[2025-06-04 16:16:08,232] INFO: Fetching commands...
[2025-06-04 16:16:08,234] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:16:08,237] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:16:10,282] DEBUG: Response status code: 200
[2025-06-04 16:16:10,283] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:16:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:16:10,284] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:16:10,286] INFO: Commands: []
[2025-06-04 16:16:33,343] DEBUG: Checking approval status for server 8
[2025-06-04 16:16:33,343] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:16:35,383] DEBUG: Response status code: 200
[2025-06-04 16:16:35,383] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:16:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:16:35,384] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:16:35,384] INFO: Server is approved and ready to process commands
[2025-06-04 16:16:35,386] INFO: Fetching commands...
[2025-06-04 16:16:35,386] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:16:35,387] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:16:37,439] DEBUG: Response status code: 200
[2025-06-04 16:16:37,439] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:16:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:16:37,440] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:16:37,441] INFO: Commands: []
[2025-06-04 16:17:00,488] DEBUG: Checking approval status for server 8
[2025-06-04 16:17:00,488] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:17:02,519] DEBUG: Response status code: 200
[2025-06-04 16:17:02,521] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:17:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:17:02,527] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:17:02,529] INFO: Server is approved and ready to process commands
[2025-06-04 16:17:02,533] INFO: Fetching commands...
[2025-06-04 16:17:02,537] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:17:02,540] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:17:04,582] DEBUG: Response status code: 200
[2025-06-04 16:17:04,582] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:17:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:17:04,583] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:17:04,587] INFO: Commands: []
[2025-06-04 16:17:27,650] DEBUG: Checking approval status for server 8
[2025-06-04 16:17:27,651] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:17:29,701] DEBUG: Response status code: 200
[2025-06-04 16:17:29,702] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:17:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:17:29,703] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:17:29,703] INFO: Server is approved and ready to process commands
[2025-06-04 16:17:29,704] INFO: Fetching commands...
[2025-06-04 16:17:29,705] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:17:29,705] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:17:31,757] DEBUG: Response status code: 200
[2025-06-04 16:17:31,758] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:17:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:17:31,758] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:17:31,760] INFO: Commands: []
[2025-06-04 16:17:54,810] DEBUG: Checking approval status for server 8
[2025-06-04 16:17:54,810] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:17:56,860] DEBUG: Response status code: 200
[2025-06-04 16:17:56,860] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:17:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:17:56,861] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:17:56,862] INFO: Server is approved and ready to process commands
[2025-06-04 16:17:56,863] INFO: Fetching commands...
[2025-06-04 16:17:56,863] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:17:56,864] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:17:58,933] DEBUG: Response status code: 200
[2025-06-04 16:17:58,933] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:17:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:17:58,935] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:17:58,937] INFO: Commands: []
[2025-06-04 16:18:21,997] DEBUG: Checking approval status for server 8
[2025-06-04 16:18:21,998] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:18:24,068] DEBUG: Response status code: 200
[2025-06-04 16:18:24,069] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:18:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:18:24,072] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:18:24,073] INFO: Server is approved and ready to process commands
[2025-06-04 16:18:24,076] INFO: Fetching commands...
[2025-06-04 16:18:24,077] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:18:24,077] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:18:26,142] DEBUG: Response status code: 200
[2025-06-04 16:18:26,143] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:18:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:18:26,144] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:18:26,145] INFO: Commands: []
[2025-06-04 16:18:49,213] DEBUG: Checking approval status for server 8
[2025-06-04 16:18:49,214] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:18:51,255] DEBUG: Response status code: 200
[2025-06-04 16:18:51,256] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:18:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:18:51,257] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:18:51,258] INFO: Server is approved and ready to process commands
[2025-06-04 16:18:51,260] INFO: Fetching commands...
[2025-06-04 16:18:51,260] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:18:51,260] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:18:53,321] DEBUG: Response status code: 200
[2025-06-04 16:18:53,322] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:18:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:18:53,323] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:18:53,325] INFO: Commands: []
[2025-06-04 16:19:16,373] DEBUG: Checking approval status for server 8
[2025-06-04 16:19:16,373] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:19:18,414] DEBUG: Response status code: 200
[2025-06-04 16:19:18,414] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:19:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:19:18,415] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:19:18,416] INFO: Server is approved and ready to process commands
[2025-06-04 16:19:18,418] INFO: Fetching commands...
[2025-06-04 16:19:18,419] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:19:18,420] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:19:20,477] DEBUG: Response status code: 200
[2025-06-04 16:19:20,477] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:19:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:19:20,479] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:19:20,480] INFO: Commands: []
[2025-06-04 16:19:43,526] DEBUG: Checking approval status for server 8
[2025-06-04 16:19:43,526] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:19:45,572] DEBUG: Response status code: 200
[2025-06-04 16:19:45,573] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:19:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:19:45,573] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:19:45,574] INFO: Server is approved and ready to process commands
[2025-06-04 16:19:45,574] INFO: Fetching commands...
[2025-06-04 16:19:45,575] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:19:45,575] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:19:47,619] DEBUG: Response status code: 200
[2025-06-04 16:19:47,619] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:19:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:19:47,621] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:19:47,622] INFO: Commands: []
[2025-06-04 16:20:10,667] DEBUG: Checking approval status for server 8
[2025-06-04 16:20:10,668] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:20:12,709] DEBUG: Response status code: 200
[2025-06-04 16:20:12,710] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:20:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:20:12,711] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:20:12,711] INFO: Server is approved and ready to process commands
[2025-06-04 16:20:12,713] INFO: Fetching commands...
[2025-06-04 16:20:12,713] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:20:12,713] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:20:14,759] DEBUG: Response status code: 200
[2025-06-04 16:20:14,760] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:20:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '150', 'Connection': 'close'}
[2025-06-04 16:20:14,765] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "hostname",
      "history_id": "11",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 16:20:14,771] INFO: Commands: [{'as_admin': True, 'command': 'hostname', 'history_id': '11', 'id': None}]
[2025-06-04 16:20:16,813] INFO: Running command: hostname (admin=True)
[2025-06-04 16:20:17,043] INFO: Result: {'success': True, 'output': 'LAP-MOSHEG\n', 'error': '', 'duration': 0.22884130477905273, 'returncode': 0}
[2025-06-04 16:20:19,103] INFO: Result for command None sent successfully
[2025-06-04 16:20:40,104] DEBUG: Checking approval status for server 8
[2025-06-04 16:20:40,105] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:20:42,153] DEBUG: Response status code: 200
[2025-06-04 16:20:42,153] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:20:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:20:42,154] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:20:42,154] INFO: Server is approved and ready to process commands
[2025-06-04 16:20:42,155] INFO: Fetching commands...
[2025-06-04 16:20:42,156] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:20:42,158] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:20:44,201] DEBUG: Response status code: 200
[2025-06-04 16:20:44,202] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:20:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:20:44,204] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:20:44,206] INFO: Commands: []
[2025-06-04 16:21:07,260] DEBUG: Checking approval status for server 8
[2025-06-04 16:21:07,261] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:21:09,299] DEBUG: Response status code: 200
[2025-06-04 16:21:09,300] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:21:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:21:09,300] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:21:09,300] INFO: Server is approved and ready to process commands
[2025-06-04 16:21:09,302] INFO: Fetching commands...
[2025-06-04 16:21:09,302] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:21:09,303] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:21:11,363] DEBUG: Response status code: 200
[2025-06-04 16:21:11,363] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:21:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:21:11,364] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:21:11,365] INFO: Commands: []
[2025-06-04 16:21:34,417] DEBUG: Checking approval status for server 8
[2025-06-04 16:21:34,417] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:21:36,487] DEBUG: Response status code: 200
[2025-06-04 16:21:36,488] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:21:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:21:36,489] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:21:36,490] INFO: Server is approved and ready to process commands
[2025-06-04 16:21:36,491] INFO: Fetching commands...
[2025-06-04 16:21:36,492] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:21:36,496] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:21:38,565] DEBUG: Response status code: 200
[2025-06-04 16:21:38,567] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:21:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:21:38,569] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:21:38,571] INFO: Commands: []
[2025-06-04 16:22:01,614] DEBUG: Checking approval status for server 8
[2025-06-04 16:22:01,615] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:22:03,667] DEBUG: Response status code: 200
[2025-06-04 16:22:03,668] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:22:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:22:03,670] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:22:03,671] INFO: Server is approved and ready to process commands
[2025-06-04 16:22:03,674] INFO: Fetching commands...
[2025-06-04 16:22:03,676] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:22:03,678] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:22:05,712] DEBUG: Response status code: 200
[2025-06-04 16:22:05,713] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:22:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:22:05,715] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:22:05,718] INFO: Commands: []
[2025-06-04 16:22:28,770] DEBUG: Checking approval status for server 8
[2025-06-04 16:22:28,770] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:22:30,811] DEBUG: Response status code: 200
[2025-06-04 16:22:30,811] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:22:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:22:30,813] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:22:30,813] INFO: Server is approved and ready to process commands
[2025-06-04 16:22:30,814] INFO: Fetching commands...
[2025-06-04 16:22:30,814] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:22:30,816] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:22:32,875] DEBUG: Response status code: 200
[2025-06-04 16:22:32,876] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:22:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:22:32,879] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:22:32,881] INFO: Commands: []
[2025-06-04 16:22:55,930] DEBUG: Checking approval status for server 8
[2025-06-04 16:22:55,930] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:22:57,976] DEBUG: Response status code: 200
[2025-06-04 16:22:57,976] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:22:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:22:57,977] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:22:57,978] INFO: Server is approved and ready to process commands
[2025-06-04 16:22:57,978] INFO: Fetching commands...
[2025-06-04 16:22:57,978] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:22:57,980] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:23:00,016] DEBUG: Response status code: 200
[2025-06-04 16:23:00,017] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:23:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:23:00,017] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:23:00,019] INFO: Commands: []
[2025-06-04 16:23:23,073] DEBUG: Checking approval status for server 8
[2025-06-04 16:23:23,074] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:23:25,111] DEBUG: Response status code: 200
[2025-06-04 16:23:25,111] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:23:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:23:25,114] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:23:25,115] INFO: Server is approved and ready to process commands
[2025-06-04 16:23:25,115] INFO: Fetching commands...
[2025-06-04 16:23:25,116] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:23:25,116] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:23:27,160] DEBUG: Response status code: 200
[2025-06-04 16:23:27,161] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:23:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:23:27,161] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:23:27,163] INFO: Commands: []
[2025-06-04 16:23:50,196] DEBUG: Checking approval status for server 8
[2025-06-04 16:23:50,196] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:23:52,242] DEBUG: Response status code: 200
[2025-06-04 16:23:52,242] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:23:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:23:52,244] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:23:52,245] INFO: Server is approved and ready to process commands
[2025-06-04 16:23:52,247] INFO: Fetching commands...
[2025-06-04 16:23:52,248] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:23:52,250] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:23:54,293] DEBUG: Response status code: 200
[2025-06-04 16:23:54,293] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:23:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:23:54,295] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:23:54,296] INFO: Commands: []
[2025-06-04 16:24:17,351] DEBUG: Checking approval status for server 8
[2025-06-04 16:24:17,352] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:24:19,390] DEBUG: Response status code: 200
[2025-06-04 16:24:19,392] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:24:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:24:19,394] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:24:19,397] INFO: Server is approved and ready to process commands
[2025-06-04 16:24:19,401] INFO: Fetching commands...
[2025-06-04 16:24:19,403] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:24:19,405] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:24:21,456] DEBUG: Response status code: 200
[2025-06-04 16:24:21,457] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:24:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:24:21,459] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:24:21,463] INFO: Commands: []
[2025-06-04 16:24:44,507] DEBUG: Checking approval status for server 8
[2025-06-04 16:24:44,508] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:24:46,611] DEBUG: Response status code: 200
[2025-06-04 16:24:46,612] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:24:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:24:46,613] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:24:46,614] INFO: Server is approved and ready to process commands
[2025-06-04 16:24:46,615] INFO: Fetching commands...
[2025-06-04 16:24:46,618] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:24:46,619] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:24:48,686] DEBUG: Response status code: 200
[2025-06-04 16:24:48,687] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:24:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '152', 'Connection': 'close'}
[2025-06-04 16:24:48,688] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "systeminfo",
      "history_id": "12",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 16:24:48,691] INFO: Commands: [{'as_admin': True, 'command': 'systeminfo', 'history_id': '12', 'id': None}]
[2025-06-04 16:24:50,754] INFO: Running command: systeminfo (admin=True)
[2025-06-04 16:24:56,318] INFO: Result: {'success': True, 'output': '\nHost Name:                     LAP-MOSHEG\nOS Name:                       Microsoft Windows 11 Business\nOS Version:                    10.0.26100 N/A Build 26100\nOS Manufacturer:               Microsoft Corporation\nOS Configuration:              Standalone Workstation\nOS Build Type:                 Multiprocessor Free\nRegistered Owner:              N/A\nRegistered Organization:       N/A\nProduct ID:                    00330-73745-00003-AAOEM\nOriginal Install Date:         10/13/2024, 11:41:51 AM\nSystem Boot Time:              5/30/2025, 12:28:48 PM\nSystem Manufacturer:           LENOVO\nSystem Model:                  82RF\nSystem Type:                   x64-based PC\nProcessor(s):                  1 Processor(s) Installed.\n                               [01]: Intel64 Family 6 Model 154 Stepping 3 GenuineIntel ~2500 Mhz\nBIOS Version:                  LENOVO J2CN40WW, 4/15/2022\nWindows Directory:             C:\\WINDOWS\nSystem Directory:              C:\\WINDOWS\\system32\nBoot Device:                   \\Device\\HarddiskVolume1\nSystem Locale:                 en-us;English (United States)\nInput Locale:                  en-us;English (United States)\nTime Zone:                     (UTC+02:00) Jerusalem\nTotal Physical Memory:         32,492 MB\nAvailable Physical Memory:     3,884 MB\nVirtual Memory: Max Size:      79,596 MB\nVirtual Memory: Available:     17,806 MB\nVirtual Memory: In Use:        61,790 MB\nPage File Location(s):         C:\\pagefile.sys\nDomain:                        WORKGROUP\nLogon Server:                  \\\\LAP-MOSHEG\nHotfix(s):                     5 Hotfix(s) Installed.\n                               [01]: KB5054979\n                               [02]: KB5061977\n                               [03]: KB5058538\n                               [04]: KB5058523\n                               [05]: KB5059502\nNetwork Card(s):               9 NIC(s) Installed.\n                               [01]: Intel(R) Wi-Fi 6E AX211 160MHz\n                                     Connection Name: Wi-Fi\n                                     DHCP Enabled:    Yes\n                                     DHCP Server:     192.168.179.47\n                                     IP address(es)\n                                     [01]: 192.168.179.211\n                                     [02]: fe80::f95b:d3a4:c0ec:a347\n                               [02]: TAP-Windows Adapter V9\n                                     Connection Name: Ethernet 6\n                                     Status:          Media disconnected\n                               [03]: Fortinet SSL VPN Virtual Ethernet Adapter\n                                     Connection Name: Ethernet 4\n                                     Status:          Hardware not present\n                               [04]: Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n                                     Connection Name: Ethernet 5\n                                     Status:          Media disconnected\n                               [05]: Sophos TAP Adapter\n                                     Connection Name: Ethernet 3\n                                     Status:          Media disconnected\n                               [06]: Realtek PCIe GbE Family Controller\n                                     Connection Name: Ethernet\n                                     Status:          Media disconnected\n                               [07]: Bluetooth Device (Personal Area Network)\n                                     Connection Name: Bluetooth Network Connection\n                                     Status:          Media disconnected\n                               [08]: Wintun Userspace Tunnel\n                                     Connection Name: OpenVPN Wintun\n                                     Status:          Media disconnected\n                               [09]: OpenVPN Data Channel Offload\n                                     Connection Name: OpenVPN Data Channel Offload\n                                     Status:          Media disconnected\nVirtualization-based security: Status: Running\n                               Required Security Properties:\n                               Available Security Properties:\n                                     Base Virtualization Support\n                                     Secure Boot\n                                     DMA Protection\n                                     UEFI Code Readonly\n                                     SMM Security Mitigations 1.0\n                                     Mode Based Execution Control\n                                     APIC Virtualization\n                               Services Configured:\n                               Services Running:\n                               App Control for Business policy: Enforced\n                               App Control for Business user mode policy: Off\n                               Security Features Enabled:\nHyper-V Requirements:          A hypervisor has been detected. Features required for Hyper-V will not be displayed.\n', 'error': '', 'duration': 5.564157724380493, 'returncode': 0}
[2025-06-04 16:24:58,391] INFO: Result for command None sent successfully
[2025-06-04 16:25:19,394] DEBUG: Checking approval status for server 8
[2025-06-04 16:25:19,396] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:25:21,455] DEBUG: Response status code: 200
[2025-06-04 16:25:21,457] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:25:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:25:21,459] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:25:21,460] INFO: Server is approved and ready to process commands
[2025-06-04 16:25:21,461] INFO: Fetching commands...
[2025-06-04 16:25:21,463] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:25:21,465] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:25:23,505] DEBUG: Response status code: 200
[2025-06-04 16:25:23,506] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:25:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:25:23,508] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:25:23,511] INFO: Commands: []
[2025-06-04 16:25:46,557] DEBUG: Checking approval status for server 8
[2025-06-04 16:25:46,558] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:25:48,620] DEBUG: Response status code: 200
[2025-06-04 16:25:48,621] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:25:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:25:48,622] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:25:48,623] INFO: Server is approved and ready to process commands
[2025-06-04 16:25:48,624] INFO: Fetching commands...
[2025-06-04 16:25:48,625] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:25:48,625] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:25:50,663] DEBUG: Response status code: 200
[2025-06-04 16:25:50,664] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:25:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:25:50,664] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:25:50,665] INFO: Commands: []
[2025-06-04 16:26:13,695] DEBUG: Checking approval status for server 8
[2025-06-04 16:26:13,695] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:26:15,763] DEBUG: Response status code: 200
[2025-06-04 16:26:15,763] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:26:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:26:15,765] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:26:15,766] INFO: Server is approved and ready to process commands
[2025-06-04 16:26:15,767] INFO: Fetching commands...
[2025-06-04 16:26:15,768] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:26:15,770] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:26:17,826] DEBUG: Response status code: 200
[2025-06-04 16:26:17,827] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:26:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:26:17,828] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:26:17,831] INFO: Commands: []
[2025-06-04 16:26:40,873] DEBUG: Checking approval status for server 8
[2025-06-04 16:26:40,873] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:26:42,942] DEBUG: Response status code: 200
[2025-06-04 16:26:42,943] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:26:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:26:42,945] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:26:42,947] INFO: Server is approved and ready to process commands
[2025-06-04 16:26:42,951] INFO: Fetching commands...
[2025-06-04 16:26:42,952] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:26:42,955] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:26:45,011] DEBUG: Response status code: 200
[2025-06-04 16:26:45,012] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:26:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '148', 'Connection': 'close'}
[2025-06-04 16:26:45,013] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "whoami",
      "history_id": "13",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 16:26:45,014] INFO: Commands: [{'as_admin': True, 'command': 'whoami', 'history_id': '13', 'id': None}]
[2025-06-04 16:26:47,044] INFO: Running command: whoami (admin=True)
[2025-06-04 16:26:47,280] INFO: Result: {'success': True, 'output': 'azuread\\moshegabay\n', 'error': '', 'duration': 0.23587512969970703, 'returncode': 0}
[2025-06-04 16:26:49,320] INFO: Result for command None sent successfully
[2025-06-04 16:27:10,321] DEBUG: Checking approval status for server 8
[2025-06-04 16:27:10,322] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:27:12,377] DEBUG: Response status code: 200
[2025-06-04 16:27:12,378] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:27:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:27:12,378] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:27:12,379] INFO: Server is approved and ready to process commands
[2025-06-04 16:27:12,380] INFO: Fetching commands...
[2025-06-04 16:27:12,380] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:27:12,381] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:27:14,425] DEBUG: Response status code: 200
[2025-06-04 16:27:14,426] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:27:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:27:14,427] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:27:14,428] INFO: Commands: []
[2025-06-04 16:27:37,491] DEBUG: Checking approval status for server 8
[2025-06-04 16:27:37,491] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:27:39,544] DEBUG: Response status code: 200
[2025-06-04 16:27:39,544] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:27:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:27:39,546] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:27:39,547] INFO: Server is approved and ready to process commands
[2025-06-04 16:27:39,548] INFO: Fetching commands...
[2025-06-04 16:27:39,550] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:27:39,552] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:27:41,597] DEBUG: Response status code: 200
[2025-06-04 16:27:41,598] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:27:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:27:41,598] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:27:41,600] INFO: Commands: []
[2025-06-04 16:28:04,640] DEBUG: Checking approval status for server 8
[2025-06-04 16:28:04,640] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:28:06,681] DEBUG: Response status code: 200
[2025-06-04 16:28:06,681] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:28:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:28:06,682] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:28:06,682] INFO: Server is approved and ready to process commands
[2025-06-04 16:28:06,683] INFO: Fetching commands...
[2025-06-04 16:28:06,683] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:28:06,684] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:28:08,741] DEBUG: Response status code: 200
[2025-06-04 16:28:08,742] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:28:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:28:08,743] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:28:08,744] INFO: Commands: []
[2025-06-04 16:28:31,768] DEBUG: Checking approval status for server 8
[2025-06-04 16:28:31,768] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:28:33,832] DEBUG: Response status code: 200
[2025-06-04 16:28:33,833] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:28:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:28:33,834] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:28:33,834] INFO: Server is approved and ready to process commands
[2025-06-04 16:28:33,835] INFO: Fetching commands...
[2025-06-04 16:28:33,836] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:28:33,836] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:28:35,879] DEBUG: Response status code: 200
[2025-06-04 16:28:35,880] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:28:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:28:35,882] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:28:35,883] INFO: Commands: []
[2025-06-04 16:28:58,936] DEBUG: Checking approval status for server 8
[2025-06-04 16:28:58,938] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:29:00,973] DEBUG: Response status code: 200
[2025-06-04 16:29:00,974] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:29:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:29:00,974] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:29:00,975] INFO: Server is approved and ready to process commands
[2025-06-04 16:29:00,975] INFO: Fetching commands...
[2025-06-04 16:29:00,976] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:29:00,976] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:29:03,050] DEBUG: Response status code: 200
[2025-06-04 16:29:03,051] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:29:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:29:03,053] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:29:03,056] INFO: Commands: []
[2025-06-04 16:29:26,111] DEBUG: Checking approval status for server 8
[2025-06-04 16:29:26,112] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:29:28,149] DEBUG: Response status code: 200
[2025-06-04 16:29:28,150] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:29:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:29:28,150] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:29:28,151] INFO: Server is approved and ready to process commands
[2025-06-04 16:29:28,151] INFO: Fetching commands...
[2025-06-04 16:29:28,152] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:29:28,153] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:29:30,213] DEBUG: Response status code: 200
[2025-06-04 16:29:30,213] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:29:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:29:30,214] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:29:30,215] INFO: Commands: []
[2025-06-04 16:29:53,252] DEBUG: Checking approval status for server 8
[2025-06-04 16:29:53,254] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:29:55,323] DEBUG: Response status code: 200
[2025-06-04 16:29:55,324] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:29:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:29:55,325] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:29:55,325] INFO: Server is approved and ready to process commands
[2025-06-04 16:29:55,326] INFO: Fetching commands...
[2025-06-04 16:29:55,327] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:29:55,327] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:29:57,381] DEBUG: Response status code: 200
[2025-06-04 16:29:57,381] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:29:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '155', 'Connection': 'close'}
[2025-06-04 16:29:57,382] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "ipconfig /all",
      "history_id": "14",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 16:29:57,386] INFO: Commands: [{'as_admin': True, 'command': 'ipconfig /all', 'history_id': '14', 'id': None}]
[2025-06-04 16:29:59,428] INFO: Running command: ipconfig /all (admin=True)
[2025-06-04 16:29:59,694] INFO: Result: {'success': True, 'output': '\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : LAP-MOSHEG\n   Primary Dns Suffix  . . . . . . . : \n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n\nEthernet adapter Ethernet 6:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : pango.local\n   Description . . . . . . . . . . . : TAP-Windows Adapter V9\n   Physical Address. . . . . . . . . : 00-FF-5B-75-33-05\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 3:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Sophos TAP Adapter\n   Physical Address. . . . . . . . . : 00-FF-A1-F8-B1-EB\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nUnknown adapter OpenVPN Wintun:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Wintun Userspace Tunnel\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter vEthernet (Default Switch):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-01-C3-00\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::3876:c8d5:44a3:6e54%32(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.26.240.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 536876381\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter vEthernet (WSL (Hyper-V firewall)):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter #2\n   Physical Address. . . . . . . . . : 00-15-5D-A2-0F-F2\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::8563:3655:44b1:2be8%68(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.22.160.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 1140856157\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nUnknown adapter OpenVPN Data Channel Offload:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : OpenVPN Data Channel Offload\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-28\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 2:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter #2\n   Physical Address. . . . . . . . . : C6-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 5:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n   Physical Address. . . . . . . . . : 00-09-0F-FE-00-01\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Wi-Fi:\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Intel(R) Wi-Fi 6E AX211 160MHz\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::f95b:d3a4:c0ec:a347%8(Preferred) \n   IPv4 Address. . . . . . . . . . . : 192.168.179.211(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Lease Obtained. . . . . . . . . . : Wednesday, June 4, 2025 2:36:19 PM\n   Lease Expires . . . . . . . . . . : Wednesday, June 4, 2025 5:17:15 PM\n   Default Gateway . . . . . . . . . : 192.168.179.47\n   DHCP Server . . . . . . . . . . . : 192.168.179.47\n   DHCPv6 IAID . . . . . . . . . . . : 130286504\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   DNS Servers . . . . . . . . . . . : 192.168.179.47\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Bluetooth Network Connection:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Bluetooth Device (Personal Area Network)\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-2B\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Realtek PCIe GbE Family Controller\n   Physical Address. . . . . . . . . : 6C-24-08-36-72-73\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n', 'error': '', 'duration': 0.26477503776550293, 'returncode': 0}
[2025-06-04 16:30:01,756] INFO: Result for command None sent successfully
[2025-06-04 16:30:22,757] DEBUG: Checking approval status for server 8
[2025-06-04 16:30:22,758] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:30:24,818] DEBUG: Response status code: 200
[2025-06-04 16:30:24,819] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:30:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:30:24,820] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:30:24,821] INFO: Server is approved and ready to process commands
[2025-06-04 16:30:24,822] INFO: Fetching commands...
[2025-06-04 16:30:24,824] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:30:24,824] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:30:26,885] DEBUG: Response status code: 200
[2025-06-04 16:30:26,885] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:30:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:30:26,886] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:30:26,889] INFO: Commands: []
[2025-06-04 16:30:49,940] DEBUG: Checking approval status for server 8
[2025-06-04 16:30:49,941] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:30:51,995] DEBUG: Response status code: 200
[2025-06-04 16:30:51,996] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:30:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:30:51,997] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:30:52,000] INFO: Server is approved and ready to process commands
[2025-06-04 16:30:52,002] INFO: Fetching commands...
[2025-06-04 16:30:52,002] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:30:52,004] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:30:54,049] DEBUG: Response status code: 200
[2025-06-04 16:30:54,050] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:30:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:30:54,050] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:30:54,052] INFO: Commands: []
[2025-06-04 16:31:17,089] DEBUG: Checking approval status for server 8
[2025-06-04 16:31:17,089] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:31:19,126] DEBUG: Response status code: 200
[2025-06-04 16:31:19,126] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:31:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:31:19,127] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:31:19,127] INFO: Server is approved and ready to process commands
[2025-06-04 16:31:19,128] INFO: Fetching commands...
[2025-06-04 16:31:19,128] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:31:19,129] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:31:21,188] DEBUG: Response status code: 200
[2025-06-04 16:31:21,189] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:31:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:31:21,189] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:31:21,192] INFO: Commands: []
[2025-06-04 16:31:44,252] DEBUG: Checking approval status for server 8
[2025-06-04 16:31:44,252] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:31:46,305] DEBUG: Response status code: 200
[2025-06-04 16:31:46,306] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:31:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:31:46,307] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:31:46,309] INFO: Server is approved and ready to process commands
[2025-06-04 16:31:46,310] INFO: Fetching commands...
[2025-06-04 16:31:46,311] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:31:46,313] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:31:48,378] DEBUG: Response status code: 200
[2025-06-04 16:31:48,379] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:31:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:31:48,384] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:31:48,387] INFO: Commands: []
[2025-06-04 16:32:11,445] DEBUG: Checking approval status for server 8
[2025-06-04 16:32:11,445] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:32:13,505] DEBUG: Response status code: 200
[2025-06-04 16:32:13,506] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:32:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:32:13,506] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:32:13,507] INFO: Server is approved and ready to process commands
[2025-06-04 16:32:13,507] INFO: Fetching commands...
[2025-06-04 16:32:13,508] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:32:13,509] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:32:15,588] DEBUG: Response status code: 200
[2025-06-04 16:32:15,588] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:32:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '155', 'Connection': 'close'}
[2025-06-04 16:32:15,589] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "ipconfig /all",
      "history_id": "15",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 16:32:15,591] INFO: Commands: [{'as_admin': True, 'command': 'ipconfig /all', 'history_id': '15', 'id': None}]
[2025-06-04 16:32:17,649] INFO: Running command: ipconfig /all (admin=True)
[2025-06-04 16:32:17,901] INFO: Result: {'success': True, 'output': '\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : LAP-MOSHEG\n   Primary Dns Suffix  . . . . . . . : \n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n\nEthernet adapter Ethernet 6:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : pango.local\n   Description . . . . . . . . . . . : TAP-Windows Adapter V9\n   Physical Address. . . . . . . . . : 00-FF-5B-75-33-05\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 3:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Sophos TAP Adapter\n   Physical Address. . . . . . . . . : 00-FF-A1-F8-B1-EB\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nUnknown adapter OpenVPN Wintun:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Wintun Userspace Tunnel\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter vEthernet (Default Switch):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-01-C3-00\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::3876:c8d5:44a3:6e54%32(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.26.240.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 536876381\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter vEthernet (WSL (Hyper-V firewall)):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter #2\n   Physical Address. . . . . . . . . : 00-15-5D-A2-0F-F2\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::8563:3655:44b1:2be8%68(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.22.160.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 1140856157\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nUnknown adapter OpenVPN Data Channel Offload:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : OpenVPN Data Channel Offload\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-28\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 2:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter #2\n   Physical Address. . . . . . . . . : C6-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 5:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n   Physical Address. . . . . . . . . : 00-09-0F-FE-00-01\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Wi-Fi:\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Intel(R) Wi-Fi 6E AX211 160MHz\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::f95b:d3a4:c0ec:a347%8(Preferred) \n   IPv4 Address. . . . . . . . . . . : 192.168.179.211(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Lease Obtained. . . . . . . . . . : Wednesday, June 4, 2025 2:36:19 PM\n   Lease Expires . . . . . . . . . . : Wednesday, June 4, 2025 5:17:14 PM\n   Default Gateway . . . . . . . . . : 192.168.179.47\n   DHCP Server . . . . . . . . . . . : 192.168.179.47\n   DHCPv6 IAID . . . . . . . . . . . : 130286504\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   DNS Servers . . . . . . . . . . . : 192.168.179.47\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Bluetooth Network Connection:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Bluetooth Device (Personal Area Network)\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-2B\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Realtek PCIe GbE Family Controller\n   Physical Address. . . . . . . . . : 6C-24-08-36-72-73\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n', 'error': '', 'duration': 0.25054931640625, 'returncode': 0}
[2025-06-04 16:32:19,957] INFO: Result for command None sent successfully
[2025-06-04 16:32:40,959] DEBUG: Checking approval status for server 8
[2025-06-04 16:32:40,961] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:32:43,032] DEBUG: Response status code: 200
[2025-06-04 16:32:43,032] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:32:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:32:43,033] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:32:43,034] INFO: Server is approved and ready to process commands
[2025-06-04 16:32:43,035] INFO: Fetching commands...
[2025-06-04 16:32:43,035] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:32:43,036] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:32:45,114] DEBUG: Response status code: 200
[2025-06-04 16:32:45,115] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:32:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '155', 'Connection': 'close'}
[2025-06-04 16:32:45,121] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "ipconfig /all",
      "history_id": "16",
      "id": null
    }
  ],
  "interval": 21
}
[2025-06-04 16:32:45,128] INFO: Commands: [{'as_admin': True, 'command': 'ipconfig /all', 'history_id': '16', 'id': None}]
[2025-06-04 16:32:47,172] INFO: Running command: ipconfig /all (admin=True)
[2025-06-04 16:32:47,371] INFO: Result: {'success': True, 'output': '\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : LAP-MOSHEG\n   Primary Dns Suffix  . . . . . . . : \n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n\nEthernet adapter Ethernet 6:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : pango.local\n   Description . . . . . . . . . . . : TAP-Windows Adapter V9\n   Physical Address. . . . . . . . . : 00-FF-5B-75-33-05\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 3:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Sophos TAP Adapter\n   Physical Address. . . . . . . . . : 00-FF-A1-F8-B1-EB\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nUnknown adapter OpenVPN Wintun:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Wintun Userspace Tunnel\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter vEthernet (Default Switch):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-01-C3-00\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::3876:c8d5:44a3:6e54%32(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.26.240.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 536876381\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter vEthernet (WSL (Hyper-V firewall)):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter #2\n   Physical Address. . . . . . . . . : 00-15-5D-A2-0F-F2\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::8563:3655:44b1:2be8%68(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.22.160.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 1140856157\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nUnknown adapter OpenVPN Data Channel Offload:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : OpenVPN Data Channel Offload\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-28\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 2:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter #2\n   Physical Address. . . . . . . . . : C6-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 5:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n   Physical Address. . . . . . . . . : 00-09-0F-FE-00-01\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Wi-Fi:\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Intel(R) Wi-Fi 6E AX211 160MHz\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::f95b:d3a4:c0ec:a347%8(Preferred) \n   IPv4 Address. . . . . . . . . . . : 192.168.179.211(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Lease Obtained. . . . . . . . . . : Wednesday, June 4, 2025 2:36:19 PM\n   Lease Expires . . . . . . . . . . : Wednesday, June 4, 2025 5:17:15 PM\n   Default Gateway . . . . . . . . . : 192.168.179.47\n   DHCP Server . . . . . . . . . . . : 192.168.179.47\n   DHCPv6 IAID . . . . . . . . . . . : 130286504\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   DNS Servers . . . . . . . . . . . : 192.168.179.47\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Bluetooth Network Connection:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Bluetooth Device (Personal Area Network)\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-2B\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Realtek PCIe GbE Family Controller\n   Physical Address. . . . . . . . . : 6C-24-08-36-72-73\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n', 'error': '', 'duration': 0.19909238815307617, 'returncode': 0}
[2025-06-04 16:32:49,441] INFO: Result for command None sent successfully
[2025-06-04 16:33:10,443] DEBUG: Checking approval status for server 8
[2025-06-04 16:33:10,444] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:33:12,525] DEBUG: Response status code: 200
[2025-06-04 16:33:12,525] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:33:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:33:12,526] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:33:12,526] INFO: Server is approved and ready to process commands
[2025-06-04 16:33:12,526] INFO: Fetching commands...
[2025-06-04 16:33:12,526] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:33:12,528] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:33:14,608] DEBUG: Response status code: 200
[2025-06-04 16:33:14,609] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:33:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:33:14,609] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:33:14,610] INFO: Commands: []
[2025-06-04 16:33:37,683] DEBUG: Checking approval status for server 8
[2025-06-04 16:33:37,684] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:33:39,725] DEBUG: Response status code: 200
[2025-06-04 16:33:39,725] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:33:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:33:39,727] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:33:39,728] INFO: Server is approved and ready to process commands
[2025-06-04 16:33:39,728] INFO: Fetching commands...
[2025-06-04 16:33:39,729] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:33:39,730] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:33:41,789] DEBUG: Response status code: 200
[2025-06-04 16:33:41,789] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:33:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:33:41,790] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:33:41,794] INFO: Commands: []
[2025-06-04 16:34:04,872] DEBUG: Checking approval status for server 8
[2025-06-04 16:34:04,872] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:34:06,938] DEBUG: Response status code: 200
[2025-06-04 16:34:06,939] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:34:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:34:06,940] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:34:06,941] INFO: Server is approved and ready to process commands
[2025-06-04 16:34:06,942] INFO: Fetching commands...
[2025-06-04 16:34:06,943] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:34:06,943] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:34:09,023] DEBUG: Response status code: 200
[2025-06-04 16:34:09,023] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:34:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:34:09,024] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:34:09,025] INFO: Commands: []
[2025-06-04 16:34:32,083] DEBUG: Checking approval status for server 8
[2025-06-04 16:34:32,083] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:34:34,147] DEBUG: Response status code: 200
[2025-06-04 16:34:34,147] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:34:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:34:34,148] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:34:34,149] INFO: Server is approved and ready to process commands
[2025-06-04 16:34:34,149] INFO: Fetching commands...
[2025-06-04 16:34:34,149] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:34:34,150] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:34:36,210] DEBUG: Response status code: 200
[2025-06-04 16:34:36,210] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:34:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:34:36,210] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:34:36,211] INFO: Commands: []
[2025-06-04 16:34:59,248] DEBUG: Checking approval status for server 8
[2025-06-04 16:34:59,249] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:35:01,323] DEBUG: Response status code: 200
[2025-06-04 16:35:01,324] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:35:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:35:01,324] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:35:01,326] INFO: Server is approved and ready to process commands
[2025-06-04 16:35:01,326] INFO: Fetching commands...
[2025-06-04 16:35:01,327] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:35:01,328] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:35:03,375] DEBUG: Response status code: 200
[2025-06-04 16:35:03,376] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:35:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:35:03,376] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:35:03,377] INFO: Commands: []
[2025-06-04 16:35:26,423] DEBUG: Checking approval status for server 8
[2025-06-04 16:35:26,424] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:35:28,462] DEBUG: Response status code: 200
[2025-06-04 16:35:28,462] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:35:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:35:28,463] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:35:28,463] INFO: Server is approved and ready to process commands
[2025-06-04 16:35:28,465] INFO: Fetching commands...
[2025-06-04 16:35:28,466] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:35:28,467] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:35:30,529] DEBUG: Response status code: 200
[2025-06-04 16:35:30,530] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:35:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:35:30,531] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:35:30,534] INFO: Commands: []
[2025-06-04 16:35:53,606] DEBUG: Checking approval status for server 8
[2025-06-04 16:35:53,607] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:35:55,649] DEBUG: Response status code: 200
[2025-06-04 16:35:55,650] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:35:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:35:55,650] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:35:55,651] INFO: Server is approved and ready to process commands
[2025-06-04 16:35:55,651] INFO: Fetching commands...
[2025-06-04 16:35:55,652] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:35:55,653] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:35:57,690] DEBUG: Response status code: 200
[2025-06-04 16:35:57,691] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:35:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:35:57,692] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:35:57,695] INFO: Commands: []
[2025-06-04 16:36:20,730] DEBUG: Checking approval status for server 8
[2025-06-04 16:36:20,730] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:36:22,795] DEBUG: Response status code: 200
[2025-06-04 16:36:22,796] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:36:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:36:22,798] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:36:22,800] INFO: Server is approved and ready to process commands
[2025-06-04 16:36:22,801] INFO: Fetching commands...
[2025-06-04 16:36:22,802] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:36:22,803] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:36:24,869] DEBUG: Response status code: 200
[2025-06-04 16:36:24,869] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:36:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:36:24,870] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:36:24,872] INFO: Commands: []
[2025-06-04 16:36:47,914] DEBUG: Checking approval status for server 8
[2025-06-04 16:36:47,915] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:36:49,958] DEBUG: Response status code: 200
[2025-06-04 16:36:49,959] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:36:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:36:49,960] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:36:49,960] INFO: Server is approved and ready to process commands
[2025-06-04 16:36:49,961] INFO: Fetching commands...
[2025-06-04 16:36:49,961] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:36:49,962] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:36:52,029] DEBUG: Response status code: 200
[2025-06-04 16:36:52,030] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:36:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:36:52,030] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:36:52,031] INFO: Commands: []
[2025-06-04 16:37:15,092] DEBUG: Checking approval status for server 8
[2025-06-04 16:37:15,092] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:37:17,133] DEBUG: Response status code: 200
[2025-06-04 16:37:17,134] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:37:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:37:17,137] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:37:17,140] INFO: Server is approved and ready to process commands
[2025-06-04 16:37:17,142] INFO: Fetching commands...
[2025-06-04 16:37:17,145] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:37:17,147] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:37:19,199] DEBUG: Response status code: 200
[2025-06-04 16:37:19,200] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:37:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:37:19,201] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:37:19,202] INFO: Commands: []
[2025-06-04 16:37:42,225] DEBUG: Checking approval status for server 8
[2025-06-04 16:37:42,225] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:37:44,275] DEBUG: Response status code: 200
[2025-06-04 16:37:44,276] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:37:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:37:44,277] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:37:44,279] INFO: Server is approved and ready to process commands
[2025-06-04 16:37:44,281] INFO: Fetching commands...
[2025-06-04 16:37:44,282] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:37:44,283] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:37:46,364] DEBUG: Response status code: 200
[2025-06-04 16:37:46,364] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:37:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:37:46,365] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:37:46,367] INFO: Commands: []
[2025-06-04 16:38:09,415] DEBUG: Checking approval status for server 8
[2025-06-04 16:38:09,415] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:38:11,480] DEBUG: Response status code: 200
[2025-06-04 16:38:11,482] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:38:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:38:11,484] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:38:11,485] INFO: Server is approved and ready to process commands
[2025-06-04 16:38:11,487] INFO: Fetching commands...
[2025-06-04 16:38:11,488] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:38:11,488] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:38:13,528] DEBUG: Response status code: 200
[2025-06-04 16:38:13,528] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:38:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:38:13,530] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:38:13,534] INFO: Commands: []
[2025-06-04 16:38:36,577] DEBUG: Checking approval status for server 8
[2025-06-04 16:38:36,577] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:38:38,640] DEBUG: Response status code: 200
[2025-06-04 16:38:38,641] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:38:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:38:38,642] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:38:38,643] INFO: Server is approved and ready to process commands
[2025-06-04 16:38:38,644] INFO: Fetching commands...
[2025-06-04 16:38:38,647] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:38:38,647] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:38:40,708] DEBUG: Response status code: 200
[2025-06-04 16:38:40,709] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:38:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:38:40,712] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:38:40,715] INFO: Commands: []
[2025-06-04 16:39:03,769] DEBUG: Checking approval status for server 8
[2025-06-04 16:39:03,770] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:39:05,832] DEBUG: Response status code: 200
[2025-06-04 16:39:05,833] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:39:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:39:05,833] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:39:05,836] INFO: Server is approved and ready to process commands
[2025-06-04 16:39:05,837] INFO: Fetching commands...
[2025-06-04 16:39:05,838] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:39:05,838] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:39:07,909] DEBUG: Response status code: 200
[2025-06-04 16:39:07,910] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:39:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:39:07,914] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:39:07,917] INFO: Commands: []
[2025-06-04 16:39:31,001] DEBUG: Checking approval status for server 8
[2025-06-04 16:39:31,002] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:39:33,058] DEBUG: Response status code: 200
[2025-06-04 16:39:33,058] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:39:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:39:33,059] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:39:33,059] INFO: Server is approved and ready to process commands
[2025-06-04 16:39:33,061] INFO: Fetching commands...
[2025-06-04 16:39:33,061] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:39:33,062] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:39:35,122] DEBUG: Response status code: 200
[2025-06-04 16:39:35,122] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:39:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:39:35,123] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:39:35,124] INFO: Commands: []
[2025-06-04 16:39:58,162] DEBUG: Checking approval status for server 8
[2025-06-04 16:39:58,162] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:40:00,213] DEBUG: Response status code: 200
[2025-06-04 16:40:00,213] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:40:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:40:00,214] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:40:00,215] INFO: Server is approved and ready to process commands
[2025-06-04 16:40:00,215] INFO: Fetching commands...
[2025-06-04 16:40:00,215] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:40:00,217] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:40:02,274] DEBUG: Response status code: 200
[2025-06-04 16:40:02,275] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:40:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:40:02,277] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:40:02,278] INFO: Commands: []
[2025-06-04 16:40:25,344] DEBUG: Checking approval status for server 8
[2025-06-04 16:40:25,344] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:40:27,406] DEBUG: Response status code: 200
[2025-06-04 16:40:27,408] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:40:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:40:27,409] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:40:27,410] INFO: Server is approved and ready to process commands
[2025-06-04 16:40:27,410] INFO: Fetching commands...
[2025-06-04 16:40:27,411] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:40:27,412] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:40:29,462] DEBUG: Response status code: 200
[2025-06-04 16:40:29,463] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:40:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:40:29,465] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:40:29,466] INFO: Commands: []
[2025-06-04 16:40:52,522] DEBUG: Checking approval status for server 8
[2025-06-04 16:40:52,523] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:40:54,575] DEBUG: Response status code: 200
[2025-06-04 16:40:54,575] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:40:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:40:54,576] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:40:54,577] INFO: Server is approved and ready to process commands
[2025-06-04 16:40:54,578] INFO: Fetching commands...
[2025-06-04 16:40:54,579] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:40:54,579] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:40:56,627] DEBUG: Response status code: 200
[2025-06-04 16:40:56,627] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:40:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:40:56,628] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:40:56,630] INFO: Commands: []
[2025-06-04 16:41:19,698] DEBUG: Checking approval status for server 8
[2025-06-04 16:41:19,698] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:41:21,756] DEBUG: Response status code: 200
[2025-06-04 16:41:21,757] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:41:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:41:21,758] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:41:21,759] INFO: Server is approved and ready to process commands
[2025-06-04 16:41:21,759] INFO: Fetching commands...
[2025-06-04 16:41:21,760] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:41:21,762] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:41:23,815] DEBUG: Response status code: 200
[2025-06-04 16:41:23,816] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:41:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:41:23,818] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:41:23,823] INFO: Commands: []
[2025-06-04 16:41:46,882] DEBUG: Checking approval status for server 8
[2025-06-04 16:41:46,882] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:41:48,906] DEBUG: Response status code: 200
[2025-06-04 16:41:48,906] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:41:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:41:48,914] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:41:48,915] INFO: Server is approved and ready to process commands
[2025-06-04 16:41:48,916] INFO: Fetching commands...
[2025-06-04 16:41:48,919] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:41:48,920] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:41:50,973] DEBUG: Response status code: 200
[2025-06-04 16:41:50,974] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:41:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:41:50,979] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:41:50,982] INFO: Commands: []
[2025-06-04 16:42:14,032] DEBUG: Checking approval status for server 8
[2025-06-04 16:42:14,033] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:42:16,104] DEBUG: Response status code: 200
[2025-06-04 16:42:16,105] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:42:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:42:16,107] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:42:16,108] INFO: Server is approved and ready to process commands
[2025-06-04 16:42:16,110] INFO: Fetching commands...
[2025-06-04 16:42:16,111] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:42:16,112] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:42:18,168] DEBUG: Response status code: 200
[2025-06-04 16:42:18,170] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:42:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:42:18,176] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:42:18,177] INFO: Commands: []
[2025-06-04 16:42:41,222] DEBUG: Checking approval status for server 8
[2025-06-04 16:42:41,222] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:42:43,280] DEBUG: Response status code: 200
[2025-06-04 16:42:43,281] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:42:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:42:43,281] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:42:43,282] INFO: Server is approved and ready to process commands
[2025-06-04 16:42:43,282] INFO: Fetching commands...
[2025-06-04 16:42:43,283] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:42:43,283] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:42:45,326] DEBUG: Response status code: 200
[2025-06-04 16:42:45,327] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:42:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:42:45,328] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:42:45,329] INFO: Commands: []
[2025-06-04 16:43:08,382] DEBUG: Checking approval status for server 8
[2025-06-04 16:43:08,383] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:43:10,437] DEBUG: Response status code: 200
[2025-06-04 16:43:10,438] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:43:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:43:10,438] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:43:10,439] INFO: Server is approved and ready to process commands
[2025-06-04 16:43:10,440] INFO: Fetching commands...
[2025-06-04 16:43:10,441] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:43:10,442] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:43:12,496] DEBUG: Response status code: 200
[2025-06-04 16:43:12,496] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:43:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:43:12,497] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:43:12,499] INFO: Commands: []
[2025-06-04 16:43:35,548] DEBUG: Checking approval status for server 8
[2025-06-04 16:43:35,548] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:43:37,583] DEBUG: Response status code: 200
[2025-06-04 16:43:37,584] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:43:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:43:37,585] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:43:37,585] INFO: Server is approved and ready to process commands
[2025-06-04 16:43:37,587] INFO: Fetching commands...
[2025-06-04 16:43:37,587] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:43:37,588] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:43:39,664] DEBUG: Response status code: 200
[2025-06-04 16:43:39,665] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:43:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:43:39,665] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:43:39,667] INFO: Commands: []
[2025-06-04 16:44:02,715] DEBUG: Checking approval status for server 8
[2025-06-04 16:44:02,716] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:44:04,762] DEBUG: Response status code: 200
[2025-06-04 16:44:04,762] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:44:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:44:04,764] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:44:04,764] INFO: Server is approved and ready to process commands
[2025-06-04 16:44:04,765] INFO: Fetching commands...
[2025-06-04 16:44:04,765] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:44:04,766] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:44:06,834] DEBUG: Response status code: 200
[2025-06-04 16:44:06,835] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:44:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:44:06,837] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:44:06,840] INFO: Commands: []
[2025-06-04 16:44:29,919] DEBUG: Checking approval status for server 8
[2025-06-04 16:44:29,920] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:44:31,980] DEBUG: Response status code: 200
[2025-06-04 16:44:31,981] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:44:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:44:31,981] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:44:31,982] INFO: Server is approved and ready to process commands
[2025-06-04 16:44:31,983] INFO: Fetching commands...
[2025-06-04 16:44:31,983] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:44:31,984] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:44:34,022] DEBUG: Response status code: 200
[2025-06-04 16:44:34,022] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:44:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:44:34,023] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:44:34,025] INFO: Commands: []
[2025-06-04 16:44:57,066] DEBUG: Checking approval status for server 8
[2025-06-04 16:44:57,067] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:44:59,122] DEBUG: Response status code: 200
[2025-06-04 16:44:59,122] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:44:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:44:59,123] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:44:59,124] INFO: Server is approved and ready to process commands
[2025-06-04 16:44:59,124] INFO: Fetching commands...
[2025-06-04 16:44:59,126] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:44:59,126] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:45:01,179] DEBUG: Response status code: 200
[2025-06-04 16:45:01,180] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:45:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:45:01,182] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:45:01,183] INFO: Commands: []
[2025-06-04 16:45:24,232] DEBUG: Checking approval status for server 8
[2025-06-04 16:45:24,232] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:45:26,299] DEBUG: Response status code: 200
[2025-06-04 16:45:26,300] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:45:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:45:26,301] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:45:26,301] INFO: Server is approved and ready to process commands
[2025-06-04 16:45:26,302] INFO: Fetching commands...
[2025-06-04 16:45:26,302] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:45:26,302] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:45:28,363] DEBUG: Response status code: 200
[2025-06-04 16:45:28,364] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:45:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:45:28,365] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:45:28,367] INFO: Commands: []
[2025-06-04 16:45:51,452] DEBUG: Checking approval status for server 8
[2025-06-04 16:45:51,453] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:45:53,521] DEBUG: Response status code: 200
[2025-06-04 16:45:53,522] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:45:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:45:53,522] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:45:53,523] INFO: Server is approved and ready to process commands
[2025-06-04 16:45:53,524] INFO: Fetching commands...
[2025-06-04 16:45:53,524] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:45:53,525] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:45:55,566] DEBUG: Response status code: 200
[2025-06-04 16:45:55,566] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:45:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:45:55,567] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:45:55,569] INFO: Commands: []
[2025-06-04 16:46:18,624] DEBUG: Checking approval status for server 8
[2025-06-04 16:46:18,625] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:46:20,706] DEBUG: Response status code: 200
[2025-06-04 16:46:20,707] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:46:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:46:20,710] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:46:20,711] INFO: Server is approved and ready to process commands
[2025-06-04 16:46:20,713] INFO: Fetching commands...
[2025-06-04 16:46:20,714] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:46:20,716] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:46:22,769] DEBUG: Response status code: 200
[2025-06-04 16:46:22,769] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:46:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:46:22,770] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:46:22,773] INFO: Commands: []
[2025-06-04 16:46:45,835] DEBUG: Checking approval status for server 8
[2025-06-04 16:46:45,835] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:46:47,876] DEBUG: Response status code: 200
[2025-06-04 16:46:47,878] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:46:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:46:47,879] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:46:47,880] INFO: Server is approved and ready to process commands
[2025-06-04 16:46:47,881] INFO: Fetching commands...
[2025-06-04 16:46:47,881] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:46:47,882] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:46:49,914] DEBUG: Response status code: 200
[2025-06-04 16:46:49,915] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:46:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:46:49,916] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:46:49,918] INFO: Commands: []
[2025-06-04 16:47:12,953] DEBUG: Checking approval status for server 8
[2025-06-04 16:47:12,954] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:47:14,982] DEBUG: Response status code: 200
[2025-06-04 16:47:14,983] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:47:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:47:14,984] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:47:14,986] INFO: Server is approved and ready to process commands
[2025-06-04 16:47:14,988] INFO: Fetching commands...
[2025-06-04 16:47:14,988] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:47:14,989] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:47:17,035] DEBUG: Response status code: 200
[2025-06-04 16:47:17,036] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:47:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:47:17,037] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:47:17,039] INFO: Commands: []
[2025-06-04 16:47:40,099] DEBUG: Checking approval status for server 8
[2025-06-04 16:47:40,101] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:47:42,182] DEBUG: Response status code: 200
[2025-06-04 16:47:42,182] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:47:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:47:42,183] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:47:42,184] INFO: Server is approved and ready to process commands
[2025-06-04 16:47:42,185] INFO: Fetching commands...
[2025-06-04 16:47:42,185] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:47:42,186] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:47:44,225] DEBUG: Response status code: 200
[2025-06-04 16:47:44,225] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:47:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:47:44,226] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:47:44,227] INFO: Commands: []
[2025-06-04 16:48:07,281] DEBUG: Checking approval status for server 8
[2025-06-04 16:48:07,281] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:48:09,314] DEBUG: Response status code: 200
[2025-06-04 16:48:09,315] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:48:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:48:09,315] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:48:09,316] INFO: Server is approved and ready to process commands
[2025-06-04 16:48:09,317] INFO: Fetching commands...
[2025-06-04 16:48:09,317] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:48:09,318] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:48:11,373] DEBUG: Response status code: 200
[2025-06-04 16:48:11,373] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:48:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 16:48:11,373] DEBUG: Response data: {
  "commands": [],
  "interval": 21
}
[2025-06-04 16:48:11,375] INFO: Commands: []
[2025-06-04 16:48:34,410] DEBUG: Checking approval status for server 8
[2025-06-04 16:48:34,410] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:48:38,446] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x00000218AEC8F350>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-04 16:58:16,087] DEBUG: Checking approval status for server 8
[2025-06-04 16:58:16,088] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:58:18,188] DEBUG: Response status code: 200
[2025-06-04 16:58:18,188] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:58:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 16:58:18,190] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 16:58:18,191] INFO: Server is approved and ready to process commands
[2025-06-04 16:58:18,192] INFO: Fetching commands...
[2025-06-04 16:58:18,194] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 16:58:18,197] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 16:58:20,592] DEBUG: Response status code: 500
[2025-06-04 16:58:20,593] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 13:58:20 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
