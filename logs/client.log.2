[2025-06-04 17:12:23,477] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668778016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668778160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668778304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668778448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668778592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668774272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668774848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668774560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668774992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668775136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668775280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668775424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668775568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668775712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668775856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668776000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668776576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668776720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668777008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668777152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668777296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668777440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668777584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668777728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668777872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:12:23,486] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668778016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668778160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668778304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668778448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668778592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668774272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668774848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668774560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668774992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668775136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668775280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668775424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668775568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668775712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668775856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668776000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668776576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668776720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668776864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668777008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668777152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668777296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668777440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668777584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668777728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668777872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:12:23,487] INFO: Commands: []
[2025-06-04 17:12:46,557] DEBUG: Checking approval status for server 8
[2025-06-04 17:12:46,557] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:12:48,625] DEBUG: Response status code: 200
[2025-06-04 17:12:48,627] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:12:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:12:48,629] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:12:48,630] INFO: Server is approved and ready to process commands
[2025-06-04 17:12:48,630] INFO: Fetching commands...
[2025-06-04 17:12:48,631] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:12:48,631] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:12:50,686] DEBUG: Response status code: 500
[2025-06-04 17:12:50,686] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:12:50 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:12:50,689] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668782912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668783056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668783200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668783344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668783488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668779456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668779600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668779744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668779888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668780032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668780176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668780320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668780464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668780608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668780752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668780896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668781472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668781616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668782048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668782192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668782336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668782480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668782624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668782768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:12:50,692] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668782912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668783056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668783200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668783344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668783488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668779456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668779600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668779744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668779888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668780032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668780176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668780320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668780464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668780608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668780752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668780896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668781472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668781616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668781904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668782048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668782192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668782336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668782480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668782624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668782768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:12:50,694] INFO: Commands: []
[2025-06-04 17:13:13,741] DEBUG: Checking approval status for server 8
[2025-06-04 17:13:13,741] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:13:15,791] DEBUG: Response status code: 200
[2025-06-04 17:13:15,792] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:13:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:13:15,792] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:13:15,793] INFO: Server is approved and ready to process commands
[2025-06-04 17:13:15,793] INFO: Fetching commands...
[2025-06-04 17:13:15,793] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:13:15,793] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:13:17,865] DEBUG: Response status code: 500
[2025-06-04 17:13:17,865] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:13:17 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:13:17,868] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668787520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668984384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668984528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668984672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668984816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668784064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668784208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668784352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668784496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668784640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668784784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668784928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668785072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668785216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668785360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668785504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668785648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668785792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668785936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668786080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668786224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668786368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668786512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668786656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668786800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668786944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668787088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668787232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668787376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:13:17,870] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668787520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668984384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668984528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668984672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668984816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668784064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668784208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668784352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668784496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668784640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668784784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668784928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668785072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668785216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668785360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668785504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668785648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668785792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668785936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668786080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668786224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668786368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668786512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668786656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668786800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668786944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668787088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668787232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668787376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:13:17,871] INFO: Commands: []
[2025-06-04 17:13:40,918] DEBUG: Checking approval status for server 8
[2025-06-04 17:13:40,921] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:13:42,968] DEBUG: Response status code: 200
[2025-06-04 17:13:42,969] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:13:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:13:42,970] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:13:42,970] INFO: Server is approved and ready to process commands
[2025-06-04 17:13:42,971] INFO: Fetching commands...
[2025-06-04 17:13:42,971] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:13:42,972] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:13:45,044] DEBUG: Response status code: 500
[2025-06-04 17:13:45,045] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:13:45 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:13:45,047] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668988704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668988848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668988992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668989136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668989280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668984960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668985536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668985248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668985680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668985824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668985968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668986112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668986256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668986400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668986544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668986688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668986832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668986976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668987120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668987264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668987408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668987552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668987696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668987840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668987984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668988128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668988272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668988416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668988560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:13:45,049] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668988704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668988848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668988992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668989136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668989280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668984960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668985536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668985248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668985680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668985824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668985968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668986112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668986256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668986400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668986544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668986688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668986832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668986976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668987120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668987264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668987408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668987552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668987696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668987840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668987984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668988128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668988272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668988416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668988560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:13:45,050] INFO: Commands: []
[2025-06-04 17:14:08,107] DEBUG: Checking approval status for server 8
[2025-06-04 17:14:08,108] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:14:10,168] DEBUG: Response status code: 200
[2025-06-04 17:14:10,168] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:14:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:14:10,169] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:14:10,170] INFO: Server is approved and ready to process commands
[2025-06-04 17:14:10,170] INFO: Fetching commands...
[2025-06-04 17:14:10,171] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:14:10,172] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:14:12,216] DEBUG: Response status code: 500
[2025-06-04 17:14:12,216] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:14:12 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:14:12,219] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668993600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668993744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668993888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668994032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668994176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668990144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668990288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668990432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668990576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668990720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668990864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668991008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668991152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668991296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668991440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668991584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668991728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668991872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668992016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668992160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668992304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668992448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668992592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668992736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668992880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668993024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668993168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668993312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668993456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:14:12,222] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668993600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668993744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668993888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668994032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668994176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668990144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668990288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668990432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668990576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668990720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668990864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668991008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668991152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668991296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668991440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668991584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668991728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668991872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668992016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668992160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668992304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668992448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668992592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668992736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668992880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668993024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668993168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668993312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668993456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:14:12,222] INFO: Commands: []
[2025-06-04 17:14:35,265] DEBUG: Checking approval status for server 8
[2025-06-04 17:14:35,266] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:14:37,306] DEBUG: Response status code: 200
[2025-06-04 17:14:37,306] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:14:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:14:37,307] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:14:37,307] INFO: Server is approved and ready to process commands
[2025-06-04 17:14:37,307] INFO: Fetching commands...
[2025-06-04 17:14:37,308] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:14:37,309] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:14:39,367] DEBUG: Response status code: 500
[2025-06-04 17:14:39,367] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:14:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:14:39,372] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668998208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668998352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668998496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668998640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668998784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668994752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668994896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668995040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668995184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668995328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668995472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668995616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668995760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668995904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668996048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668996192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668996336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668996480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668996624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668996768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668996912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668997056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668997200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668997344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668997488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668997632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668997776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668997920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668998064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:14:39,376] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878668998208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668998352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668998496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668998640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668998784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668994752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668994896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668995040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668995184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668995328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668995472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878668995616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668995760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878668995904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878668996048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668996192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878668996336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878668996480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878668996624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668996768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668996912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878668997056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878668997200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668997344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878668997488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878668997632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878668997776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878668997920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878668998064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:14:39,380] INFO: Commands: []
[2025-06-04 17:15:02,424] DEBUG: Checking approval status for server 8
[2025-06-04 17:15:02,425] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:15:04,469] DEBUG: Response status code: 200
[2025-06-04 17:15:04,470] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:15:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:15:04,470] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:15:04,470] INFO: Server is approved and ready to process commands
[2025-06-04 17:15:04,471] INFO: Fetching commands...
[2025-06-04 17:15:04,471] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:15:04,471] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:15:06,508] DEBUG: Response status code: 500
[2025-06-04 17:15:06,508] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:15:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:15:06,511] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878669133856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669134000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669134144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669134288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669134432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668989424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668999504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668999216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668999648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668999792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668999936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878669000080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669000224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878669000368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878669000512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669131840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878669131984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669132416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669132560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669132992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878669133136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669133280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669133424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669133568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669133712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:15:06,515] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878669133856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669134000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669134144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669134288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669134432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878668989424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878668999504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878668999216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878668999648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878668999792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878668999936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878669000080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669000224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878669000368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878669000512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669131840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878669131984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669132416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669132560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878669132848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669132992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878669133136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669133280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669133424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669133568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669133712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:15:06,517] INFO: Commands: []
[2025-06-04 17:15:29,573] DEBUG: Checking approval status for server 8
[2025-06-04 17:15:29,573] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:15:31,622] DEBUG: Response status code: 200
[2025-06-04 17:15:31,622] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:15:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:15:31,623] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:15:31,623] INFO: Server is approved and ready to process commands
[2025-06-04 17:15:31,623] INFO: Fetching commands...
[2025-06-04 17:15:31,624] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:15:31,624] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:15:33,694] DEBUG: Response status code: 500
[2025-06-04 17:15:33,694] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:15:33 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '66040', 'Connection': 'close'}
[2025-06-04 17:15:33,696] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878669140768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669140912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669141056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669141200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669141344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878669135440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878669137168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878669135728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878669137312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878669137888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878669138032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878669138176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669138320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878669138464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878669138608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669138752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878669138896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669139328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669139472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669139904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878669140048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669140192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669140336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669140480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669140624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:15:33,699] ERROR: Failed to fetch commands: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "F53bVjz5Fd1ZVPICnpoW";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1878669140768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669140912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669141056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669141200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669141344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1878669135440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1878669137168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1878669135728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1878669137312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1878669137888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1878669138032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1878669138176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">29</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span># Update last_seen timestamp whenever client contacts the system</pre>
<pre class="line before"><span class="ws">        </span>server.last_seen = dt.datetime.now(dt.timezone.utc)</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>g.server = server</pre>
<pre class="line current"><span class="ws">        </span>return f(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return decorated_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Initialize blueprints</pre>
<pre class="line after"><span class="ws"></span>print(&#34;API module loaded, blueprints ready for registration&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669138320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1696</em>,
      in <code class="function">get_client_commands</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>server = g.server</pre>
<pre class="line before"><span class="ws">    </span>if server.id != client_id:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Invalid client ID&#39;}), 403</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Get client config</pre>
<pre class="line current"><span class="ws">    </span>client_config = ClientConfig.query.filter_by(server_id=client_id).first()
<span class="ws">    </span>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>interval = client_config.client_poll_interval_seconds if client_config else 20</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># Get pending commands for this client from command_history</pre>
<pre class="line after"><span class="ws">    </span># Pending means:</pre>
<pre class="line after"><span class="ws">    </span># 1. run_status = &#39;pending&#39;</pre></div>
</div>

<li><div class="frame" id="frame-1878669138464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1878669138608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669138752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1878669138896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669139328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669139472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1878669139760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669139904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1878669140048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1878669140192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1878669140336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1878669140480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1878669140624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;client_configs.temporary_short_interval&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 29, in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1696, in get_client_commands
    client_config = ClientConfig.query.filter_by(server_id=client_id).first()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'client_configs.temporary_short_interval' in 'field list'")
[SQL: SELECT client_configs.id AS client_configs_id, client_configs.server_id AS client_configs_server_id, client_configs.update_interval_seconds AS client_configs_update_interval_seconds, client_configs.client_poll_interval_seconds AS client_configs_client_poll_interval_seconds, client_configs.max_output_lines AS client_configs_max_output_lines, client_configs.run_as_admin_default AS client_configs_run_as_admin_default, client_configs.run_in_sandbox_default AS client_configs_run_in_sandbox_default, client_configs.config_json AS client_configs_config_json, client_configs.created_at AS client_configs_created_at, client_configs.updated_at AS client_configs_updated_at, client_configs.temporary_short_interval AS client_configs_temporary_short_interval, client_configs.temporary_interval_end_time AS client_configs_temporary_interval_end_time 
FROM client_configs 
WHERE client_configs.server_id = %s 
 LIMIT %s]
[parameters: (8, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 17:15:33,699] INFO: Commands: []
[2025-06-04 17:19:11,691] DEBUG: Checking approval status for server 8
[2025-06-04 17:19:11,692] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:19:13,762] DEBUG: Response status code: 200
[2025-06-04 17:19:13,763] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:19:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:19:13,763] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:19:13,764] INFO: Server is approved and ready to process commands
[2025-06-04 17:19:13,764] INFO: Fetching commands...
[2025-06-04 17:19:13,764] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:19:13,764] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:19:15,794] DEBUG: Response status code: 200
[2025-06-04 17:19:15,794] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:19:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 17:19:15,795] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 17:19:15,795] INFO: Commands: []
[2025-06-04 17:21:45,870] DEBUG: Checking approval status for server 8
[2025-06-04 17:21:45,871] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:21:47,950] DEBUG: Response status code: 200
[2025-06-04 17:21:47,950] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:21:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:21:47,951] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:21:47,952] INFO: Server is approved and ready to process commands
[2025-06-04 17:21:47,953] INFO: Fetching commands...
[2025-06-04 17:21:47,954] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:21:47,955] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:21:50,001] DEBUG: Response status code: 200
[2025-06-04 17:21:50,002] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:21:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:21:50,002] DEBUG: Response data: {
  "commands": [],
  "interval": 3
}
[2025-06-04 17:21:50,003] INFO: Commands: []
[2025-06-04 17:21:55,049] DEBUG: Checking approval status for server 8
[2025-06-04 17:21:55,049] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:21:57,124] DEBUG: Response status code: 200
[2025-06-04 17:21:57,124] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:21:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:21:57,125] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:21:57,125] INFO: Server is approved and ready to process commands
[2025-06-04 17:21:57,126] INFO: Fetching commands...
[2025-06-04 17:21:57,127] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:21:57,127] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:21:59,178] DEBUG: Response status code: 200
[2025-06-04 17:21:59,178] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:21:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:21:59,179] DEBUG: Response data: {
  "commands": [],
  "interval": 3
}
[2025-06-04 17:21:59,180] INFO: Commands: []
[2025-06-04 17:22:04,219] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:04,219] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:06,286] DEBUG: Response status code: 200
[2025-06-04 17:22:06,286] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:06,288] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:06,288] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:06,288] INFO: Fetching commands...
[2025-06-04 17:22:06,289] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:06,290] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:08,330] DEBUG: Response status code: 200
[2025-06-04 17:22:08,330] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:22:08,331] DEBUG: Response data: {
  "commands": [],
  "interval": 3
}
[2025-06-04 17:22:08,334] INFO: Commands: []
[2025-06-04 17:22:13,366] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:13,366] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:15,435] DEBUG: Response status code: 200
[2025-06-04 17:22:15,436] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:15,436] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:15,437] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:15,437] INFO: Fetching commands...
[2025-06-04 17:22:15,438] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:15,438] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:17,474] DEBUG: Response status code: 200
[2025-06-04 17:22:17,475] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:22:17,475] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:22:17,476] INFO: Commands: []
[2025-06-04 17:22:19,532] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:19,533] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:21,620] DEBUG: Response status code: 200
[2025-06-04 17:22:21,622] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:21,624] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:21,625] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:21,626] INFO: Fetching commands...
[2025-06-04 17:22:21,628] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:21,629] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:23,686] DEBUG: Response status code: 200
[2025-06-04 17:22:23,687] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '144', 'Connection': 'close'}
[2025-06-04 17:22:23,687] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "17",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 17:22:23,688] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '17', 'id': None}]
[2025-06-04 17:22:25,720] INFO: Running command: dir (admin=True)
[2025-06-04 17:22:26,718] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                                                                                            \n----                 -------------         ------ ----                                                                                                                            \nda---l          6/3/2025   5:43 AM                nssm                                                                                                                            \nda---l          6/3/2025   5:43 PM                __pycache__                                                                                                                     \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                                                                                            \n-a---l          6/4/2025  12:04 PM          15075 client.py                                                                                                                       \n-a----          6/4/2025   5:22 PM            138 client_config.json                                                                                                              \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                                                                                         \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                                                                                      \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                                                                                   \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                                                                                        \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                                                                                            \n\n\n', 'error': '', 'duration': 0.9978575706481934, 'returncode': 0}
[2025-06-04 17:22:28,811] INFO: Result for command None sent successfully
[2025-06-04 17:22:28,811] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:28,812] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:30,859] DEBUG: Response status code: 200
[2025-06-04 17:22:30,860] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:30,860] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:30,861] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:30,862] INFO: Fetching commands...
[2025-06-04 17:22:30,863] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:30,864] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:32,903] DEBUG: Response status code: 200
[2025-06-04 17:22:32,903] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:22:32,904] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:22:32,907] INFO: Commands: []
[2025-06-04 17:22:34,951] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:34,951] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:36,996] DEBUG: Response status code: 200
[2025-06-04 17:22:36,997] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:36,998] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:36,998] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:36,999] INFO: Fetching commands...
[2025-06-04 17:22:37,000] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:37,001] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:39,045] DEBUG: Response status code: 200
[2025-06-04 17:22:39,046] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '151', 'Connection': 'close'}
[2025-06-04 17:22:39,047] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "systeminfo",
      "history_id": "18",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 17:22:39,050] INFO: Commands: [{'as_admin': True, 'command': 'systeminfo', 'history_id': '18', 'id': None}]
[2025-06-04 17:22:41,079] INFO: Running command: systeminfo (admin=True)
[2025-06-04 17:22:45,770] INFO: Result: {'success': True, 'output': '\nHost Name:                     LAP-MOSHEG\nOS Name:                       Microsoft Windows 11 Business\nOS Version:                    10.0.26100 N/A Build 26100\nOS Manufacturer:               Microsoft Corporation\nOS Configuration:              Standalone Workstation\nOS Build Type:                 Multiprocessor Free\nRegistered Owner:              N/A\nRegistered Organization:       N/A\nProduct ID:                    00330-73745-00003-AAOEM\nOriginal Install Date:         10/13/2024, 11:41:51 AM\nSystem Boot Time:              5/30/2025, 12:28:48 PM\nSystem Manufacturer:           LENOVO\nSystem Model:                  82RF\nSystem Type:                   x64-based PC\nProcessor(s):                  1 Processor(s) Installed.\n                               [01]: Intel64 Family 6 Model 154 Stepping 3 GenuineIntel ~2500 Mhz\nBIOS Version:                  LENOVO J2CN40WW, 4/15/2022\nWindows Directory:             C:\\WINDOWS\nSystem Directory:              C:\\WINDOWS\\system32\nBoot Device:                   \\Device\\HarddiskVolume1\nSystem Locale:                 en-us;English (United States)\nInput Locale:                  en-us;English (United States)\nTime Zone:                     (UTC+02:00) Jerusalem\nTotal Physical Memory:         32,492 MB\nAvailable Physical Memory:     3,531 MB\nVirtual Memory: Max Size:      79,596 MB\nVirtual Memory: Available:     17,603 MB\nVirtual Memory: In Use:        61,993 MB\nPage File Location(s):         C:\\pagefile.sys\nDomain:                        WORKGROUP\nLogon Server:                  \\\\LAP-MOSHEG\nHotfix(s):                     5 Hotfix(s) Installed.\n                               [01]: KB5054979\n                               [02]: KB5061977\n                               [03]: KB5058538\n                               [04]: KB5058523\n                               [05]: KB5059502\nNetwork Card(s):               9 NIC(s) Installed.\n                               [01]: Intel(R) Wi-Fi 6E AX211 160MHz\n                                     Connection Name: Wi-Fi\n                                     DHCP Enabled:    Yes\n                                     DHCP Server:     192.168.179.47\n                                     IP address(es)\n                                     [01]: 192.168.179.211\n                                     [02]: fe80::f95b:d3a4:c0ec:a347\n                               [02]: TAP-Windows Adapter V9\n                                     Connection Name: Ethernet 6\n                                     Status:          Media disconnected\n                               [03]: Fortinet SSL VPN Virtual Ethernet Adapter\n                                     Connection Name: Ethernet 4\n                                     Status:          Hardware not present\n                               [04]: Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n                                     Connection Name: Ethernet 5\n                                     Status:          Media disconnected\n                               [05]: Sophos TAP Adapter\n                                     Connection Name: Ethernet 3\n                                     Status:          Media disconnected\n                               [06]: Realtek PCIe GbE Family Controller\n                                     Connection Name: Ethernet\n                                     Status:          Media disconnected\n                               [07]: Bluetooth Device (Personal Area Network)\n                                     Connection Name: Bluetooth Network Connection\n                                     Status:          Media disconnected\n                               [08]: Wintun Userspace Tunnel\n                                     Connection Name: OpenVPN Wintun\n                                     Status:          Media disconnected\n                               [09]: OpenVPN Data Channel Offload\n                                     Connection Name: OpenVPN Data Channel Offload\n                                     Status:          Media disconnected\nVirtualization-based security: Status: Running\n                               Required Security Properties:\n                               Available Security Properties:\n                                     Base Virtualization Support\n                                     Secure Boot\n                                     DMA Protection\n                                     UEFI Code Readonly\n                                     SMM Security Mitigations 1.0\n                                     Mode Based Execution Control\n                                     APIC Virtualization\n                               Services Configured:\n                               Services Running:\n                               App Control for Business policy: Enforced\n                               App Control for Business user mode policy: Off\n                               Security Features Enabled:\nHyper-V Requirements:          A hypervisor has been detected. Features required for Hyper-V will not be displayed.\n', 'error': '', 'duration': 4.690839529037476, 'returncode': 0}
[2025-06-04 17:22:47,806] INFO: Result for command None sent successfully
[2025-06-04 17:22:47,806] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:47,808] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:49,846] DEBUG: Response status code: 200
[2025-06-04 17:22:49,847] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:49,848] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:49,850] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:49,851] INFO: Fetching commands...
[2025-06-04 17:22:49,852] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:49,853] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:51,894] DEBUG: Response status code: 200
[2025-06-04 17:22:51,894] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:22:51,895] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:22:51,896] INFO: Commands: []
[2025-06-04 17:22:53,953] DEBUG: Checking approval status for server 8
[2025-06-04 17:22:53,953] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:56,041] DEBUG: Response status code: 200
[2025-06-04 17:22:56,041] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:22:56,043] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:22:56,044] INFO: Server is approved and ready to process commands
[2025-06-04 17:22:56,045] INFO: Fetching commands...
[2025-06-04 17:22:56,045] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:22:56,048] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:22:58,081] DEBUG: Response status code: 200
[2025-06-04 17:22:58,082] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:22:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:22:58,082] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:22:58,083] INFO: Commands: []
[2025-06-04 17:23:00,128] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:00,128] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:02,186] DEBUG: Response status code: 200
[2025-06-04 17:23:02,186] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:02,187] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:02,187] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:02,188] INFO: Fetching commands...
[2025-06-04 17:23:02,188] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:02,190] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:04,227] DEBUG: Response status code: 200
[2025-06-04 17:23:04,228] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '149', 'Connection': 'close'}
[2025-06-04 17:23:04,229] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "tasklist",
      "history_id": "19",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 17:23:04,232] INFO: Commands: [{'as_admin': True, 'command': 'tasklist', 'history_id': '19', 'id': None}]
[2025-06-04 17:23:06,289] INFO: Running command: tasklist (admin=True)
[2025-06-04 17:23:07,719] INFO: Result: {'success': True, 'output': '\nImage Name                     PID Session Name        Session#    Mem Usage\n========================= ======== ================ =========== ============\nSystem Idle Process              0 Services                   0          8 K\nSystem                           4 Services                   0      6,688 K\nSecure System                  284 Services                   0    102,180 K\nRegistry                       328 Services                   0     49,292 K\nsmss.exe                       992 Services                   0        600 K\ncsrss.exe                     1548 Services                   0      3,048 K\nwininit.exe                   1664 Services                   0        476 K\ncsrss.exe                     1672 Console                    1      3,440 K\nservices.exe                  1736 Services                   0     11,552 K\nLsaIso.exe                    1756 Services                   0      1,360 K\nlsass.exe                     1764 Services                   0     27,048 K\nsvchost.exe                   1904 Services                   0     35,720 K\nWUDFHost.exe                  1936 Services                   0      9,920 K\nfontdrvhost.exe               1956 Services                   0        328 K\nsvchost.exe                   2036 Services                   0     36,120 K\nsvchost.exe                    964 Services                   0      5,676 K\nWUDFHost.exe                  1876 Services                   0      6,912 K\nwinlogon.exe                  2072 Console                    1      5,980 K\nfontdrvhost.exe               2120 Console                    1      2,152 K\nWUDFHost.exe                  2180 Services                   0      1,472 K\ndwm.exe                       2236 Console                    1    754,220 K\nsvchost.exe                   2524 Services                   0      3,036 K\nsvchost.exe                   2568 Services                   0      5,340 K\nsvchost.exe                   2580 Services                   0      2,064 K\nsvchost.exe                   2644 Services                   0      2,952 K\nsvchost.exe                   2656 Services                   0      2,752 K\nsvchost.exe                   2688 Services                   0     28,028 K\nsvchost.exe                   2696 Services                   0     10,300 K\nsvchost.exe                   2704 Services                   0      5,740 K\nsvchost.exe                   2884 Services                   0      5,588 K\nIntelCpHDCPSvc.exe            1656 Services                   0      1,732 K\nsvchost.exe                   2896 Services                   0      5,736 K\nsvchost.exe                   2960 Services                   0     16,272 K\nsvchost.exe                   3076 Services                   0     11,124 K\nsvchost.exe                   3088 Services                   0      2,216 K\nsvchost.exe                   3128 Services                   0      4,684 K\nsvchost.exe                   3256 Services                   0     20,904 K\nsvchost.exe                   3264 Services                   0      5,840 K\nsvchost.exe                   3512 Services                   0      7,408 K\nsvchost.exe                   3628 Services                   0      2,260 K\nsvchost.exe                   3692 Services                   0     51,228 K\nsvchost.exe                   3992 Services                   0      6,596 K\nvmms.exe                      4052 Services                   0      8,852 K\nsvchost.exe                   4080 Services                   0      3,176 K\nsvchost.exe                   4104 Services                   0      2,592 K\nsvchost.exe                   4304 Services                   0     12,732 K\nsvchost.exe                   4340 Services                   0      4,936 K\nsvchost.exe                   4396 Services                   0      6,124 K\nWUDFHost.exe                  4448 Services                   0      3,140 K\nsvchost.exe                   4728 Services                   0      3,976 K\nNVDisplay.Container.exe       4736 Services                   0     19,652 K\nsvchost.exe                   4760 Services                   0      4,708 K\nsvchost.exe                   4868 Services                   0      2,040 K\nsvchost.exe                   4876 Services                   0      7,628 K\nsvchost.exe                   4896 Services                   0      4,536 K\nsvchost.exe                   5080 Services                   0     19,716 K\nsvchost.exe                   3284 Services                   0     16,912 K\nsvchost.exe                   4612 Services                   0      5,616 K\nsvchost.exe                   5060 Services                   0      2,180 K\nsvchost.exe                   4984 Services                   0      6,892 K\nsvchost.exe                   5228 Services                   0      3,884 K\nsvchost.exe                   5236 Services                   0      4,232 K\nMemory Compression            5272 Services                   0    409,440 K\nsvchost.exe                   5356 Services                   0     10,032 K\nsvchost.exe                   5388 Services                   0      3,108 K\nsvchost.exe                   5472 Services                   0      4,196 K\nsvchost.exe                   5480 Services                   0      6,344 K\nsvchost.exe                   5488 Services                   0      3,468 K\nsvchost.exe                   5728 Services                   0     12,840 K\nsvchost.exe                   5808 Services                   0      5,152 K\nsvchost.exe                   5880 Services                   0     24,124 K\nscheduler.exe                 5900 Services                   0      4,860 K\nsvchost.exe                   5992 Services                   0      4,516 K\nsvchost.exe                   5192 Services                   0     18,276 K\nNVDisplay.Container.exe       6340 Console                    1     25,552 K\nspoolsv.exe                   6412 Services                   0      7,104 K\nAWSVPNClient.Service.exe      6612 Services                   0      3,648 K\narmsvc.exe                    6624 Services                   0      1,680 K\nsvchost.exe                   6640 Services                   0     57,652 K\nsvchost.exe                   6648 Services                   0     38,284 K\nsvchost.exe                   6660 Services                   0     14,380 K\nElevocControlService.exe      6676 Services                   0      3,852 K\nOneApp.IGCC.WinService.ex     6684 Services                   0     14,856 K\nsvchost.exe                   6712 Services                   0      6,456 K\nLenovoVantageService.exe      6720 Services                   0     37,036 K\nWsNativePushService.exe       6728 Services                   0      2,784 K\nSSUService.exe                6736 Services                   0      5,840 K\nsvchost.exe                   6744 Services                   0      1,368 K\nMpDefenderCoreService.exe     6752 Services                   0     12,780 K\nTobii.Service.exe             6780 Services                   0     12,000 K\nsvchost.exe                   6796 Services                   0      3,524 K\nsvchost.exe                   6804 Services                   0      2,168 K\nLenovoUtilityService.exe      6816 Services                   0      9,756 K\nLenovo.Modern.ImControlle     6828 Services                   0     28,940 K\nNahimicService.exe            6840 Services                   0     17,604 K\nMsSense.exe                   6852 Services                   0    240,692 K\nOfficeClickToRun.exe          6860 Services                   0     24,508 K\nWMIRegistrationService.ex     6868 Services                   0      2,132 K\nIntelAudioService.exe         6880 Services                   0      4,712 K\npg_ctl.exe                    6888 Services                   0      1,904 K\nMsMpEng.exe                   6904 Services                   0    448,764 K\nSRService.exe                 6944 Services                   0      2,168 K\nopenvpnserv2.exe              6964 Services                   0      2,748 K\nLogiSyncStub.exe              7016 Services                   0      2,404 K\nsvchost.exe                   7040 Services                   0     13,744 K\nNvBroadcast.Container.exe     7048 Services                   0      2,784 K\nlogioptionsplus_updater.e     7056 Services                   0     10,388 K\nscvpn.exe                     7068 Services                   0      7,288 K\nwslservice.exe                7092 Services                   0      7,612 K\nRtkAudUService64.exe          7104 Services                   0      4,792 K\nCptService.exe                7124 Services                   0      1,572 K\nipfsvc.exe                    7164 Services                   0      2,124 K\nsvchost.exe                   7172 Services                   0      4,508 K\nTeamViewer_Service.exe        7204 Services                   0      6,384 K\nipf_uf.exe                    7968 Services                   0      1,924 K\njhi_service.exe               7988 Services                   0      1,624 K\nSRManager.exe                 8424 Services                   0      6,736 K\nWmiPrvSE.exe                  8540 Services                   0     79,336 K\nWmiPrvSE.exe                  8584 Services                   0     64,384 K\nsvchost.exe                   9152 Services                   0      5,508 K\nNvBroadcast.Container.exe     9396 Console                    1     13,860 K\npostgres.exe                 10092 Services                   0      1,824 K\nconhost.exe                  10116 Services                   0      1,264 K\nsvchost.exe                  10384 Services                   0      6,664 K\nNgcIso.exe                   10600 Services                   0        440 K\ndasHost.exe                  10680 Services                   0      5,860 K\npostgres.exe                 10740 Services                   0      1,780 K\npostgres.exe                 10876 Services                   0      1,680 K\npostgres.exe                 10884 Services                   0      1,612 K\nvmcompute.exe                 6940 Services                   0      2,432 K\nsvchost.exe                   9212 Services                   0      3,404 K\nunsecapp.exe                 10848 Services                   0      4,260 K\nsvchost.exe                  11276 Services                   0      4,816 K\nsvchost.exe                  11452 Services                   0     24,204 K\nsvchost.exe                  11788 Services                   0     23,096 K\nsvchost.exe                  12020 Services                   0     21,840 K\nAggregatorHost.exe            1752 Services                   0      7,304 K\npostgres.exe                  6468 Services                   0      1,520 K\npostgres.exe                  6488 Services                   0      2,224 K\npostgres.exe                  5428 Services                   0      2,060 K\nFCDBLog.exe                   6632 Services                   0      4,680 K\nFortiSSLVPNdaemon.exe         2548 Services                   0      1,512 K\nFortiSettings.exe             6524 Services                   0        588 K\nSRAppPB.exe                  12904 Console                    1      3,164 K\nsvchost.exe                  12928 Services                   0     12,628 K\nsvchost.exe                   9028 Services                   0      1,672 K\nsvchost.exe                   8108 Services                   0     19,664 K\nsvchost.exe                  13668 Services                   0     17,160 K\nipf_helper.exe               14244 Console                    1      2,972 K\nsihost.exe                   11988 Console                    1     22,044 K\nsvchost.exe                  13408 Console                    1      4,336 K\nsvchost.exe                  13392 Console                    1     26,428 K\nsvchost.exe                   9748 Console                    1      1,676 K\nsvchost.exe                  11084 Console                    1     15,764 K\nFnHotkeyCapsLKNumLK.exe      10868 Console                    1      2,060 K\nSRFeature.exe                10260 Console                    1      2,920 K\nFortiTray.exe                10780 Console                    1      9,708 K\ntaskhostw.exe                 8500 Console                    1     13,996 K\nsvchost.exe                  13956 Services                   0      8,676 K\nunsecapp.exe                  3440 Console                    1      3,012 K\nSearchIndexer.exe             3656 Services                   0     35,652 K\nSRServer.exe                  5292 Console                    1      5,804 K\nunsecapp.exe                 10988 Console                    1      6,608 K\nexplorer.exe                  6456 Console                    1    287,616 K\nlogioptionsplus_agent.exe    14348 Console                    1     66,920 K\nFnHotkeyUtility.exe          15416 Console                    1      9,916 K\nWsToastNotification.exe      16328 Console                    1      2,200 K\nconhost.exe                  15004 Console                    1      1,144 K\nnahimicNotifSys.exe           6372 Console                    1      8,968 K\nctfmon.exe                    4512 Console                    1     22,740 K\nSenseTVM.exe                 14472 Services                   0      3,356 K\nsvchost.exe                  15840 Console                    1     39,180 K\nStartMenuExperienceHost.e    17196 Console                    1     79,260 K\nRuntimeBroker.exe            16432 Console                    1     30,720 K\nsvchost.exe                  16444 Console                    1      5,268 K\nRuntimeBroker.exe            13512 Console                    1     16,012 K\nApplicationFrameHost.exe     14504 Console                    1     15,260 K\nTextInputHost.exe            17828 Console                    1    990,048 K\ndllhost.exe                  17312 Console                    1      4,892 K\nsvchost.exe                  18972 Console                    1      7,156 K\nNisSrv.exe                    1872 Services                   0     26,632 K\nsvchost.exe                  19268 Console                    1      7,824 K\nSecurityHealthSystray.exe    19208 Console                    1      2,432 K\nSecurityHealthService.exe    14440 Services                   0      9,244 K\nsvchost.exe                  15012 Services                   0     18,036 K\nRtkAudUService64.exe         18364 Console                    1      4,048 K\nsvchost.exe                   7616 Services                   0      4,108 K\nLangOver.exe                  5948 Console                    1     24,416 K\n1Password.exe                 7560 Console                    1     25,352 K\n1Password.exe                18920 Console                    1      7,136 K\n1Password.exe                10004 Console                    1     10,292 K\nMicrosoft.Management.Serv    15928 Services                   0     54,220 K\nsvchost.exe                  11064 Services                   0      9,240 K\nPhoneExperienceHost.exe       9872 Console                    1     39,960 K\nsvchost.exe                  14140 Services                   0      7,232 K\nsvchost.exe                  17304 Services                   0      2,264 K\nsvchost.exe                   4072 Services                   0      5,768 K\nWidgets.exe                  21392 Console                    1     25,848 K\nopenvpn-gui.exe              19940 Console                    1      7,968 K\nslack.exe                    22092 Console                    1     74,944 K\nslack.exe                    17436 Console                    1      2,828 K\nslack.exe                    16472 Console                    1     21,296 K\nslack.exe                     6992 Console                    1     43,208 K\ndllhost.exe                  19484 Console                    1      4,936 K\nslack.exe                    23084 Console                    1    223,820 K\nslack.exe                    24328 Console                    1      5,520 K\nslack.exe                    24336 Console                    1      8,240 K\nSearchHost.exe               17544 Console                    1     55,040 K\nCrossDeviceService.exe       20088 Console                    1     19,904 K\nUserOOBEBroker.exe            4964 Console                    1      3,856 K\nINZONEHub.exe                17972 Console                    1     39,208 K\nWSHelper.exe                  4460 Console                    1      6,224 K\nms-teams.exe                  9064 Console                    1     14,988 K\nRemoteDesktopManager64.ex    21964 Console                    1     61,556 K\nscgui.exe                    21536 Console                    1     27,968 K\nRuntimeBroker.exe             4864 Console                    1      1,868 K\nRuntimeBroker.exe             5132 Console                    1      2,304 K\ndllhost.exe                  17768 Console                    1      4,656 K\nShellExperienceHost.exe      22208 Console                    1     28,916 K\nRuntimeBroker.exe            21616 Console                    1      8,060 K\nsvchost.exe                  25360 Services                   0     17,656 K\nmsedgewebview2.exe           14128 Console                    1     48,964 K\nmsedgewebview2.exe           20684 Console                    1      1,100 K\nmsedgewebview2.exe           24096 Console                    1     16,720 K\nmsedgewebview2.exe           24140 Console                    1     13,276 K\nmsedgewebview2.exe           25608 Console                    1      3,164 K\nmsedgewebview2.exe           25656 Console                    1      5,608 K\nmsedgewebview2.exe           25688 Console                    1      4,564 K\nmsedgewebview2.exe           25772 Console                    1      9,308 K\nmsedgewebview2.exe            7364 Console                    1      4,828 K\nmsedgewebview2.exe           11592 Console                    1      6,892 K\nAdobeCollabSync.exe          10856 Console                    1      3,772 K\nAdobeCollabSync.exe          21904 Console                    1      6,484 K\nLenovoVantage-(VantageCor    20128 Services                   0     14,196 K\nLenovoVantage-(LenovoGami    24556 Services                   0     14,564 K\nLenovoVantage-(GenericMes    11272 Console                    1      6,700 K\nbackgroundTaskHost.exe       24552 Console                    1      7,332 K\nLocator.exe                  20364 Services                   0      1,260 K\nRuntimeBroker.exe            22864 Console                    1      5,476 K\nbackgroundTaskHost.exe       18372 Console                    1        252 K\nSystemSettings.exe            2516 Console                    1         36 K\nsvchost.exe                  13116 Services                   0      2,004 K\nsvchost.exe                  14632 Console                    1      5,456 K\nsvchost.exe                  21588 Services                   0      4,768 K\nsvchost.exe                   1096 Services                   0      3,424 K\nsvchost.exe                  13984 Services                   0      6,448 K\nsvchost.exe                  13108 Services                   0      2,148 K\nsvchost.exe                  24808 Services                   0      3,956 K\nbackgroundTaskHost.exe        8340 Console                    1         36 K\nWidgetService.exe             5604 Console                    1      3,196 K\nbackgroundTaskHost.exe        7612 Console                    1         36 K\nbackgroundTaskHost.exe       22192 Console                    1         56 K\nbackgroundTaskHost.exe        6356 Console                    1         44 K\nbackgroundTaskHost.exe       13712 Console                    1         68 K\nbackgroundTaskHost.exe        7600 Console                    1         40 K\nmsedgewebview2.exe           24956 Console                    1     96,092 K\nmsedgewebview2.exe           20540 Console                    1      1,676 K\nmsedgewebview2.exe           20328 Console                    1    138,772 K\nmsedgewebview2.exe           19884 Console                    1     21,704 K\nmsedgewebview2.exe           19440 Console                    1      6,572 K\nmsedgewebview2.exe            2496 Console                    1    362,644 K\nms-teams.exe                   968 Console                    1     30,364 K\nmsedgewebview2.exe           20620 Console                    1     10,284 K\nbackgroundTaskHost.exe       13468 Console                    1         36 K\nmysqld.exe                    4440 Services                   0      2,052 K\nmysqld.exe                   23300 Services                   0     51,096 K\nconhost.exe                  22748 Services                   0        692 K\nMySQLWorkbench.exe             624 Console                    1     51,740 K\nbackgroundTaskHost.exe       14144 Console                    1         36 K\nWmiPrvSE.exe                 16788 Services                   0     13,708 K\nbackgroundTaskHost.exe       22624 Console                    1        188 K\nchrome.exe                   11716 Console                    1    575,576 K\nchrome.exe                   26268 Console                    1      2,560 K\nchrome.exe                   25828 Console                    1    319,332 K\nchrome.exe                   13928 Console                    1     49,660 K\nchrome.exe                   28668 Console                    1      7,264 K\nchrome.exe                   31436 Console                    1      6,432 K\nchrome.exe                   22596 Console                    1     10,192 K\nbackgroundTaskHost.exe       17208 Console                    1         40 K\nbackgroundTaskHost.exe        4564 Console                    1         52 K\nsvchost.exe                   2440 Services                   0      2,148 K\nWINWORD.EXE                  29256 Console                    1    153,464 K\nsvchost.exe                  32736 Services                   0      3,080 K\nai.exe                       36076 Console                    1        384 K\nchrome.exe                   36872 Console                    1     67,448 K\ncmd.exe                      34144 Console                    1        264 K\nconhost.exe                  35080 Console                    1      1,328 K\n1Password-BrowserSupport.    29532 Console                    1      2,528 K\nai.exe                       40832 Console                    1        568 K\nbackgroundTaskHost.exe       17140 Console                    1         44 K\nmsedge.exe                    5156 Console                    1    130,820 K\nmsedge.exe                   27664 Console                    1      2,716 K\nmsedge.exe                   41852 Console                    1     40,144 K\nmsedge.exe                   30296 Console                    1     31,072 K\nmsedge.exe                   37892 Console                    1      5,360 K\nFileCoAuth.exe               19416 Console                    1     15,976 K\nOneDrive.exe                 42476 Console                    1    848,704 K\nMicrosoft.SharePoint.exe     28940 Console                    1     28,144 K\nFileSyncHelper.exe           10144 Services                   0     13,004 K\nbackgroundTaskHost.exe       42416 Console                    1        188 K\nbackgroundTaskHost.exe       19464 Console                    1         36 K\nbackgroundTaskHost.exe       29676 Console                    1        212 K\nCode.exe                     40796 Console                    1     74,040 K\nCode.exe                     40752 Console                    1      2,832 K\nCode.exe                     37808 Console                    1     49,412 K\nCode.exe                     38720 Console                    1     18,880 K\nCode.exe                     28784 Console                    1    121,480 K\nCode.exe                     20940 Console                    1    121,096 K\nCode.exe                     32292 Console                    1     49,712 K\nCode.exe                     29520 Console                    1     38,572 K\nCode.exe                     36828 Console                    1     69,484 K\nCode.exe                     39148 Console                    1     10,220 K\nCode.exe                     27068 Console                    1      9,600 K\nCode.exe                     39328 Console                    1     17,292 K\nconhost.exe                  38988 Console                    1        600 K\npowershell.exe                9112 Console                    1      5,632 K\nterraform-ls.exe             18448 Console                    1    192,908 K\nconhost.exe                  28028 Console                    1        224 K\nCode.exe                     26276 Console                    1      3,076 K\nCode.exe                     38836 Console                    1      2,924 K\ndocker-language-server-wi    31156 Console                    1      8,480 K\nconhost.exe                  38432 Console                    1        232 K\nCode.exe                     11568 Console                    1      6,880 K\nCodeSetup-stable-848b80ae    42212 Console                    1        764 K\nCodeSetup-stable-848b80ae    29304 Console                    1      2,592 K\nCode.exe                     42920 Console                    1    210,756 K\nCode.exe                     42740 Console                    1     11,456 K\nCode.exe                     27756 Console                    1     48,812 K\nterraform-ls.exe             33472 Console                    1    377,156 K\nconhost.exe                  29896 Console                    1        220 K\nbackgroundTaskHost.exe       35328 Console                    1        184 K\nmsedgewebview2.exe           38260 Console                    1     11,472 K\nconhost.exe                  24532 Console                    1        592 K\npowershell.exe               40520 Console                    1      5,684 K\nCode.exe                     41684 Console                    1      3,736 K\nCode.exe                     29200 Console                    1    120,824 K\nCode.exe                     38580 Console                    1     46,972 K\nCode.exe                     36788 Console                    1      9,452 K\nCode.exe                     29032 Console                    1      4,316 K\nconhost.exe                   6876 Console                    1        880 K\npowershell.exe               19240 Console                    1      5,536 K\nCode.exe                     37172 Console                    1      2,560 K\nCode.exe                     41440 Console                    1    117,636 K\nCode.exe                     37928 Console                    1     48,156 K\nCode.exe                     10212 Console                    1     12,540 K\nCode.exe                     17396 Console                    1      2,660 K\nterraform-ls.exe             40360 Console                    1    195,404 K\nconhost.exe                  30284 Console                    1        288 K\nconhost.exe                  39168 Console                    1        620 K\npowershell.exe               16268 Console                    1      5,700 K\npython3.10.exe               17648 Console                    1      2,404 K\nconhost.exe                  21612 Console                    1        224 K\nCode.exe                     36944 Console                    1      8,592 K\npython3.10.exe               31916 Console                    1        604 K\nCode.exe                      4284 Console                    1    193,220 K\nCode.exe                     16008 Console                    1     23,652 K\nCode.exe                     32344 Console                    1     74,836 K\nterraform-ls.exe             37736 Console                    1    223,728 K\nconhost.exe                  37000 Console                    1      1,172 K\nbackgroundTaskHost.exe       13740 Console                    1         52 K\nolk.exe                      26716 Console                    1     27,020 K\nmsedgewebview2.exe           29816 Console                    1     90,336 K\nmsedgewebview2.exe           44556 Console                    1      1,472 K\nmsedgewebview2.exe           17332 Console                    1     13,560 K\nmsedgewebview2.exe           31808 Console                    1     25,812 K\nmsedgewebview2.exe           18412 Console                    1      5,508 K\nmsedgewebview2.exe           32940 Console                    1    520,348 K\nRuntimeBroker.exe            17372 Console                    1      2,288 K\nmsedgewebview2.exe           44268 Console                    1      4,692 K\nchrome.exe                   27360 Console                    1     53,660 K\ncmd.exe                      42848 Console                    1        152 K\nconhost.exe                  28936 Console                    1      1,112 K\nOpenConsole.exe              44292 Console                    1      2,028 K\nWindowsTerminal.exe          41316 Console                    1     77,360 K\nmsedge.exe                   32820 Console                    1     25,216 K\nmsedge.exe                   18656 Console                    1      8,028 K\nmsedge.exe                   41444 Console                    1      7,688 K\nmsedge.exe                   45900 Console                    1      7,480 K\nmsedge.exe                   28100 Console                    1     11,016 K\nmsedge.exe                   35020 Console                    1      7,900 K\nmsedge.exe                   40068 Console                    1      7,952 K\nmsedge.exe                   44044 Console                    1      7,680 K\nmsedge.exe                   39120 Console                    1     20,640 K\nmsedge.exe                   47508 Console                    1      7,956 K\nRuntimeBroker.exe            18120 Console                    1      8,596 K\nmsedge.exe                   41540 Console                    1     25,584 K\nchrome.exe                   41116 Console                    1     84,204 K\nbackgroundTaskHost.exe       47052 Console                    1        200 K\nSnippingTool.exe             34412 Console                    1     35,708 K\nCode.exe                     41700 Console                    1      3,340 K\nbackgroundTaskHost.exe       20624 Console                    1        220 K\nPostman.exe                  10704 Console                    1     54,112 K\nPostman.exe                  44868 Console                    1      1,892 K\nPostman.exe                  47388 Console                    1     31,964 K\nPostman.exe                  45388 Console                    1     21,464 K\nPostman.exe                  14596 Console                    1    270,404 K\nPostman.exe                  37860 Console                    1      4,616 K\nbackgroundTaskHost.exe       48728 Console                    1         36 K\nCode.exe                     41524 Console                    1      2,564 K\nbackgroundTaskHost.exe       46588 Console                    1         36 K\ntaskhostw.exe                29836 Console                    1     15,660 K\nbackgroundTaskHost.exe       45460 Console                    1         60 K\nsvchost.exe                  46200 Services                   0      1,928 K\nCode.exe                     40628 Console                    1      2,792 K\nbackgroundTaskHost.exe       48784 Console                    1         52 K\nCursor.exe                    4076 Console                    1    219,604 K\nCursor.exe                   31972 Console                    1      2,072 K\nCursor.exe                   38016 Console                    1    112,756 K\nCursor.exe                   12804 Console                    1     17,684 K\nCursor.exe                   27560 Console                    1  1,635,780 K\nCursor.exe                   32880 Console                    1     56,228 K\nCursor.exe                   14112 Console                    1     17,852 K\nCursor.exe                   37044 Console                    1    333,324 K\nCursor.exe                   47240 Console                    1     59,896 K\nconhost.exe                   8156 Console                    1        616 K\npowershell.exe               42228 Console                    1      5,700 K\nchrome.exe                   45252 Console                    1     37,676 K\nchrome.exe                   46272 Console                    1      1,024 K\nchrome.exe                   49140 Console                    1     19,424 K\nchrome.exe                    9052 Console                    1      3,128 K\nchrome.exe                   34664 Console                    1      3,716 K\nchrome.exe                   42952 Console                    1      4,960 K\nCursor.exe                   49092 Console                    1      4,284 K\nCursor.exe                   29736 Console                    1      8,988 K\nconhost.exe                  14420 Console                    1        852 K\npowershell.exe               26980 Console                    1      5,740 K\nCursor.exe                   44820 Console                    1     30,400 K\nchrome.exe                   25100 Console                    1    133,080 K\nNahimic3.exe                 47124 Console                    1      3,952 K\nRuntimeBroker.exe            50548 Console                    1      3,752 K\nbackgroundTaskHost.exe         592 Console                    1         36 K\nCursor.exe                   14972 Console                    1    100,376 K\nCursor.exe                   18444 Console                    1      1,476 K\nCursor.exe                   49200 Console                    1      1,380 K\nCursor.exe                   23992 Console                    1      1,468 K\nbackgroundTaskHost.exe       29104 Console                    1        224 K\nbackgroundTaskHost.exe       25696 Console                    1         40 K\nbackgroundTaskHost.exe       36496 Console                    1         60 K\nbackgroundTaskHost.exe       25056 Console                    1         36 K\nbackgroundTaskHost.exe       30136 Console                    1         40 K\nbackgroundTaskHost.exe       48584 Console                    1         52 K\nbackgroundTaskHost.exe       24472 Console                    1         36 K\nbackgroundTaskHost.exe       24036 Console                    1         36 K\nbackgroundTaskHost.exe       47224 Console                    1        236 K\nbackgroundTaskHost.exe       47472 Console                    1        204 K\nbackgroundTaskHost.exe       21736 Console                    1         60 K\nbackgroundTaskHost.exe       40516 Console                    1        280 K\nbackgroundTaskHost.exe       42180 Console                    1         36 K\nbackgroundTaskHost.exe       32188 Console                    1         68 K\ndocker-language-server-wi    22540 Console                    1      8,552 K\nconhost.exe                  12436 Console                    1        220 K\nCursor.exe                   26884 Console                    1      3,184 K\nbackgroundTaskHost.exe        5144 Console                    1         44 K\nbackgroundTaskHost.exe        4424 Console                    1         60 K\nbackgroundTaskHost.exe       17492 Console                    1         52 K\nbackgroundTaskHost.exe       38552 Console                    1         56 K\nbackgroundTaskHost.exe       27076 Console                    1         84 K\nbackgroundTaskHost.exe       51860 Console                    1         36 K\nbackgroundTaskHost.exe       51188 Console                    1        208 K\nbackgroundTaskHost.exe       52068 Console                    1         44 K\nbackgroundTaskHost.exe       40728 Console                    1        216 K\nbackgroundTaskHost.exe       37284 Console                    1         52 K\nbackgroundTaskHost.exe       50012 Console                    1         40 K\nbackgroundTaskHost.exe       24400 Console                    1         56 K\nbackgroundTaskHost.exe       38788 Console                    1         36 K\nbackgroundTaskHost.exe       46132 Console                    1         40 K\nbackgroundTaskHost.exe       52568 Console                    1        212 K\nbackgroundTaskHost.exe       34380 Console                    1         52 K\nbackgroundTaskHost.exe       53148 Console                    1         44 K\nbackgroundTaskHost.exe       28132 Console                    1         52 K\nbackgroundTaskHost.exe       51356 Console                    1         36 K\nbackgroundTaskHost.exe       53104 Console                    1         36 K\nbackgroundTaskHost.exe       32484 Console                    1         48 K\nbackgroundTaskHost.exe        8820 Console                    1         36 K\nbackgroundTaskHost.exe       35780 Console                    1        208 K\nbackgroundTaskHost.exe       52752 Console                    1         36 K\nbackgroundTaskHost.exe       50704 Console                    1         36 K\nbackgroundTaskHost.exe       36804 Console                    1         44 K\nbackgroundTaskHost.exe       53120 Console                    1         52 K\nbackgroundTaskHost.exe       22704 Console                    1         36 K\nbackgroundTaskHost.exe       32132 Console                    1         48 K\nbackgroundTaskHost.exe       21056 Console                    1        240 K\nbackgroundTaskHost.exe       25388 Console                    1         52 K\nbackgroundTaskHost.exe       51288 Console                    1         36 K\nbackgroundTaskHost.exe       25592 Console                    1         36 K\nbackgroundTaskHost.exe       42456 Console                    1         40 K\nbackgroundTaskHost.exe       46212 Console                    1         40 K\nbackgroundTaskHost.exe       20268 Console                    1         52 K\nbackgroundTaskHost.exe       51624 Console                    1         64 K\nbackgroundTaskHost.exe       48896 Console                    1         56 K\nbackgroundTaskHost.exe       47144 Console                    1        244 K\nbackgroundTaskHost.exe       29756 Console                    1         56 K\nbackgroundTaskHost.exe       48740 Console                    1         36 K\nbackgroundTaskHost.exe       53748 Console                    1         52 K\nbackgroundTaskHost.exe       38292 Console                    1         60 K\nbackgroundTaskHost.exe       46804 Console                    1         48 K\nbackgroundTaskHost.exe       50552 Console                    1         40 K\nbackgroundTaskHost.exe       45804 Console                    1         44 K\nbackgroundTaskHost.exe       48696 Console                    1         36 K\nbackgroundTaskHost.exe       50480 Console                    1         56 K\nbackgroundTaskHost.exe       55388 Console                    1         36 K\nbackgroundTaskHost.exe       38368 Console                    1         44 K\nbackgroundTaskHost.exe       28344 Console                    1         56 K\nbackgroundTaskHost.exe       34400 Console                    1         44 K\nbackgroundTaskHost.exe       52980 Console                    1         40 K\nbackgroundTaskHost.exe       28988 Console                    1         60 K\nbackgroundTaskHost.exe       49504 Console                    1         40 K\nbackgroundTaskHost.exe       47044 Console                    1         44 K\nbackgroundTaskHost.exe       54672 Console                    1         52 K\nbackgroundTaskHost.exe       38584 Console                    1         44 K\nbackgroundTaskHost.exe       54452 Console                    1         52 K\nbackgroundTaskHost.exe       30420 Console                    1        236 K\nbackgroundTaskHost.exe       55276 Console                    1        228 K\nbackgroundTaskHost.exe       55696 Console                    1         44 K\nbackgroundTaskHost.exe       12732 Console                    1        224 K\nbackgroundTaskHost.exe       39876 Console                    1         52 K\nbackgroundTaskHost.exe       52036 Console                    1        248 K\nbackgroundTaskHost.exe       56208 Console                    1        284 K\nbackgroundTaskHost.exe       37088 Console                    1         36 K\nbackgroundTaskHost.exe       48304 Console                    1         52 K\nbackgroundTaskHost.exe       57892 Console                    1         60 K\nbackgroundTaskHost.exe       16392 Console                    1         56 K\nbackgroundTaskHost.exe       52608 Console                    1         52 K\nbackgroundTaskHost.exe       57392 Console                    1         40 K\nbackgroundTaskHost.exe       54440 Console                    1         60 K\nbackgroundTaskHost.exe       57176 Console                    1        240 K\nbackgroundTaskHost.exe       54532 Console                    1        208 K\nbackgroundTaskHost.exe       57024 Console                    1         36 K\nchrome.exe                   59120 Console                    1    199,708 K\nbackgroundTaskHost.exe       58428 Console                    1        236 K\nbackgroundTaskHost.exe       57168 Console                    1         64 K\nbackgroundTaskHost.exe       57992 Console                    1         40 K\nbackgroundTaskHost.exe       52732 Console                    1         52 K\nbackgroundTaskHost.exe       28304 Console                    1         60 K\nbackgroundTaskHost.exe       57576 Console                    1        240 K\nbackgroundTaskHost.exe       16720 Console                    1        240 K\nbackgroundTaskHost.exe       60352 Console                    1        232 K\nbackgroundTaskHost.exe       50316 Console                    1         44 K\nPrintDialog.exe              58268 Console                    1         80 K\ndasHost.exe                  34500 Services                   0         76 K\ndasHost.exe                  57848 Services                   0        324 K\nsvchost.exe                  38812 Services                   0      2,772 K\nbackgroundTaskHost.exe       58720 Console                    1        240 K\nbackgroundTaskHost.exe       54668 Console                    1         56 K\nbackgroundTaskHost.exe       57476 Console                    1         52 K\nbackgroundTaskHost.exe       58300 Console                    1         56 K\nmsedge.exe                   60032 Console                    1     13,704 K\ncmd.exe                      60676 Console                    1        292 K\nconhost.exe                  51080 Console                    1      1,112 K\nOpenConsole.exe              62896 Console                    1      1,964 K\nCode.exe                     59788 Console                    1    160,756 K\nCode.exe                     58860 Console                    1      8,192 K\nCode.exe                     56528 Console                    1     42,080 K\nconhost.exe                  59664 Console                    1        684 K\npowershell.exe               57272 Console                    1      5,660 K\nCode.exe                     58468 Console                    1      4,416 K\nCode.exe                     53572 Console                    1      3,680 K\nbackgroundTaskHost.exe       13360 Console                    1         56 K\nbackgroundTaskHost.exe       58336 Console                    1         52 K\nOpenConsole.exe              62120 Console                    1      1,840 K\ncmd.exe                      36912 Console                    1      2,424 K\nbackgroundTaskHost.exe        1336 Console                    1         56 K\ncmd.exe                      58492 Console                    1        308 K\nconhost.exe                  58128 Console                    1      6,220 K\nmmc.exe                      34820 Console                    1     16,636 K\nTaskmgr.exe                  61472 Console                    1    138,072 K\ncpptools.exe                 24812 Console                    1     18,812 K\nconhost.exe                  61716 Console                    1        188 K\ndllhost.exe                  62936 Console                    1      2,788 K\nbackgroundTaskHost.exe       37132 Console                    1         40 K\nbackgroundTaskHost.exe       43892 Console                    1         48 K\nbackgroundTaskHost.exe       10980 Console                    1         44 K\nbackgroundTaskHost.exe       51220 Console                    1         96 K\nmysql.exe                    35156 Console                    1        172 K\nconhost.exe                  62544 Console                    1      1,592 K\nOpenConsole.exe              35796 Console                    1      2,060 K\nchrome.exe                   62604 Console                    1    130,316 K\nbackgroundTaskHost.exe       36312 Console                    1         64 K\nbackgroundTaskHost.exe       29576 Console                    1         68 K\nGrammarly.Desktop.exe        64892 Console                    1    239,408 K\nbackgroundTaskHost.exe       56148 Console                    1         84 K\nchrome.exe                   43792 Console                    1    136,624 K\nchrome.exe                   34152 Console                    1    195,088 K\nCursor.exe                   64004 Console                    1    380,120 K\nbackgroundTaskHost.exe       63976 Console                    1         48 K\nconhost.exe                  52240 Console                    1      1,120 K\npowershell.exe               39860 Console                    1      4,736 K\nchrome.exe                   22680 Console                    1    300,312 K\nbackgroundTaskHost.exe       66808 Console                    1         64 K\nCursor.exe                   21036 Console                    1    184,520 K\nCursor.exe                   38160 Console                    1     13,560 K\nCursor.exe                   29128 Console                    1    112,392 K\nchrome.exe                   65224 Console                    1     36,108 K\nchrome.exe                   62440 Console                    1      1,060 K\nchrome.exe                    4840 Console                    1     19,284 K\nchrome.exe                   48080 Console                    1      3,260 K\nchrome.exe                   37392 Console                    1      3,656 K\nchrome.exe                   26704 Console                    1      7,264 K\naudiodg.exe                  68612 Services                   0     23,364 K\nNVIDIA Broadcast.exe         66280 Console                    1     13,928 K\nNVIDIA Broadcast UI.exe      62684 Console                    1      7,504 K\nchrome.exe                   64440 Console                    1    126,308 K\nMicrosoft.Notes.exe          64264 Console                    1     12,904 K\nRuntimeBroker.exe            60288 Console                    1      3,596 K\nbackgroundTaskHost.exe       66164 Console                    1        136 K\nbackgroundTaskHost.exe       45652 Console                    1         48 K\nbackgroundTaskHost.exe       54392 Console                    1         52 K\nCode.exe                     23028 Console                    1      4,064 K\nchrome.exe                   46680 Console                    1     72,300 K\nchrome.exe                   63268 Console                    1    206,824 K\nchrome.exe                   67688 Console                    1     52,728 K\nbackgroundTaskHost.exe       64088 Console                    1         40 K\nchrome.exe                   54132 Console                    1    136,332 K\nbackgroundTaskHost.exe       56028 Console                    1        120 K\nbackgroundTaskHost.exe       56408 Console                    1         56 K\nconhost.exe                  63828 Console                    1      1,740 K\npowershell.exe               63052 Console                    1     24,972 K\nbackgroundTaskHost.exe       67616 Console                    1         76 K\nwlanext.exe                  72008 Services                   0      2,248 K\ntopiad.exe                   73060 Services                   0     71,232 K\nbackgroundTaskHost.exe       71796 Console                    1         68 K\nbackgroundTaskHost.exe       61756 Console                    1        472 K\nconhost.exe                   8836 Console                    1      1,016 K\npowershell.exe                1288 Console                    1      7,844 K\npython.exe                   70244 Console                    1        232 K\npython.exe                   56740 Console                    1        336 K\npython.exe                   65432 Console                    1        204 K\nconhost.exe                  63708 Console                    1        760 K\nconhost.exe                  72964 Console                    1        208 K\nconhost.exe                  71000 Console                    1        176 K\npython.exe                   57256 Console                    1      9,816 K\nchrome.exe                   48944 Console                    1    143,372 K\nWindowsPackageManagerServ    72444 Console                    1     23,556 K\nconhost.exe                  54680 Console                    1      1,460 K\npowershell.exe               23672 Console                    1     12,768 K\nchrome.exe                   26960 Console                    1    154,460 K\nbackgroundTaskHost.exe       19012 Console                    1      1,040 K\nchrome.exe                   53464 Console                    1     49,416 K\nmsedge.exe                   35024 Console                    1    172,864 K\nmsedge.exe                   61824 Console                    1     18,640 K\nmsedge.exe                   66004 Console                    1     17,004 K\nmsedge.exe                   66208 Console                    1     15,348 K\nchrome.exe                   55936 Console                    1    192,112 K\nchrome.exe                   25712 Console                    1     60,044 K\nchrome.exe                   73708 Console                    1     66,616 K\nmsedge.exe                   23524 Console                    1     34,940 K\nmsedge.exe                   62112 Console                    1      7,316 K\nchrome.exe                   69772 Console                    1    168,168 K\nchrome.exe                   64152 Console                    1    505,996 K\nbackgroundTaskHost.exe       61732 Console                    1      1,348 K\nsvchost.exe                  70072 Services                   0      5,668 K\nbackgroundTaskHost.exe       60464 Console                    1      1,516 K\nlogioptionsplus_appbroker    12244 Console                    1     13,700 K\ncharon-svc.exe               51676 Services                   0     11,296 K\nSRAgent.exe                  74300 Console                    1     15,288 K\nopenvpnserv.exe              45120 Services                   0      7,236 K\nchrome.exe                   66084 Console                    1     40,204 K\nLenovo.Modern.ImControlle    74652 Console                    1     37,564 K\nWUDFHost.exe                 61624 Services                   0      7,872 K\nUDClientService.exe          14432 Services                   0     41,648 K\nMessagingPlugin.exe          54816 Console                    1     41,476 K\nconhost.exe                  11472 Console                    1      6,632 K\nSystemNotificationPlugin.    10948 Services                   0     41,372 K\nconhost.exe                  71436 Services                   0      9,772 K\nbackgroundTaskHost.exe       22848 Console                    1      2,960 K\nRuntimeBroker.exe            47880 Console                    1      8,732 K\nShellHost.exe                72340 Console                    1     53,244 K\nSenseNdr.exe                 67140 Services                   0     69,172 K\nsvchost.exe                  30844 Services                   0      8,596 K\nconhost.exe                  49984 Services                   0      6,968 K\nAgent.Package.Availabilit    19936 Services                   0     65,692 K\nAteraAgent.exe               62040 Services                   0     76,876 K\nsvchost.exe                  69528 Services                   0      9,564 K\nconhost.exe                  70972 Console                    1      8,524 K\npowershell.exe               68184 Console                    1     97,232 K\nsvchost.exe                  19548 Services                   0     12,644 K\nsvchost.exe                  19232 Services                   0     25,068 K\nchrome.exe                   49724 Console                    1     76,624 K\nchrome.exe                   65684 Console                    1    218,064 K\nflask.exe                    40412 Console                    1      4,264 K\npython.exe                   72732 Console                    1      4,156 K\npython.exe                   58788 Console                    1     82,728 K\npython.exe                   45244 Console                    1      4,140 K\npython.exe                   63132 Console                    1     89,744 K\nsmartscreen.exe              15404 Console                    1     12,860 K\nchrome.exe                    2752 Console                    1     65,544 K\nWmiApSrv.exe                 53252 Services                   0     12,268 K\npython.exe                   59512 Console                    1     28,696 K\nchrome.exe                   38652 Console                    1     33,764 K\nTrustedInstaller.exe         27776 Services                   0      9,964 K\nTiWorker.exe                 36244 Services                   0     17,900 K\npowershell.exe               74688 Console                    1     62,768 K\ntasklist.exe                 64028 Console                    1     11,600 K\n', 'error': '', 'duration': 1.4279942512512207, 'returncode': 0}
[2025-06-04 17:23:09,786] INFO: Result for command None sent successfully
[2025-06-04 17:23:09,787] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:09,787] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:11,833] DEBUG: Response status code: 200
[2025-06-04 17:23:11,834] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:11,835] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:11,835] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:11,836] INFO: Fetching commands...
[2025-06-04 17:23:11,837] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:11,838] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:13,890] DEBUG: Response status code: 200
[2025-06-04 17:23:13,891] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:13,891] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:13,893] INFO: Commands: []
[2025-06-04 17:23:15,949] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:15,949] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:17,999] DEBUG: Response status code: 200
[2025-06-04 17:23:17,999] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:18,000] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:18,001] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:18,001] INFO: Fetching commands...
[2025-06-04 17:23:18,002] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:18,003] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:20,044] DEBUG: Response status code: 200
[2025-06-04 17:23:20,045] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:20,045] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:20,046] INFO: Commands: []
[2025-06-04 17:23:22,084] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:22,084] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:24,125] DEBUG: Response status code: 200
[2025-06-04 17:23:24,126] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:24,126] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:24,127] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:24,127] INFO: Fetching commands...
[2025-06-04 17:23:24,128] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:24,129] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:26,188] DEBUG: Response status code: 200
[2025-06-04 17:23:26,189] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:26,191] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:26,194] INFO: Commands: []
[2025-06-04 17:23:28,237] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:28,237] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:30,310] DEBUG: Response status code: 200
[2025-06-04 17:23:30,311] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:30,311] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:30,312] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:30,312] INFO: Fetching commands...
[2025-06-04 17:23:30,312] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:30,313] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:32,382] DEBUG: Response status code: 200
[2025-06-04 17:23:32,383] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:32,384] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:32,385] INFO: Commands: []
[2025-06-04 17:23:34,423] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:34,423] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:36,492] DEBUG: Response status code: 200
[2025-06-04 17:23:36,492] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:36,494] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:36,496] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:36,498] INFO: Fetching commands...
[2025-06-04 17:23:36,499] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:36,502] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:38,590] DEBUG: Response status code: 200
[2025-06-04 17:23:38,591] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:38,592] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:38,595] INFO: Commands: []
[2025-06-04 17:23:40,661] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:40,663] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:42,734] DEBUG: Response status code: 200
[2025-06-04 17:23:42,735] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:42,735] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:42,736] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:42,736] INFO: Fetching commands...
[2025-06-04 17:23:42,736] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:42,737] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:44,802] DEBUG: Response status code: 200
[2025-06-04 17:23:44,802] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:44,803] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:44,806] INFO: Commands: []
[2025-06-04 17:23:46,858] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:46,859] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:48,905] DEBUG: Response status code: 200
[2025-06-04 17:23:48,905] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:48,906] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:48,906] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:48,906] INFO: Fetching commands...
[2025-06-04 17:23:48,907] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:48,907] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:50,953] DEBUG: Response status code: 200
[2025-06-04 17:23:50,953] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:50,954] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:50,956] INFO: Commands: []
[2025-06-04 17:23:53,007] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:53,008] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:55,064] DEBUG: Response status code: 200
[2025-06-04 17:23:55,065] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:23:55,065] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:23:55,065] INFO: Server is approved and ready to process commands
[2025-06-04 17:23:55,066] INFO: Fetching commands...
[2025-06-04 17:23:55,068] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:23:55,070] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:23:57,112] DEBUG: Response status code: 200
[2025-06-04 17:23:57,112] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:23:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:23:57,113] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:23:57,117] INFO: Commands: []
[2025-06-04 17:23:59,162] DEBUG: Checking approval status for server 8
[2025-06-04 17:23:59,162] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:01,221] DEBUG: Response status code: 200
[2025-06-04 17:24:01,222] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:01,225] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:01,226] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:01,227] INFO: Fetching commands...
[2025-06-04 17:24:01,230] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:01,231] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:03,297] DEBUG: Response status code: 200
[2025-06-04 17:24:03,298] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:03,300] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:03,301] INFO: Commands: []
[2025-06-04 17:24:05,360] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:05,361] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:07,405] DEBUG: Response status code: 200
[2025-06-04 17:24:07,405] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:07,407] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:07,407] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:07,408] INFO: Fetching commands...
[2025-06-04 17:24:07,409] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:07,411] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:09,467] DEBUG: Response status code: 200
[2025-06-04 17:24:09,468] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:09,470] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:09,475] INFO: Commands: []
[2025-06-04 17:24:11,515] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:11,516] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:13,560] DEBUG: Response status code: 200
[2025-06-04 17:24:13,560] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:13,561] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:13,562] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:13,562] INFO: Fetching commands...
[2025-06-04 17:24:13,563] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:13,564] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:15,617] DEBUG: Response status code: 200
[2025-06-04 17:24:15,617] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:15,618] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:15,620] INFO: Commands: []
[2025-06-04 17:24:17,659] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:17,660] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:19,707] DEBUG: Response status code: 200
[2025-06-04 17:24:19,707] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:19,710] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:19,711] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:19,712] INFO: Fetching commands...
[2025-06-04 17:24:19,713] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:19,714] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:21,769] DEBUG: Response status code: 200
[2025-06-04 17:24:21,769] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:21,769] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:21,772] INFO: Commands: []
[2025-06-04 17:24:23,813] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:23,814] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:25,891] DEBUG: Response status code: 200
[2025-06-04 17:24:25,892] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:25,894] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:25,895] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:25,897] INFO: Fetching commands...
[2025-06-04 17:24:25,898] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:25,900] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:27,932] DEBUG: Response status code: 200
[2025-06-04 17:24:27,933] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:27,933] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:27,934] INFO: Commands: []
[2025-06-04 17:24:29,973] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:29,974] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:32,025] DEBUG: Response status code: 200
[2025-06-04 17:24:32,025] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:32,026] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:32,026] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:32,027] INFO: Fetching commands...
[2025-06-04 17:24:32,028] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:32,028] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:34,064] DEBUG: Response status code: 200
[2025-06-04 17:24:34,064] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:34,065] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:34,067] INFO: Commands: []
[2025-06-04 17:24:36,109] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:36,110] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:38,176] DEBUG: Response status code: 200
[2025-06-04 17:24:38,176] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:38,177] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:38,177] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:38,177] INFO: Fetching commands...
[2025-06-04 17:24:38,179] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:38,181] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:40,250] DEBUG: Response status code: 200
[2025-06-04 17:24:40,251] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:40,252] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:40,255] INFO: Commands: []
[2025-06-04 17:24:42,303] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:42,304] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:44,336] DEBUG: Response status code: 200
[2025-06-04 17:24:44,336] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:44,337] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:44,337] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:44,338] INFO: Fetching commands...
[2025-06-04 17:24:44,338] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:44,338] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:46,388] DEBUG: Response status code: 200
[2025-06-04 17:24:46,388] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:46,389] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:46,390] INFO: Commands: []
[2025-06-04 17:24:48,430] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:48,432] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:50,484] DEBUG: Response status code: 200
[2025-06-04 17:24:50,485] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:50,486] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:50,486] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:50,487] INFO: Fetching commands...
[2025-06-04 17:24:50,487] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:50,488] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:52,521] DEBUG: Response status code: 200
[2025-06-04 17:24:52,521] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:52,522] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:52,524] INFO: Commands: []
[2025-06-04 17:24:54,563] DEBUG: Checking approval status for server 8
[2025-06-04 17:24:54,564] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:56,608] DEBUG: Response status code: 200
[2025-06-04 17:24:56,608] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:24:56,609] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:24:56,610] INFO: Server is approved and ready to process commands
[2025-06-04 17:24:56,611] INFO: Fetching commands...
[2025-06-04 17:24:56,612] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:24:56,612] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:24:58,655] DEBUG: Response status code: 200
[2025-06-04 17:24:58,655] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:24:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:24:58,656] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:24:58,657] INFO: Commands: []
[2025-06-04 17:25:00,694] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:00,695] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:02,745] DEBUG: Response status code: 200
[2025-06-04 17:25:02,745] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:02,746] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:02,747] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:02,749] INFO: Fetching commands...
[2025-06-04 17:25:02,749] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:02,750] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:04,798] DEBUG: Response status code: 200
[2025-06-04 17:25:04,799] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:25:04,801] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:25:04,804] INFO: Commands: []
[2025-06-04 17:25:06,847] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:06,848] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:08,909] DEBUG: Response status code: 200
[2025-06-04 17:25:08,910] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:08,910] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:08,911] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:08,911] INFO: Fetching commands...
[2025-06-04 17:25:08,912] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:08,912] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:10,965] DEBUG: Response status code: 200
[2025-06-04 17:25:10,965] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:25:10,966] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:25:10,967] INFO: Commands: []
[2025-06-04 17:25:13,036] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:13,037] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:15,094] DEBUG: Response status code: 200
[2025-06-04 17:25:15,094] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:15,095] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:15,095] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:15,096] INFO: Fetching commands...
[2025-06-04 17:25:15,096] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:15,097] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:17,151] DEBUG: Response status code: 200
[2025-06-04 17:25:17,151] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:25:17,152] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:25:17,153] INFO: Commands: []
[2025-06-04 17:25:19,205] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:19,205] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:21,261] DEBUG: Response status code: 200
[2025-06-04 17:25:21,262] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:21,262] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:21,263] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:21,264] INFO: Fetching commands...
[2025-06-04 17:25:21,264] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:21,265] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:23,308] DEBUG: Response status code: 200
[2025-06-04 17:25:23,309] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:25:23,310] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:25:23,311] INFO: Commands: []
[2025-06-04 17:25:25,356] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:25,357] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:27,424] DEBUG: Response status code: 200
[2025-06-04 17:25:27,424] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:27,425] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:27,425] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:27,426] INFO: Fetching commands...
[2025-06-04 17:25:27,427] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:27,427] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:29,482] DEBUG: Response status code: 200
[2025-06-04 17:25:29,482] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:25:29,483] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:25:29,484] INFO: Commands: []
[2025-06-04 17:25:31,530] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:31,531] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:33,580] DEBUG: Response status code: 200
[2025-06-04 17:25:33,580] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:33,581] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:33,581] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:33,581] INFO: Fetching commands...
[2025-06-04 17:25:33,582] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:33,582] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:35,640] DEBUG: Response status code: 200
[2025-06-04 17:25:35,641] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 17:25:35,641] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 17:25:35,643] INFO: Commands: []
[2025-06-04 17:25:37,701] DEBUG: Checking approval status for server 8
[2025-06-04 17:25:37,702] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 17:25:39,741] DEBUG: Response status code: 200
[2025-06-04 17:25:39,742] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 14:25:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 17:25:39,743] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 17:25:39,745] INFO: Server is approved and ready to process commands
[2025-06-04 17:25:39,746] INFO: Fetching commands...
[2025-06-04 17:25:39,747] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 17:25:39,748] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb'}
[2025-06-04 18:01:30,130] DEBUG: Checking approval status for server 8
[2025-06-04 18:01:30,131] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Hc+uMBsN+bfL7PIqaswNw9kDGxpzzUtu8FVHiL8cdlLgvtFaHRBJUi7b+Ma2FFJREkGWGJb+6Jb8kaLto9N8HxBgyxLsUJZsnDS7VkW0pIIpTWjN+Jg/eEIicXKaXxLWrcx+1WgxJbryBsX7Zqh5PonzNJ4t8q35jyrG090ExyLhi+aM938ChqgnTtlPpSTGHjc+fSJvf5jMAen0gbIm5JlkTe5sAh6MDHAKTpN5/5lcETSmMpfBYY817Ry5UybSo6d8hZ6+g/ZY232DRHJIa5/WkXjKfrOZGpe80s+o64KyZdvRNIH8wPfEFMZxuQaCWPHtNqTbRYE003YU364Ibg=='}
[2025-06-04 18:01:34,242] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000018411948AD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-04 18:01:34,362] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connection.py", line 198, in _new_conn
    sock = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\util\connection.py", line 85, in create_connection
    raise err
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\util\connection.py", line 73, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connectionpool.py", line 787, in urlopen
    response = self._make_request(
               ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connectionpool.py", line 493, in _make_request
    conn.request(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connection.py", line 445, in request
    self.endheaders()
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connection.py", line 276, in connect
    self.sock = self._new_conn()
                ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connection.py", line 213, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000018411948AD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\requests\adapters.py", line 667, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\connectionpool.py", line 841, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\urllib3\util\retry.py", line 519, in increment
    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000018411948AD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 488, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\requests\adapters.py", line 700, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000018411948AD0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-04 18:01:34,363] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:02:34,469] DEBUG: Checking approval status for server 8
[2025-06-04 18:02:34,470] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'VpZ/CiGG9/1NYPyYwU0ZUm3vOzM4spnOFV5PXUbIqd+I7Eqv+BqSc5RfYF1IrjeO0wQAqqazTHHEvptYYAVPlGILjEhOg75+YnptptxyR0kBtqCCLau5KhFGxSPhnssL+7xjukQpWYE6Z4NtuvmbKCBFX6MMn6fOMq4WJZD0kNoB6jM5m+Xl8EZww8w3nD9dLoBV+nHhmigDnkF3wRFLWh+Eao51CyNSUTTw3kziZ91FxvSyGiw31fBmPd1am7/lfcPof/+Yr5o2NPTNgDKzhashGmiPHnbwQQDxeKA/k3Q2gWDp7/9qUycKv6tbAt2qpb8DNa24GgIuP6qVqDkkYw=='}
[2025-06-04 18:02:36,859] DEBUG: Response status code: 500
[2025-06-04 18:02:36,861] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:02:36 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65221', 'Connection': 'close'}
[2025-06-04 18:02:36,864] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3quQIBuqTPuf60AensJK";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2163562541504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2163562541648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2163562541792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2163562541936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562542080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2163560465312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2163560473232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2163560473376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2163560473520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2163560473664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2163560473808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2163560473952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">50</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2163561529552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2163561533584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163561533728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2163561540064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2163561540208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2163561542224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562532432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562536464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2163562536608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2163562536752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562536896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2163562537040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2163562537184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2163562540064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2163562540784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562540928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 50, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.public_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 50, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.public_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:02:36,866] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3quQIBuqTPuf60AensJK";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2163562541504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2163562541648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2163562541792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2163562541936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562542080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2163560465312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2163560473232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2163560473376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2163560473520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2163560473664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2163560473808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2163560473952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">50</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2163561529552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2163561533584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163561533728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2163561540064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2163561540208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2163561542224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562532432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562536464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2163562536608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2163562536752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562536896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2163562537040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2163562537184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2163562540064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2163562540784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2163562540928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 50, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.public_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.public_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 50, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.public_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:02:36,868] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:16:24,575] DEBUG: Checking approval status for server 8
[2025-06-04 18:16:24,575] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'm7CaiFWhub2jr42ohKXx8H9DwmwqDyJqZn6yihn569SfYIsisz8InKmeFokq+R4hKdSCq0riMlmKbMQtEsZyuriKFMWyp/K2xnj41cMLzlkdMg+Xrlb7i2sdLjBzyjpDs9hD7B3h43Y+K/1QsFC1y80rHYIR1DY+bJURgkVzctgKMjXBnEqb1oPfTruTFG702/wPkbNdotdbJcdQqfO7p4iyv5xW77lVM6YrSvrtLBL/mHcL0JJer7o9zEzlGa/KtYnycUi3luGMwjDo9LjxFZ20lpht9G2N0udOj69DkrOqMh/XqQQxtw0z0l4fmoRRo4YvgnUD2H4diSOjHt08fA=='}
[2025-06-04 18:16:26,632] DEBUG: Response status code: 200
[2025-06-04 18:16:26,633] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:16:26,633] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:16:26,633] INFO: Server is approved and ready to process commands
[2025-06-04 18:16:26,634] INFO: Fetching commands...
[2025-06-04 18:16:26,668] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:16:26,668] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'TRyH2F914TeNMYQPigqKBS7/mlW5dVPdrSjoZbZ61z1+Co9G8p9KYVjM/pODaP5h6/Xzq3VKO0wEA9Oev+3gz1xn5U87xz6Z4WyYm54hb/B7a3YOPa2nOyoMm0ef61XHlDcslGrVm8zPDhXPSdFMWGWnhzAQ2j88737AWgxeeO00s9LxJgr0DUNjqIAzDpSpLI0xNlRE/bBJf/Ti5D62gTEkKe0ragLY0MxXfyfcMrf0+cv1dCUvr8u/4sZQMwwufyuCR6Ftn5Ou/+LxSbduduCQywq81dkzIt7UqE6VxuRYFRKK/4zR8QNT4c70S47k0Kv9mWUaI/+x+Zp85rN6LQ=='}
[2025-06-04 18:16:28,723] DEBUG: Response status code: 200
[2025-06-04 18:16:28,723] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 18:16:28,724] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 18:16:28,725] INFO: Commands: []
[2025-06-04 18:16:30,833] DEBUG: Checking approval status for server 8
[2025-06-04 18:16:30,833] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'ckSTioGJ0Jz+1tYv9lJArkxXgT3GauaXdTCYe/zsoV28DIn1khzGpcg5iRAOb3lQVvAwTc1V6EhW0daaaW20enuZp2XhNOMDi/SLj3UagNMT2aTC64TNpw4gxBQNmjV34EjQ+M3SDjoww2EBFQ61DN4412IQpeTvLLBHsBgxigMgMv3UBDTe/ne8bENyZNiQfOHBaGNUYdTwq9b2XGqqSNMS8eUIiZ5BI3CVuamrJ2qyn8F51mXcQyHFdgvs2IWDjVySmG4rmfbM49ng494CWmK5Yuhu/8gwF+zOUyJYQsoEEqxi6pffeZL7YHPg+7VotMaaq1pzXXxD1yrQ1SCEUQ=='}
[2025-06-04 18:16:32,864] DEBUG: Response status code: 200
[2025-06-04 18:16:32,864] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:16:32,864] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:16:32,865] INFO: Server is approved and ready to process commands
[2025-06-04 18:16:32,865] INFO: Fetching commands...
[2025-06-04 18:16:32,900] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:16:32,900] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'VksSKzeAJV+fGmiWijLVpWVOX4xt/Rkdfj/o8fptgjTH+EWW3Pd0QLVSXMAV64dBlKefRxA0CcLoJgQ8QBe27tzk7XYD82tqHKjGNmliWmGOX6199xemU9tuw3MM1JO+wawoGjn00dJkNRYNpxK4aH1D3DxqZDsWc0fBZc6ry5QWoDIriMwXrLlQF63pqJoFVufeZideuRfse+tV3Sn3xHQi0IIrk2ES8O+4x+AN6Sa4ZgKv1/wMJK26BAuSNuSvyUi8kKJZ4TFTqeOP0V5ynA7sfzgDyF/agAFv2t8JC6LZLzB1Zs6l3M3ADigm76pmesIXag2SQ1riYEH+LDfORQ=='}
[2025-06-04 18:16:34,936] DEBUG: Response status code: 200
[2025-06-04 18:16:34,936] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 18:16:34,936] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 18:16:34,937] INFO: Commands: []
[2025-06-04 18:16:37,041] DEBUG: Checking approval status for server 8
[2025-06-04 18:16:37,042] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'O8yiv3P6+WGfzRR7Tb4tEx3B1dfJnKmUQUq2qkLrKfPBWqko2fSAUgD8rD0dvNdCEq/fjzu0iAll7hXX4uXWgUbsJ1BoynAplX2sprEFeMdnWDMX/bpHp1baGslFWeEfP/S9fHQ/PZ2UPDm1CqnI2Y7lSP62nq++sKr1YQ7uc4WihwLpPniW/iWQMVajYu+0GUwuo1ILQRwzCx/FeiL5R8OrAB+fO/APOE1K1aXwePtD0YhTvyuI3btKO+hgsijhX1HmdkV/E/9gUrcr4gRNjwOTygqSERwWgYb4cmRUlvYpeb3zKXQFcZFthJRjnBD8LBYy09zL0etgk14ud0WNDw=='}
[2025-06-04 18:16:39,067] DEBUG: Response status code: 200
[2025-06-04 18:16:39,068] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:16:39,068] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:16:39,070] INFO: Server is approved and ready to process commands
[2025-06-04 18:16:39,070] INFO: Fetching commands...
[2025-06-04 18:16:39,173] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:16:39,173] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'UWajI8nYTbFUhRCMlGlsluxBiR/Vw281UmlP9+tPR4ef1H2yuRR8yfBR6RbLJkZeVYkJGerDRBD+pmVMUIXEIRNSfpzMjUqzzeZBpsdNd16mZjJ2pcupgniXjw3maRDK3EVPXLY3Z2jOJt15wO3o4wuiF0T386ZMagud87quvbx/tCiCOK1qMM/EA9gSJAu4VVKy9e98/HeqD77vztArtUbklvJLTATccG7WtkdVjdQiJ2JZbcVcaf4Zd3gDMd1IJxQNy3nnBwxMZ6dPi6Ke2VDOekWGAPVjs0ZRm7Nt08cfglRWeoSh/uazF0gIUhg8lD/I6jPSP2Uw3n+34OUEBg=='}
[2025-06-04 18:16:41,209] DEBUG: Response status code: 200
[2025-06-04 18:16:41,210] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 18:16:41,211] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 18:16:41,213] INFO: Commands: []
[2025-06-04 18:16:43,489] DEBUG: Checking approval status for server 8
[2025-06-04 18:16:43,490] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'STkviGTbL5F59XuiOfQEsrKJzqinZBVgrp5ndB8UIoaXP6kvwHy+SJIgfHYpCccyvryvgvB+uyCRXHlZLn4wv2Cdm3jbLu0dQcuHRpcvcAv6uRSXP/v0cXNCxTM2JRM25auuMAsUDJokqSpcfPaOh9giIigJltLHjHVRSm7s7ZVJpG7tzducQAcLHmmKFen27mS+mTHoLcpUONMrR1PMhFpMM58dhFhuYfrYzylyb53p1TSBaRNgNlQe0K2XbFKpL946oElWxplBLVT+Us1xPAuIYweYlAnmrtYuiEwVys9T2fYXNKZwU8eMN0rdsJg4j43zXbh9UMS/XqxEJz0SDw=='}
[2025-06-04 18:16:45,533] DEBUG: Response status code: 200
[2025-06-04 18:16:45,534] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:16:45,535] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:16:45,536] INFO: Server is approved and ready to process commands
[2025-06-04 18:16:45,537] INFO: Fetching commands...
[2025-06-04 18:16:45,648] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:16:45,649] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'ZEQFDwSPGJpl4woFOJPWpDMDXw21AOuIbs23hHakfrzZB3Ser8jCazwW7c6ADt28SAEGqKTyxuJmxqXtzGItOsUmurc00ic0Ox4YFjifWMmR5M3wufdY5ChR+PPCOnf9ACnOquMX+p6p40agbhIeYskzFRj8ntf7ChtIA4V3OUTEoz4B6KrmFZkUjCq0l/CxCDlPf/3rDnwCqhVibV6fzZUiSj9RHveaqSP18b+T1NO/A14mlOLVskL1Auft/OQpGWQlKSKspKDvtjrzsp6FKSXNLIuGtavDdw+jUB7WbCgT4rLVVOMphIrkxEpgDABO4zzC6GZPpdQRCO4N1uSk6Q=='}
[2025-06-04 18:16:47,696] DEBUG: Response status code: 200
[2025-06-04 18:16:47,696] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 18:16:47,697] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 18:16:47,699] INFO: Commands: []
[2025-06-04 18:16:50,001] DEBUG: Checking approval status for server 8
[2025-06-04 18:16:50,001] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'JeBHxdmY8mTc5lvPOmGGXby6amFJLp/h3thWsf17eOq9R6hRb+W1EKwltX/fvMG68HRAfsdGOOIbUYbTGmDMX2rvK2WaMkI42ceuzpUSga6aqY/700W7wj5HNXE+96zXvFxEgXHqdCZyq0xXplG9s8aOQTyRfw46F4/gNdcK22C6VbJ85J5rLUs/XhOfnS/c3/ZEWEq+ISPBDsFusNEuE+K/HsHmFXLMhm8JnZ0hCMOHm7Vmh2in0U/a9plqTCxqdAEKuFc968+M7IWR/Y9nOvsUwbOVNo/jVaehS4Qdpm+mNbXvsYcg9nKAzr3OgvC+sIQBCx36Ht5SqxU86tcdPw=='}
[2025-06-04 18:16:52,039] DEBUG: Response status code: 200
[2025-06-04 18:16:52,040] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:16:52,040] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:16:52,041] INFO: Server is approved and ready to process commands
[2025-06-04 18:16:52,042] INFO: Fetching commands...
[2025-06-04 18:16:52,150] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:16:52,150] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'cqMDdeOpPVFetqfa84/E0YgGeS28cVdm6h9XPOT2nwhQgewLdfqxxqKngJ8u+FX6OFzxTnlWfchJmXO/M9n6uJGhGDcChX2fLYc8VHqNmFjzK7M7wB/IuihJ3banfZbgcz6GptMi2dFPmgOuKBRIiyLcr1FwjyBvcv+QZpRzSQBBhBMer/Mk1I9+vkjB5xWi5QfSv0szLSRVJFjkrUVNLI56yCYfzXSdMmAcZbJUeFZLXpdANJZzIueKqY1XN4HplLC2EfStRgZ34bJgP3ptdIAgLHP6VDwAyPljGWjtSFCJULdckyd6cj+rd0vRPwjBmX5nnr8taSCLXcvzBehmKQ=='}
[2025-06-04 18:16:54,199] DEBUG: Response status code: 200
[2025-06-04 18:16:54,200] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 18:16:54,200] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 18:16:54,202] INFO: Commands: []
[2025-06-04 18:16:56,552] DEBUG: Checking approval status for server 8
[2025-06-04 18:16:56,553] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'WIdbokWoLnHBtZ5az+DXHsmqcSF+IcElLZEaxcAfq5TXSwSrPFgOtVIO6AF5YsGPixDxxphjlSZVtUz2wBFkV1OrpfWhm+iaDdL4QETxlskmCdZqG6/70DhI1Bq6feJJ96gk4MItUVDdk/k3rSjp4f1hrbQtZOa7VRu82/8zxKPR3rVEKd63UKJ5drei7QJTVemwZtHF/q+MXnB9roMKmYLUO5k87xplbz91XWolI7E9xkE/5gFg2Lp4TJAPEe6aJwI0Su0ihbX3GBt6KKZzZu7zC9wWLbTxfY9kfjXH/4KsZS3TPIN/Efozvf6/G0IWBPYdnobB+azYv5e5wgTlww=='}
[2025-06-04 18:16:58,593] DEBUG: Response status code: 200
[2025-06-04 18:16:58,594] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:16:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:16:58,595] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:16:58,597] INFO: Server is approved and ready to process commands
[2025-06-04 18:16:58,598] INFO: Fetching commands...
[2025-06-04 18:16:58,743] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:16:58,744] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'UqwXAQmqElXA2GUuv86g/wXZmDL6lMuMiCYmHIPCKGwcYxj6DYF4Jue4WjM5ihGUHy/Sidp5Lh8aEcZa8THUQCDgkjhtehR5aLzifHd60KLK5K3QCWMoJ97STXcPxL3IIhkLFPDqBDdIePfHN0OqYizJ3EoKiEW6i4nR4ueR0N7+6mRC3jWANuwfKYcWnjQmOAypgL9Mc16c0GC/rkYjvilRzY1wmd2zYiEwT5rRtOK0+mjjEsq/TUhlYBx8G3Ohl/WdOAH4iIGVLIDWvMHW3T7eHxVvlFp0iKC/c/aFLPB73AIkwCgYwTF7U/SplAlrybw4cVl2/QmKMf0pMrLFvQ=='}
[2025-06-04 18:17:00,786] DEBUG: Response status code: 200
[2025-06-04 18:17:00,786] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:17:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 18:17:00,787] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 18:17:00,788] INFO: Commands: []
[2025-06-04 18:17:03,185] DEBUG: Checking approval status for server 8
[2025-06-04 18:17:03,186] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'FX7ya2FdHBcXhHTdSNoDSp1iDA7vUJEX5qm5Nl3NIhu+0ypF4sav/J+plZ0A9TBY8iBce6K3d1YprW19nS6o6FOhtenxZIL5fGEMp/jClZ6FIKLqkZOPCCAD3mnJBambl6EAghhhFJCJl/S+N1gXoCN180/ueO+9NTKBAireV2DmPJA5n5c3CJbJVDgAkQCQM588Khij06BFhWtfUka85GhTYmpli9L7bHHIOwEXLitpG8phuLG5iuf6/NtX705wH+r7vFsr2IN93PfdcZQrUakP9QOym9fwSqNFSVD9RAchaD3rU61CfPzFa1TO0a0b0bccrSA+LMKVMBJ+O66rAA=='}
[2025-06-04 18:17:05,238] DEBUG: Response status code: 200
[2025-06-04 18:17:05,239] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:17:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:17:05,240] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:17:05,241] INFO: Server is approved and ready to process commands
[2025-06-04 18:17:05,242] INFO: Fetching commands...
[2025-06-04 18:17:05,364] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:17:05,365] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'AZZyNXnlZememfJ5ACHHLmaAmjJrX1ArXht//L/NCj/T+8a9mDRphy8PsHPDKOQkjLbeKG07jI11DJ+ygc+cVhWgDeZEM7HFwk3EBqx3XKZUmIub0t6KU7ZFDizunj9fka8NBSPzEFnEmF03DDHw7XdEB79+rJ8pyFOU8YURPSTAfrMaU50FsWHQKKhfm2RwVsC5lm2TcFjDxWuI8RsXG9E3Rwq3G9yZ7Hk9gmjVvAVOJph6MxV5BwjJv5FQgFUhsBQcMOWD5nLu3/JjqHN+MWeU8f1LMLk3KDX0mntG7PFjVndB1zNU4VqlEs7yKuosnZbAVqEu6cVtcGaKtl/hKA=='}
[2025-06-04 18:17:07,398] DEBUG: Response status code: 200
[2025-06-04 18:17:07,398] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:17:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:17:07,399] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:17:07,400] INFO: Commands: []
[2025-06-04 18:17:39,667] DEBUG: Checking approval status for server 8
[2025-06-04 18:17:39,667] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'bSVqP5kX7OYmXotgxwXymVmFmnhTigvPIKJtitiMSia0iDxbdVPIkG1Eo9SCfUBLVhVWngue+BsYZ5evi/x40NYCxOVTkymZ2Ebp9bonM6xxyyuWdLXozr0Px+dq23nbydm3dV5I27C+x5HpAdwEsGCQWY9HSwLbjTbm650cIKqJ2uBgunveX40l0lshHsXdz2bO1AH3k8Lmy0fTnylcGJL/gj7A/fZOK/mSr5w3ffvuIZ0104iRKowRqwJCpQ3165UaR5qMQeT+z1IOkfb/OoXBmciss4JhmLIyczYdTDiNQPfnX+P/BEIhcaTpd27spvhLhF7AKoVZDuNY+blfbA=='}
[2025-06-04 18:17:41,730] DEBUG: Response status code: 200
[2025-06-04 18:17:41,731] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:17:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:17:41,733] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:17:41,735] INFO: Server is approved and ready to process commands
[2025-06-04 18:17:41,737] INFO: Fetching commands...
[2025-06-04 18:17:41,866] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:17:41,867] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'bSGISc/i/cRvPNVZ8yxgZm+4RGa1XTQXB5I+vZVaQwmSanwSsOyXKyFuxgGjzoO4pQWIvodZ4T1pfpVgKbs7hvjGbCvDv99jtPZfo3l49EE//yiBd2Ae2gAtowx6sgK0Rblq+hvLNzOMdVGcB4IOK6eJ1Tb+GH1xH5hyvr/4fcb39ybEqP9d722CQ9Nu2/jW6Unu0o8+RKNt3oYm4DWh05Ndw6ZUA0DTsDJyw0Zm24s7cXmtJ+1nJ5yRk90xAw4ZP68MDSDzUWCbgkDjnmgh96h2oLn1cTbVFadDvmfcLjBYdMOqr+TInp5zE4uQUByJmjXuNVHozgK5yJFxr7RhSg=='}
[2025-06-04 18:17:43,916] DEBUG: Response status code: 200
[2025-06-04 18:17:43,916] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:17:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '145', 'Connection': 'close'}
[2025-06-04 18:17:43,919] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "dir",
      "history_id": "20",
      "id": null
    }
  ],
  "interval": 30
}
[2025-06-04 18:17:43,923] INFO: Commands: [{'as_admin': True, 'command': 'dir', 'history_id': '20', 'id': None}]
[2025-06-04 18:17:46,100] INFO: Running command: dir (admin=True)
[2025-06-04 18:17:46,759] INFO: Result: {'success': True, 'output': '\n\n    Directory: C:\\Users\\MosheGabay\\OneDrive - pango\\Documents\\Projects\\PLATFORM ENIGNEER\\PlatformEngineerSystem\\flask-adminlte-master\\scripts\n\n\nMode                 LastWriteTime         Length Name                                                                                                                            \n----                 -------------         ------ ----                                                                                                                            \nda---l          6/3/2025   5:43 AM                nssm                                                                                                                            \nda---l          6/3/2025   5:43 PM                __pycache__                                                                                                                     \n-a---l          6/3/2025   4:11 AM            512 cleanup_audit_log.py                                                                                                            \n-a---l          6/4/2025   6:01 PM          19682 client.py                                                                                                                       \n-a----          6/4/2025   6:17 PM            618 client_config.json                                                                                                              \n-a---l          6/3/2025   5:41 AM            826 client_service_linux.sh                                                                                                         \n-a---l          6/3/2025   5:45 AM            785 client_service_windows.bat                                                                                                      \n-a---l          6/4/2025   6:00 PM             44 encryption.key                                                                                                                  \n-a---l          6/4/2025   5:58 PM           1639 generate_keys.py                                                                                                                \n-a---l          6/3/2025   5:42 AM         351793 nssm-2.24.zip                                                                                                                   \n-a---l          6/3/2025   5:43 AM         331264 nssm.exe                                                                                                                        \n-a---l          6/4/2025   6:00 PM           1886 private_key.pem                                                                                                                 \n-a---l          6/4/2025   6:00 PM            451 public_key.pem                                                                                                                  \n-a---l          6/3/2025  10:34 AM            135 windows_commands.ps1                                                                                                            \n\n\n', 'error': '', 'duration': 0.6573066711425781, 'returncode': 0}
[2025-06-04 18:17:48,924] INFO: Result for command None sent successfully
[2025-06-04 18:18:19,065] DEBUG: Checking approval status for server 8
[2025-06-04 18:18:19,067] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'S2RdB03MpSJYi/lhyf8glea/5TjhLgHleoLOSdLUpIsUhob2CVqd1eNrpHJT6mb4C0ezSxn+M5wV6kmH4+v3pYyo8qmnga6cx0kP61zmwyjVdl+Y//ngVQZ4UHYZNhBs8HzaSPvVTWhvZRz8sJKrJILVirH66yHjvq1knUrhC52LxKTF5XeQFmc6CJH23d0bHUM2QKYoYJxwJk+R4v/HX70jZH1VWC9BHYTdwj7xTto9+hRQSMC57626o8qOrI1EDQXA+FMNof5QHgcfZsjoP8bQOWm7GV56Qgj9j4QoM+VZm4dVEFeNerN+wRswf8VYgANjOI6UjU+krLDbD7sd1g=='}
[2025-06-04 18:18:21,120] DEBUG: Response status code: 200
[2025-06-04 18:18:21,121] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:18:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:18:21,123] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:18:21,124] INFO: Server is approved and ready to process commands
[2025-06-04 18:18:21,125] INFO: Fetching commands...
[2025-06-04 18:18:21,222] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:18:21,223] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'bo0Elh2vC7k0Uexwm3KUH1ArUiw6h65qI00iK8v5BUohx59g8YMXTSLGTCSb3hq0I/F9sZ8etPT99ZYXERIYBuArREO/L2w8RoSDNmnJYs1W/LSIiAeKF3WDaJH7OS+UYBRjhPRV+gxgpoFkDmg5vPK7rXKMXFstvJqCxKKgDMy2gG6khwVb+Ph3pAx1jQ78c4AKCy6mT8vqzTdS8vsubRzgk6PiP7REkLvSY61nAbnxgCe48PHNdULRGHKsDupGTBJlivwdkFAi7IH7susBkbjbjE85B4Anjt21a8HL+U2CMWy8aXE40QigoGMJehU/LoleQb3gyfL84xPuo1NmrA=='}
[2025-06-04 18:18:23,266] DEBUG: Response status code: 200
[2025-06-04 18:18:23,266] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:18:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:18:23,267] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:18:23,269] INFO: Commands: []
[2025-06-04 18:18:55,533] DEBUG: Checking approval status for server 8
[2025-06-04 18:18:55,533] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'int8tvno707y1n/JniZE3hS2GVXeUe4uK6dM7qrJBafSL9zPwv2nCMg+PMBxPfALwNixTd0FDttzUYVz2NIK2Yo02/nt0QPcAldJUd50eWgEmHVnhUopZm1w1/E9tZ/KZLGL9/j1vkiV3UfEOvMDhNluK3agzlnbhjxboey8wmTJ1EJ23bTIPcplDXcsvwiZawjtGMr6FfR5vla8OGqF4nMYhRpGBSKnav6qU7KMk/O2vdCa4qKzVhs3KxnmfRwa7JigDpP+oCpaw91qWoWb1az7EQ94YtZ2V4EH08AdkTi83t/2pINpImG7iw0ZBueZa2DoTltZDsF+LhR5LfX7kA=='}
[2025-06-04 18:18:57,564] DEBUG: Response status code: 200
[2025-06-04 18:18:57,565] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:18:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:18:57,566] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:18:57,566] INFO: Server is approved and ready to process commands
[2025-06-04 18:18:57,567] INFO: Fetching commands...
[2025-06-04 18:18:57,663] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:18:57,663] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'k0lknUf8xytBV+KVBZsv9TRdH6NqyUVuW6qSg7dtzRmCVPu5HBo4skhRF6AvEW2nC8t6Cta/zN1fjVc+n+HLnBsFm6wq3k6wpzABK3qbrs6nHQqSIp9LFgnYu6lKfVPs3oE0cQU03+yeXhevEq8TTqgIFeY8o2LlgW/gDeVKAYBoDkojxgzOg7lNkbUpT8//CcBzewLxUJNvTd7pXddBS8N5w7rP5xL1USek5KlQlrBMRZYgLShOfeY+F04nc8SqM3Qrs108mtA2JUaAxUknhRNcSWHy+8jDTToUe1K+wz3V/h3MPbdIMQ/vpAp/V284PBxTVclkoaYxi2/H/FjX/Q=='}
[2025-06-04 18:18:59,698] DEBUG: Response status code: 200
[2025-06-04 18:18:59,698] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:18:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:18:59,699] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:18:59,701] INFO: Commands: []
[2025-06-04 18:19:31,968] DEBUG: Checking approval status for server 8
[2025-06-04 18:19:31,968] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'bRv74w9FsV50BVEB3iEaPKK0FfO8QtXIOMj8hK7k2Dmi6yF1ZbxlhVn+O+aglp64UjeU2rtSvbnpahTCqWfiowoji3vPm3m9Ejn2RuBXBSUt0g7h09bWmitsuL8V9vG4TQOB1BlYz/8k6q9oI6AIg0H4kqAQLuDVzGS4vpfAhupbmTFK6ocpY0k2R5DiNJgsYVSM0l7CS6/j1RckwzbQivnlqYYlRuMp7kT5O00TZ/XizxplwdNW/7CivsPCTktllPUDuCSotlIXPOqhUTJjjlP3oKX8mE0R1FOd50BRyWp53vgQj066L6xo7M8Com3XQWdDafzRsMg71g9AKhCtUA=='}
[2025-06-04 18:19:34,007] DEBUG: Response status code: 200
[2025-06-04 18:19:34,007] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:19:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:19:34,008] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:19:34,008] INFO: Server is approved and ready to process commands
[2025-06-04 18:19:34,009] INFO: Fetching commands...
[2025-06-04 18:19:34,111] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:19:34,111] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'UKGwbkUz9cbjtH71Hjurh3hLJS4CzT0g7AXEbfsvWE0gAFolY3g4IjmnCK0gSMG5m8TupywHr9jmckH42qq9xDILX0sErlHlLVS33MXK6bpTREVhQPY6qO3Yr55mKftJzUAQW3ViMY45tk8dDyVJywattC6HEqnEAoTB829TTmsQkx2QeicGXwlTQZ6ZTew8dEOy7S6doiD4oxyKHbtNRDcdpYesEWJYJ14Lc0EXIB/qlbjHwlELTlmpX9CdlUpKzT1gkRQvHyCoE8YbRYTPAAUkUSprc89gB1wFA5DIjdGT6JyttWU9cBo1eEAj5Vu5N/msvo3EaImCan4eic7ATw=='}
[2025-06-04 18:19:36,156] DEBUG: Response status code: 200
[2025-06-04 18:19:36,157] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:19:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:19:36,158] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:19:36,159] INFO: Commands: []
[2025-06-04 18:20:08,423] DEBUG: Checking approval status for server 8
[2025-06-04 18:20:08,424] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'QXH6JsJWFKZC/MBEKoP66rGgZIZFkQpJgatzWvPLTRfPin5ZMr/yLF+/23RqQhMqLHWvp2RgAPij4s55SKLG6y8D0rq5Uti6NZzF9J66Dr7jHfcU0HRoZLk56w/k7OQJZQg/M8aN3KOJEt9pxbsJracgS5feyPqB2j7U4tPuXnPQGtj09S7/+Y7I3yk4j1zRAjBE2CCW7WzSVbggXMArcCGLK4BLfscOy9D3fWz9iA8Ii9dRJ6yUkrk7uyeDcEjmBD/8Qd/+oK5HgHZ6ZwynTHaDQDj5sw5A3fug5hG//a5TVvSQpacj4VvgAX4CdOqJ9wYoGpCgCQUiOSA8qhgMxA=='}
[2025-06-04 18:20:10,466] DEBUG: Response status code: 200
[2025-06-04 18:20:10,467] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:20:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:20:10,468] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:20:10,468] INFO: Server is approved and ready to process commands
[2025-06-04 18:20:10,470] INFO: Fetching commands...
[2025-06-04 18:20:10,595] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:20:10,597] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'EftEt8i4owR6RdluXppplRS/HpDhmW1r4V1p2RvwFzi/zuyfTZuXAbGO4LeEo4UAesafQhZYZAZo8U7pSurfyhx77p7+7BAti8YCsNXtwGVvgSEd/OOL78rDn6FRWKdvSSYjLH61ixlBWIZspsOGYOow5uGwStJw+3o0zI/Saorj2jPVlR+HDVQzwW+BUseu0sz1Yr3FwLP2gsKGVJsny50h3J5wQwk2uUHzAZWdnFI047Q5NgszXx2zt2CTuYHPiuO9KxNb55LU+8SZ0oik74tMe2bDi2VF5g0bqzZTXyOuZEMbBxsE3zw60tSd0/J7YcgyMCrgLEP9EgrBnBv/yQ=='}
[2025-06-04 18:20:12,654] DEBUG: Response status code: 200
[2025-06-04 18:20:12,654] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:20:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:20:12,655] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:20:12,656] INFO: Commands: []
[2025-06-04 18:20:44,948] DEBUG: Checking approval status for server 8
[2025-06-04 18:20:44,949] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'OEwSkOJcf+5PT5r6ONWBUnZQYdd1ITE90Lb08YCXZboXABzfv0+8XMn5n0QvA0bLclB8X82sykd7e/wHNXFJTmAj6sJEYqSq2UrwHyO50d7Jh5tQcojY/uMHNeayg7U0Ck+fZZp6Dk2XnpOJfEU4oe1NYtxy5DI9ZH9tnG8XTJGBhKkyqRnKOGWgR0ii99I4YwW0Tp5tgpJBIAo44XhNXUUm+ByQs5eQaTolU5osFWc2iaZQdNw07wjCmeenNu14uXc7SQ6JQRZ2Uw3kW4L8A2Ts2wj3isf6BIkbtmAuDEbz41mcPxFW8b/7yYySEoJYBT9e1aJry8I1++oNmED9Hg=='}
[2025-06-04 18:20:47,008] DEBUG: Response status code: 200
[2025-06-04 18:20:47,010] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:20:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:20:47,012] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:20:47,013] INFO: Server is approved and ready to process commands
[2025-06-04 18:20:47,015] INFO: Fetching commands...
[2025-06-04 18:20:47,157] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:20:47,157] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'OymEzJvaM5jDwSH+VxuY6oP+SIHjt7jyiPNGhn2FihnUPzUFjsfu7pUEXTxTl1XNomRzOVTMSE3QY1XyL/7vwLsVFdjOSQTgLW1FwdHVjcZYorOb7sInbRISIx5Bfmf37hjjL5Q0qliNsNOeH4Iu9xglqjotFH6+pCvwzVUj6kAVKuG/MYJFEmi56f2Bfu9te1HFD5Gag4f2y+pM/2oUdBD+7BTK8Ivdol9mqEQg4dPqAovtki9uAJ/Jwc+1GRRFgJoQ92lyQL7q9k9b41ewZ2y/FOKQgQQOJqIa/Zy6O531E6TK7Ln4kenNKWWeMt+DR9z9Y5EErXlKNyYuMt2jrw=='}
[2025-06-04 18:20:49,209] DEBUG: Response status code: 200
[2025-06-04 18:20:49,209] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:20:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:20:49,211] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:20:49,213] INFO: Commands: []
[2025-06-04 18:21:21,541] DEBUG: Checking approval status for server 8
[2025-06-04 18:21:21,541] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'BkR2Pqa47wlFDB1cM76epPC4VsAUNMagfwnxQ4LXzOZKCbzbqo9RVK6w6y19s15BK6PIcCvaMjOtL4Xlnm58xozXSDLyKkGMbpbJm1S2+56h0r7dxzfJErPcFS/S1sR0rjKzi8Pf3HqyfwpuKnbG5HB13ZOdEA81YqJJq+1Llb4D3DnocpPuUSxFc6XO7WuC2H7h0maxuCM3SimbUeybllIvu56bWPndp1iCZQbT38bogTooXOeW8gPY5BKMWiVyuNLqopNvnazA6Qg2nq4QPah6nnsRpGFxa6YzdTXek+HFFyWYaUxMRtZaWaHMGCD2GnTMEQEo6eC0uJsGz87ybg=='}
[2025-06-04 18:21:23,619] DEBUG: Response status code: 200
[2025-06-04 18:21:23,619] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:21:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:21:23,621] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:21:23,622] INFO: Server is approved and ready to process commands
[2025-06-04 18:21:23,623] INFO: Fetching commands...
[2025-06-04 18:21:23,725] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:21:23,725] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'IzbA3RiNgisg8DiGnqVhm2OlI6Y89M7ImiGC0+EOnNviBpTlIHdyiEnuTDBruPM0PVFjNSbjGfj4Vq4mKNAQyE5HlUumK225sep7pOnjoUlYcqKM11ytNROKfm9IYqGESVXyhRPCgHPp0mg3cQvlIxMZ5kvp5TXXMIXGmnuT4GqxyK1xIwiPXdA4xgDd694av1KPqgHmAmfJ49JKRl1DSaootk3/kMvKxHsMOZaweFi5wBoOr8ojDYI1Vb1Oo0RKsx1BIcIDX7v61gLJmf9k+X6KnCa4oHMMTewSCTyOJo4MZ75uwtPIsebeTzCuSa00ofxoxxJEdD4bUEifMXnpLg=='}
[2025-06-04 18:21:25,803] DEBUG: Response status code: 200
[2025-06-04 18:21:25,804] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:21:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:21:25,804] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:21:25,806] INFO: Commands: []
[2025-06-04 18:21:58,149] DEBUG: Checking approval status for server 8
[2025-06-04 18:21:58,150] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Spcbwwab08RNOZ/kqVbZRVEVjv0jmeyLF0O0n9CAtdpjebIItyEGv9XUpD8Od+lpDWxeXvpXA/Uk+/sU9bQWI5l8hL47PcLDe55YmtoDkF7oGjMwvf2el5IOGUTvbq/rrHUKl5SRvQNrr8/fESXnZgxSdE6oLuwZ2+CRP9IyWNkPjQ6f0lPL9xK0SQF+afmOMtFiH5N1qfqoItq/gvkJhCgB6m0H3i7urgm9ujTRRREYsDJcw63gNHs9J1D1YqEj0G+F1yMC8PKjT42t+NdAwdqD01PGzHM/5vgpQWKwOAuQDjICVUB6s1hws/lDed/y+MzVaNRtwikm9PNvdup8dg=='}
[2025-06-04 18:22:00,186] DEBUG: Response status code: 200
[2025-06-04 18:22:00,186] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:22:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:22:00,187] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:22:00,188] INFO: Server is approved and ready to process commands
[2025-06-04 18:22:00,188] INFO: Fetching commands...
[2025-06-04 18:22:00,294] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:22:00,294] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'jfySsa2EAZpRcsJwo3LOclgmZDgbr58hPz03mcqyb3frXHPMbWjoEdBL/QVEXh8X7EJW2Nb5SmSOpUvK9TVJCWpW1D9ISgX9Y59a9kSRMezlUBb6nsyyey0t8M3uFdWzF9q/at2qO7IDzkJ8lpDiZhZ9OYi/b83kIsaoBc8ExxvwaLcdhQrV3kfpLgrhkmy9tSGu9HRMBHt1C3pB37QPJ2SsX0eiFdXysyxDcGFpEUbz1mfqNM+Y1EiPYXTAQje4REFxnyRPdwnAgX6qhkxvddrGbuI1rLcqQIgpMCZRA2atEOl8D89yoZy0Xsp8aM3ML55ltHt04JZRzzg3Pa7Elg=='}
[2025-06-04 18:22:02,347] DEBUG: Response status code: 200
[2025-06-04 18:22:02,347] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:22:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:22:02,350] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:22:02,352] INFO: Commands: []
[2025-06-04 18:22:34,682] DEBUG: Checking approval status for server 8
[2025-06-04 18:22:34,683] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'HcJMG7b1HuvcTHBQzw+WTY2xlBicq0dkZTYrHKt1EBzh3v3lxhLxp/3w57M+YyIXH0a2E270/geBX7Cyu/WG/BgkISh7Q4D1RWJ3DV4Vh6kQ9OQ/jzcBW2B+5t26iM2MdHXrHUSclHXJknmq1gqg5PR7fd4nQqUS5X+RZozh3/Mjtnf7N/N5F6La0d+BOlWKtTlktGldIKmBi3V7UoAkjwA7qqSAIIg9waFMwIDuc1jZVWp0gYfTJCLHloNEYaVUNWTXUn0a1qQXi+ZlI0pKfOvQ23ILaGNuyvtnlAEjd323/8wHjWmFgmCboqrY+jr/Bja7iOkUVAZZwXkvUo89Jg=='}
[2025-06-04 18:22:36,748] DEBUG: Response status code: 200
[2025-06-04 18:22:36,748] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:22:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:22:36,749] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:22:36,749] INFO: Server is approved and ready to process commands
[2025-06-04 18:22:36,751] INFO: Fetching commands...
[2025-06-04 18:22:36,864] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:22:36,865] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'lDp6ZHuUy9l0yYrvY9dh+20A4meHSBGOBunjODZC90BKIm2DnqqkWC9zSzkv/4UgS1e/dBXdSk+Q9NuWxyeZj1RyflSTHFyQokyXVrVeu3SqNTC/raswiKkn96oS/1OVHPdvXpbYMBmuMg2Klo/xz6h7eXWBPl4ZJb5JUMaAVFECX5i9d0HVFx98cDDIjZIK0Vl0jj10oVKqjimrhMEwOTC4enTjGGrmbaYz3MhOK5ZdJehQHLhoz8z9W55e33BDNmBv6j/UyyiYHlzPihjfXbPALYuZKRRYU1/vXRYmRyNoNrJatWlTxtF2ukb0ydTaxKigzYRylPzCfYF62Gu+Fw=='}
[2025-06-04 18:22:38,938] DEBUG: Response status code: 200
[2025-06-04 18:22:38,939] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:22:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:22:38,940] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:22:38,941] INFO: Commands: []
[2025-06-04 18:23:11,203] DEBUG: Checking approval status for server 8
[2025-06-04 18:23:11,204] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'RCgD8/S6hIe6eBw76HEliuEfG+iP1f1Ktr8+pDTlSr27wynUmoYT1n4fbYUihlDJcQNAsJYvNCG7TUE03/IzXzP+KEV7b889AiWo7FuiWKpeN4hCfc6Lz1v3YmuJyM+RFRMPm7ZCkIG2WjYhFAaVQGJGui1NCj8WruDfDZs0QYdxMmTdBYpQFN/jT6/DXwltaaCu36V/XTN0IcWWwG3rLdh7NXjpIuS1vvHGiMrCbo+wBewM3/0+Fs6s4tFnLwsAHOmoAaHP53/P3BJDq6CzrcnVWdGo4gFXZjKbS6K7U/JLgCFJGqhW2Ij7UdOQ1McnNLNyGubUUW6JO3nLz+NN5w=='}
[2025-06-04 18:23:13,265] DEBUG: Response status code: 200
[2025-06-04 18:23:13,266] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:23:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:23:13,267] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:23:13,268] INFO: Server is approved and ready to process commands
[2025-06-04 18:23:13,268] INFO: Fetching commands...
[2025-06-04 18:23:13,388] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:23:13,389] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'nKg2EeR8I+PgOoWprhafNzhA3nBItW2YssIoz5OoIJUZgdZyS3tyFYJQ5W1Koq/BMX7asYO5ZG6Pcf0IgTMpj1z5KVzbTUOZXRJt2q8XuD+BZVBzbVvFgCpvP8NC+Kxhw2ntIAVRCGxbdCj5SVZxGYoT5584Xwua6YEU+yoSpI3eFXHCoM0PQkYaYLY7wr8QoPhU5RDn3Kfjizd50qGaLP7VJ887C0080Ws+GyBgkEz7pblxJK9Kqn+betLLv+y88vBoD9IdQjlVJOEqeOQDnlwzsfbEjEuHhVQwRWwGojrJHo234qXiHlL4aJQmjcHAtAGSDvo8wqd+GrE9samUuw=='}
[2025-06-04 18:23:15,528] DEBUG: Response status code: 200
[2025-06-04 18:23:15,529] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:23:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:23:15,702] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:23:15,723] INFO: Commands: []
[2025-06-04 18:23:48,936] DEBUG: Checking approval status for server 8
[2025-06-04 18:23:48,936] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'PEMJLSErvFCUurFduAYZGLsfUHUHTefjsdg+mDq4dSy14N72uBQdbB7uv5/NsetUY/ERn4ldaYgtmAo6hpxMgUOG3NKG87lmbkyE709q6wbAzQnPVPEqgPpnv3+z1/RlMv+0PTvduUC4IEs/2vzoJKtBMTnzfJJUv3UOiDDwn/jxPtcZ5/5WZR5yBHn4f7WhXSq7bjQdM8MxhEZgrx9yNtBFn4w1sZxniAn2Omk0vKJczb62yzclF2dABLNii6rOmHVVLFCuujVdy8XE7IdMKtGy6J3a39eYSnUlwSVB4lvQrcan8zdrieNZ3rE5lOjFygXxC4nnX+TX9umiFmXXhg=='}
[2025-06-04 18:23:50,995] DEBUG: Response status code: 200
[2025-06-04 18:23:50,997] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:23:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:23:51,001] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:23:51,002] INFO: Server is approved and ready to process commands
[2025-06-04 18:23:51,035] INFO: Fetching commands...
[2025-06-04 18:23:51,420] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:23:51,422] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'BVE/ifcSHiU82HJ+ZPcR8FbjpNFjqggcUQhr7erCOiEbcclwuLjhxXH7s37TnjJotKbjcVc3KepAjio6UKL5TaJ1c/Epzjp4/rcjwKE67hLdV2XzxARALTXOnRWTM328/UEsaN7qx8W42dCdEmI466P6a6S0vTcsL3+twRcvnshRzXlxW8rpzwDuNJrt7sfbRARZl4DP5IznbNlQfZGmqEGGq6lnT6gNYlKEbOJlzflpoAgdU/uB/WhVwQNMkVauCjPj656XAEw8OzZRKl5cUKL5yp6eb6HIFpD9lDQUYx8BAYqrIp1sMlUGIy2F1xlmUW5URSGUyfRgXqeXj69K+w=='}
[2025-06-04 18:23:53,503] DEBUG: Response status code: 200
[2025-06-04 18:23:53,509] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:23:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:23:53,540] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:23:53,547] INFO: Commands: []
[2025-06-04 18:24:25,906] DEBUG: Checking approval status for server 8
[2025-06-04 18:24:25,907] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'DXmlBQOELpWOnWzz/ie1wjZeynHRcYwfy+wGWKFB3fbe7sJsaQBq26NdfuydJiOVHDKyCZ+Zl1zqTUqN5JFAU36ckfPCaHSUHvfNuI+N2IFkpz080U+s6rtJXszdToiG0am+WAi/apYheSLWwHdwGdONLeQ7i+MuLOVYxRssdqhgcwCBnoNb0XGooskosHxxC2/0Ykzlq/bbx75/PaCrzDbUoEuxqn/egnBAtayu1m++IWaPiFaIVc+BJNkHo4RUrV7kvHzhrhdpMrg3IEVomJUNv3H28LYg1BrJYSgdxWWC9OsToqN4Xzk5xLvYwB1AkzrR+sTLDU1W8tEPm7HfHA=='}
[2025-06-04 18:24:27,956] DEBUG: Response status code: 200
[2025-06-04 18:24:27,956] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:24:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:24:27,957] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:24:27,958] INFO: Server is approved and ready to process commands
[2025-06-04 18:24:27,959] INFO: Fetching commands...
[2025-06-04 18:24:28,042] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:24:28,043] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'cVTlM2bCQGipwwIeNRKSDUOMawwPYQ7LoWnsYTilOIsO5Zil4tMNtmbF3cH+797pQLF7bQKavkobVc2ILWE9jL2SNZUn1mX1VckCRLPIJRDwa5PQjn6QBJCdI5bv7GCo4bGMICX9178OzsBn7nOpue/RRiUhWWLnpdJooL0QvG3F3fvZmYX0uOV1sTm/6i13wVbngRl6UlfWR4cnzRleRmIJMheI8nmIromsBZ5CbKJvZ8ETptQZIOXAgZzh6+bhFygyndqW5c8ku/zo2CmDTFFAp6rrbK6dkCKCfgPYk7VCXKQ64XYL0zKZAGp3vpx0163qd1FbK5KTddi7BZwvgw=='}
[2025-06-04 18:24:30,112] DEBUG: Response status code: 200
[2025-06-04 18:24:30,112] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:24:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:24:30,124] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:24:30,129] INFO: Commands: []
[2025-06-04 18:25:02,763] DEBUG: Checking approval status for server 8
[2025-06-04 18:25:02,768] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'VHsaX4rs5boebYtB4pZOXD8nfoAul9nwN5Aa0+3IjL7rrrAY0wEnPQ6qbcrBH73mrz6glEQil0xPD+Mbw/TVme8zbq1KBFGZFu/vMKODJ+MiRUY0uZ55Hk774CCroqhcQdNFTiipaCg+cBEhJvL136KewCYesWxihsG+uqAv8G7D/rLPF/iMR3c0QnNkYwWAWTZe9uagRVOd3PfNvNQIHZ/1DXrbqcTsxELbNFO2PMjaJU2kx/FMMW0cL75UvLa38ytBBdTGm4XaT0fR4O+s5QXFJjTZ7LCHW/w9tDrheZw3zHOD8YcQ8LswpOmWEoMJ8LEdGcy9P1fNmfhg9kiQcg=='}
[2025-06-04 18:25:04,843] DEBUG: Response status code: 200
[2025-06-04 18:25:04,844] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:25:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:25:04,845] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:25:04,846] INFO: Server is approved and ready to process commands
[2025-06-04 18:25:04,847] INFO: Fetching commands...
[2025-06-04 18:25:05,019] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:25:05,020] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'SFCrqMOzs2EmWoIW9E1CP5RRuQHFseoLynQuKkUKYyW9DZWB2Qk9JrXVi8zjs2C/dEByoMok4usVLR3baVkhXFf4y8T2vp6v8+VT2p6D1+Ry3YuV3MNYGOYtBu0j9qESQPlU82EkqqapaY02i4rs1uqwF6osCZw3dm9BHm31Xa43qjtK0jdyRFsh0lhh0XaFV1jxMn5MlLwhsstYGtpP5h644tHvWP4/4FFVPXf5wZlRAWqt6zh/jzYmWsl/0/+sOrS6K7giy7q0twkKBRl2t2zFam/1JkiJXPiNDkslQ5OwxoLyCSKC16rKLyjx8OIoaMX992vDLyZ9PQ5ucAsQlA=='}
[2025-06-04 18:25:07,296] DEBUG: Response status code: 200
[2025-06-04 18:25:07,329] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:25:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:25:07,404] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:25:07,526] INFO: Commands: []
[2025-06-04 18:25:41,380] DEBUG: Checking approval status for server 8
[2025-06-04 18:25:41,386] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'BZc90WJsYYsuVACvBP/Lq5hV2adbEaOtMTiU1JxjhNefbbUJ3cQG49xSYdDayjbMQO1pvd8vlTNGNJSRmI2c4lq4nKCvpperrMeofTce9tR+d1ioJMg5BDCfy5kbErqrudHYi0+GTZX59wrRf+D6C/5IEHB51Be+xG+e36l0tC9ruW/sYMClTu9kBOwsL5644kQ5Iy8qLRO2hJ9cPlIgAjYYc24qUpJxZvvMd3HPVZe1lOP99ZwmsuTxo8tZMaWoMwOplVEKs+KB4MIplV05nUNy9yHoVGzRtNy1s0NRBiMXHUXWVUvYXKFu73EZZbrF0LZnsx6/llXtleCOkk2JSg=='}
[2025-06-04 18:25:43,871] DEBUG: Response status code: 200
[2025-06-04 18:25:43,875] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:25:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:25:44,006] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:25:44,037] INFO: Server is approved and ready to process commands
[2025-06-04 18:25:44,040] INFO: Fetching commands...
[2025-06-04 18:25:45,080] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:25:45,081] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'SRY319C4O8cbn1dIpug3Q59RJKj8PXe6EbZn39JcsAWFp/I917Ty1Qd/Us2dyOPWXC7kkprHV2xOzKrhfoGjrQAA3SDSW3Lgoefs+8m6Hssnxxhl/APqduVXJvIa+IvlgCPWtkUVcT/Yc5yUMZtHN7ecHJs8SNznYN+NPQRMbTTfK7k4wqn9hReWXJbU+wD2Ucmde9qF3JcEhm/uULlVOgoiUc0LBy0LW8B6MaQJWmOHGTbDsWZnC6xXFDpwv3gIBohUMS8KYhHg39WCelEkBnfYFdCMuwmHoJFeuWMeDJ9U3Os4GjTdtktxCab3WUg1UHClY1NbCrVTnZGXcUe47Q=='}
[2025-06-04 18:25:47,162] DEBUG: Response status code: 200
[2025-06-04 18:25:47,164] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:25:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:25:47,165] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:25:47,167] INFO: Commands: []
[2025-06-04 18:26:20,600] DEBUG: Checking approval status for server 8
[2025-06-04 18:26:20,623] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'L49PfUQS/soHIbN9VQR7btcbaK88FHgV1t6GvV+SPxRTLKX5EvHIfgEY4tCNAxx+nQ8Zna+89jJZJevSmlc0U/c6VunI9f3QS34ETwt8Q0KniVlr9ys24lz23ZpnQ5fKeq8yu/ckurVBx7f8mOL8exJgJBLmxlzhbSkf+EItRFy6oVdnlGQaYmpfNss2O1m5hRnt82V/1+913c/cfQ5Y72dtdKCpn+2gUfGBtL0V08xoGKbA6YPDEE7aUzHcLdH3C5nq4Cpl83Ht4fISX8mbpmMngd+XtVOJ8VbJfcD7F9totCOrDXdmFIeZH1FrHPsZv/IN1n2ZyMEftZPybAmpHw=='}
[2025-06-04 18:26:22,719] DEBUG: Response status code: 200
[2025-06-04 18:26:22,723] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:26:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:26:22,728] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:26:22,730] INFO: Server is approved and ready to process commands
[2025-06-04 18:26:22,731] INFO: Fetching commands...
[2025-06-04 18:26:23,046] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:26:23,049] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'WbizCsYbLYNKmfn74EljU7vTlPOJcSiJfobjwF5eJ13KA+RiyItZHMtJAOHQAL7xJhmMKU1TvxNv2dw1kHxDD/L2WgOCo9jqk8b70C6ibkA78Wg0eXZLgEF0vntgZeGrzmfN/RuCk2bKiR4OWHU73GFiJAVKgVOODWm0i60yujmu8URCWT8vvTPEFTyxqMdoGNkzkCavFTfnSfHKlzmdJshv5x63eWd+x49HSva02UX7Ff2uhlWSW0gzGG7No7NKPOqqJGeyLZ3qr2wW7MqEdib+Nnv2X4y7lsFZ5Fl+dLnY/5cLSK6B/x2eI/v+thF7OLZwiH4WtHKna0FeZ6YWfg=='}
[2025-06-04 18:26:25,372] DEBUG: Response status code: 200
[2025-06-04 18:26:25,396] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:26:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:26:25,490] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:26:25,519] INFO: Commands: []
[2025-06-04 18:27:00,463] DEBUG: Checking approval status for server 8
[2025-06-04 18:27:00,465] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'bNFR+k6JSufTQRvLPbB3kebeqP1BBPGfUmpd8hWKk9p/03OZsm73if6EyBEw5Idss+mmfmJkvEL8TPZqSzcJ59BToNsmcxwdJyPh3MsEbd+YVhPPa4rgsNrx3COPw1MWOaoyeOFulHUZeFskXC8fqUh05m8Ki/zVtopxkiQjq6GQ05SIMgqQYJsAL09llQqfoW8RGlnFfA/6Ks9hl4Ud6g/e/yd2MA60I2GvT9WnBxYmf/wgJRSLwQ1gQFuV3CHJifGJa/wwdOlT0vzMdRJDSIj2LKAkcEACZ+vhZaWgINxJlZCtNsEW7jHH+zfQYk4fya/rkI+oyQ9seaLo8scSqw=='}
[2025-06-04 18:27:06,550] DEBUG: Response status code: 500
[2025-06-04 18:27:06,551] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:27:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:27:06,558] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106242181888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242182032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242182176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242182320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242182464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106240583712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106240588464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106240588608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106240588752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106240588896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106240589040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106240589184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106240596384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106241124816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106241124960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106241131296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106241131440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106241133456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242172816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242176848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106242176992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106242177136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242177280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106242177424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242177568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242180448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242181168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242181312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:27:06,565] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106242181888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242182032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242182176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242182320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242182464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106240583712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106240588464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106240588608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106240588752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106240588896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106240589040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106240589184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106240596384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106241124816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106241124960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106241131296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106241131440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106241133456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242172816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242176848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106242176992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106242177136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242177280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106242177424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242177568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242180448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242181168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242181312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:27:06,566] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:28:06,833] DEBUG: Checking approval status for server 8
[2025-06-04 18:28:06,834] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'HQZAvhZAbW5zxRDEWwAsJY16UaEPGga3rOqXWcIpi/1DJqeAYVPT7vfjKI7ZSMheNyaBZ52Q9MsmaBcR1/6VnkQjj1+63ojtMenAjwmq3Qdv/wLMBGg3PV3AvuL+ex++P1K0hcDRp3F4JW3qWMrhMPi0yBxkCT4rzYFP0V39UWQqzDpUzXjo4W297AQu2E6+msYyc9SVCmQurkl0at0heOD2do1Jh06THzNSsMAOBiRhEN5l5ZGoO9rl3VEulApiVj8AeuoqS2GSjsmYaQszjHY8nIBQjaXWA7MTFdh4YkmyAJG6s+PiPqs8Og+vgqxVTuBnQ4TYC9WiXs6VtOIJMg=='}
[2025-06-04 18:28:09,371] DEBUG: Response status code: 500
[2025-06-04 18:28:09,380] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:28:09 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:28:09,891] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106242186352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242186496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242186640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242186784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242186928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106242183040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106242183184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106242183328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106242183472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106242183616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106242183760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106242183904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106242184048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106242184192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242184336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106242184480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106242184624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106242184768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242184912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242185056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106242185200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106242185344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242185488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106242185632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242185776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242185920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242186064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242186208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:28:10,063] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106242186352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242186496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242186640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242186784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242186928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106242183040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106242183184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106242183328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106242183472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106242183616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106242183760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106242183904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106242184048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106242184192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242184336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106242184480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106242184624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106242184768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242184912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242185056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106242185200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106242185344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242185488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106242185632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106242185776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106242185920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106242186064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106242186208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:28:10,074] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:29:10,353] DEBUG: Checking approval status for server 8
[2025-06-04 18:29:10,353] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'OXKLuckxpRY6kNOLqpqxPU6236kwOduQlmftajFvgjX0m6kltE3s5upa5FUBpgFcmzqBaXy/YbpVOUYsKvOGYcOc95L0ZZ1TeW56qD7gZF7E1S9f5fQm5s6IM0snwnthTc8ySvXhOqzuyNr9qLKtngE6zNrOGUT3SFd3Z7j2mfQLre0hOu3MrHJ/2UGfW0AtWc3tl8sPFJk8VmJ0P0YqGYbKUCglefFnO9Gg3nmQDn9z3LFsyYRNSwWa1bR6PzNHuqL239HN9RJKYfXQd64UDKee3YKqVvFRhv/5OyyofKyLFghFtDOHkXvKr3BDcgYHoPSGoe7Ki8cM+Cws5hUf1A=='}
[2025-06-04 18:29:12,403] DEBUG: Response status code: 500
[2025-06-04 18:29:12,407] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:29:12 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:29:12,421] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243010128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243010272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243010416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243010560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243010704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243006816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243006960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243007104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243007248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243007392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243007536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243007680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243007824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243007968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243008112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243008688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243008832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243009120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243009264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243009408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243009552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243009696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243009840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243009984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:29:12,429] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243010128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243010272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243010416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243010560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243010704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243006816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243006960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243007104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243007248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243007392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243007536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243007680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243007824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243007968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243008112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243008688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243008832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243008976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243009120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243009264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243009408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243009552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243009696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243009840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243009984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:29:12,432] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:30:12,790] DEBUG: Checking approval status for server 8
[2025-06-04 18:30:12,794] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'CCBaAzSQHCj+tGxqbpcIhTwkrRSTLrjyr5yGjLsJhC218L/kiuFosrp2w1fDqQ9YupmvgXUrchmprzWM+oygleKLDarpyBG01TDBo2ZPWAEZd+wvOI6UbnJgRyX42RhCIcngA5fUIeni+7m6H6mAsi/10vtBGe+Zm1EL4oXzHWFuO+Zf792XEGbj/pOiBpsXPOrT4Xt4DhZqAeokf/kYtLfCZvRbgjBLg/uJQwaFBKYByoDgRtYtviIk66u9U5pIhuGhAMbq5ZVuWFtRUsVUG37o5QxlqTQe2xE2rrLNqEKpM1hl5PtXRoHRI3Yu5BINY893ZCiG7ZHt7ATSzXJsQw=='}
[2025-06-04 18:30:14,873] DEBUG: Response status code: 500
[2025-06-04 18:30:14,875] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:30:14 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:30:14,920] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243014592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243014736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243014880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243015024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243015168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243011280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243011424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243011568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243011712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243011856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243012000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243012144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243012288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243012432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243012576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243012720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243012864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243013008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243013152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243013296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243013440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243013584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243013728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243013872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243014016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243014160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243014304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243014448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:30:14,969] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243014592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243014736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243014880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243015024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243015168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243011280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243011424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243011568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243011712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243011856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243012000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243012144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243012288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243012432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243012576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243012720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243012864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243013008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243013152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243013296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243013440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243013584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243013728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243013872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243014016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243014160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243014304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243014448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:30:14,977] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:31:15,072] DEBUG: Checking approval status for server 8
[2025-06-04 18:31:15,073] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'NniNkxIjxiezR4h4Po++W3BB1NQw5YCFVTW3mmfX837E6XSonxvMcHW+pWJxUw01MwxS4vRRdFcpjsX6Vdc5Ir9ejSSHkSArTMilFL5j3BZxr6V/FYWaS2vVZclcwaNhdlOu1lW+NcjaQAH63Lmg5ba4lkHCLURHVJEmGZRKgbEfV5wdKocAeQ4jZEj+NWZ6GYxPvDp2ITOGyVfMBvTHdayd7NPcDBztgZ9CXFsz7UtcjuS2hGncG4qd5ld6Q+3eO9Bx9Ei0dHKKr3CWH28QS/RNNvL1KORWB4wTHyiUEvsY0Ls5ZZYjUuz7Qs5L7qe9bWxawGctsexpuuPCDwv+aQ=='}
[2025-06-04 18:31:17,312] DEBUG: Response status code: 500
[2025-06-04 18:31:17,327] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:31:17 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:31:17,343] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243019200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243019344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243019488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243019632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243019776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243015888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243016032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243016176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243016320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243016464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243016608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243016752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243016896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243017040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243017184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243017328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243017472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243017616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243017760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243017904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243018048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243018192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243018336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243018480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243018624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243018768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243018912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243019056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:31:17,486] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243019200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243019344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243019488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243019632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243019776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243015888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243016032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243016176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243016320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243016464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243016608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243016752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243016896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243017040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243017184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243017328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243017472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243017616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243017760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243017904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243018048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243018192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243018336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243018480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243018624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243018768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243018912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243019056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:31:17,490] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:32:17,935] DEBUG: Checking approval status for server 8
[2025-06-04 18:32:17,936] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'XK2Gv6K72YraXRo837zQ74i9qWpV/h615s/DBa3yQ3T5kU4Eqd3DpDdYnlLpnXX+wKdn5qlJHLirU1jyysgXgWoXfdbSOYkZxoIZHSYR/6Kfnn1B7Fa09ybnAA7B6TAXxkESvhVGzbHt9CTYRFiZfJesQgYiLaRCRHfFdPbBz6gFGlQ80VDK0x817IyfW6v4DYxJaXWC7Sv80KwgzWlJ3QKB+cAI433xxi7oCFZYkkBmxVIda1Nx6GKmUL6BNe75L/TE4GpnTnhMHxZ2c7HZThNOg4Tk0QLaYRR0A2yAKclW2ui4xiguEdR/vv/byelXQTvMvzOFTPowBTR0p4SCxA=='}
[2025-06-04 18:32:20,010] DEBUG: Response status code: 500
[2025-06-04 18:32:20,012] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:32:20 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
