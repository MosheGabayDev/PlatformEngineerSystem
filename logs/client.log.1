[2025-06-04 18:32:20,029] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243105696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243105840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243105984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243106128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243106272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243020352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243020496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243020640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243020784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243020928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243021072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243021216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243021360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243021504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243021648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243021792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243021936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243022080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243022224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243022368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243022512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243022656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243104832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243104976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243105120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243105264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243105408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243105552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:32:20,118] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OGyiNB9xLjKevvufXId7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2106243105696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243105840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243105984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243106128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243106272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2106243020352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2106243020496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2106243020640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2106243020784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2106243020928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2106243021072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2106243021216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2106243021360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2106243021504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243021648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2106243021792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2106243021936">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2106243022080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243022224">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243022368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2106243022512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2106243022656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243104832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2106243104976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2106243105120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2106243105264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2106243105408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2106243105552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:32:20,306] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:33:20,711] DEBUG: Checking approval status for server 8
[2025-06-04 18:33:20,712] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'mNwLfm3hjpqZsva2o6/5wkAhKUYkX7QopQjXRL1TNnjviuUEtPkA7OFETQoOe0mfRf0Q9xAaszAeqmKTOPz1tTIzhFUEREjISKXBpIDVvzHvPovAYM9G/dVHOUXJfAWNQg+oObLPHmqupeQ0l1dUIzAqj74fFFGNCBzok9XDD9G5hDXVfEDfI163Qv42gNdA0H1v2+CDRR0qcAK5AuT0pO1JiFtMbAmJGjOsIMaRojbA98PSFEW/oOtnXapSv6xCmPiAPoakiGCxThJ2t+EIUoLWpiuQOJhJcPuIx8aflafSz5s1Dlf/gmjFPX02shjNS6qIN6/l5Mx4DmSW2gs9nQ=='}
[2025-06-04 18:33:24,657] DEBUG: Response status code: 500
[2025-06-04 18:33:24,657] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:33:24 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:33:24,663] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255084481280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084481424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084481568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084481712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084481856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255082866720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255082871472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255082871616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255082871760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255082871904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255082872048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255082872192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255082879392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255083424208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255083424352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255083430688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255083430832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255083432848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084472208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084476240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255084476384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255084476528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084476672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255084476816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084476960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084479840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084480560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084480704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:33:24,666] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255084481280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084481424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084481568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084481712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084481856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255082866720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255082871472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255082871616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255082871760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255082871904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255082872048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255082872192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255082879392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255083424208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255083424352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255083430688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255083430832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255083432848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084472208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084476240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255084476384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255084476528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084476672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255084476816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084476960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084479840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084480560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084480704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:33:24,669] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:33:34,275] DEBUG: Checking approval status for server 8
[2025-06-04 18:33:34,275] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'lxqFRxMjD5ajLn1BD6JnetsZb4CqE2PGVIaueEqzxxeZgNlEEDmEUj73yuXW0TlnlsKLNVZTsZCf2r8HJ4o0rfjrC8RhnZe2bL+mTg1J6IF0d0H1Feg++AJJq5Dx/kCB57VN4zREFpZf8B5SZ8Hog4Lnfn1DNb5YeL75WUh4REYxfopwmFZcdXOutaqg0kJRcUNRS0kkU/bH2NyXkoj4o09oji99Yo6Qvz7mkDcROWWlWFMvhLe9vXLCPQTP0SA1N4lOC9R3TO3Oqx9zSm2vcJBrcYciMzTKiZDQ7WG38f5TKlNR/nDRF8Ijtqq/VGhrI4zafxkxYau+29FdBwQSLQ=='}
[2025-06-04 18:33:37,000] DEBUG: Response status code: 500
[2025-06-04 18:33:37,000] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:33:36 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:33:37,002] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255084485744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084485888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084486032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084486176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084486320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255084482432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255084482576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255084482720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255084482864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255084483008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255084483152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255084483296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255084483440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255084483584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084483728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255084483872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084484304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084484448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084484880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255084485024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084485168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084485312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084485456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084485600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:33:37,003] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255084485744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084485888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084486032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084486176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084486320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255084482432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255084482576">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255084482720">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255084482864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255084483008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255084483152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255084483296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255084483440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255084483584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084483728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255084483872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084484304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084484448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255084484736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084484880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255084485024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255084485168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255084485312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255084485456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255084485600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:33:37,004] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:34:37,555] DEBUG: Checking approval status for server 8
[2025-06-04 18:34:37,559] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Dgpv7p+wftQ3PazuqsoewvZuxIYyVuiR7nRBNZp9GgpzApi3Zzf/RZqjPhNcPTiK2EU/pzq5A7Fc6UlnkyNoW7r7wKCIVpo7alQxWj/aEqD6FTCOlCdGEd5nnUggucPzvslaxSrmrZbDuiDJMgw+RmwG7Z9zCG3WyygHQ/4MoCqGKXfz8446XwQ0mtCJlZztyu/2JB5zvIFHUK8dby8fMkXTRB56lt8QTqEvlrdmS6E4S8/1BrHdZ5qDsleFZfKfYbCq5+WH1XsdgCrxDE7RicB108MgSL8nDlKM/QC7zalQ8udbD5gaKx+nFYCGKhGIHga+abNgddaibkauLAOb+A=='}
[2025-06-04 18:34:39,750] DEBUG: Response status code: 500
[2025-06-04 18:34:39,752] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:34:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:34:39,760] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085831072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085831216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085831360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085831504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085831648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085336128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085336272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085336416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085336560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085336704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085336848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085336992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085337136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085337280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085337424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085337568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085337712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085337856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085338000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085338144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085338288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085338432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085830208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085830352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085830496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085830640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085830784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085830928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:34:39,762] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085831072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085831216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085831360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085831504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085831648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085336128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085336272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085336416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085336560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085336704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085336848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085336992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085337136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085337280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085337424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085337568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085337712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085337856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085338000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085338144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085338288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085338432">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085830208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085830352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085830496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085830640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085830784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085830928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:34:39,766] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:35:39,993] DEBUG: Checking approval status for server 8
[2025-06-04 18:35:40,002] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'VdCHpsBObBSdMkb6lEpZCCtnnQQ9O+bTSzS9y6873JWMygHeGSuJ31TeYL8uwLx822/Cf1iFdraGLBAq0pz8czhpMb1Mmk/0wZqxdUwh9j1iT2VlxS+rClMQ55t+hEvlTgYv/xLN6TXOMjc1w/XwT2hf83JT3TVdQFWSU60XrILwfsvJkBu62kOokcdsjN9bf6x6W0zNUnCiUkMFgGdIdYkYx6fltOOduI+YCNlJX5ze46tKH8i8/xYJQTe51x0iuRQPPu+alaz/a8gP0JnSlMEhZCJVCnOzJDINR7XU14xwmSD2hdgB6GymTCMr5wxD+uirob5Npi9ThQOE6+wFhA=='}
[2025-06-04 18:35:42,633] DEBUG: Response status code: 500
[2025-06-04 18:35:42,635] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:35:42 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:35:42,641] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085835680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085835824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085835968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085836112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085836256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085832368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085832512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085832656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085832800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085832944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085833088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085833232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085833376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085833520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085833664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085833808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085833952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085834096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085834240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085834384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085834528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085834672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085834816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085834960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085835104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085835248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085835392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085835536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:35:42,853] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085835680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085835824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085835968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085836112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085836256">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085832368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085832512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085832656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085832800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085832944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085833088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085833232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085833376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085833520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085833664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085833808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085833952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085834096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085834240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085834384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085834528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085834672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085834816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085834960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085835104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085835248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085835392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085835536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:35:42,863] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:36:43,070] DEBUG: Checking approval status for server 8
[2025-06-04 18:36:43,071] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'fK41jDBCk3FQ35A9ifAEzoTwy1u5i/HNaubhoMqInO4o4WNcB19u20H3I2MPR1ltKXOz6CcqZDxHGqEknvQ17S2B79yK86SpLuoY4/Sz3CVEZxjq0CNAJqOkQMiHPOac8Yp+1KNhM64mCYcQsEXFi1UGRjhFyBJuLFJf0i77Ifp3l6ITlb9KRA7NJ3n22XsJBDNb8ccyCw92FY52yL329r+cT+voRMDU55EWBrTMJLMNN6CbDCTE98iq2Nw0XyyIPoT4hOxgSegHtC01upKdhYQbGAF3u3VlJRYYF7vp1sqb+5GFwppYMGWrZHYM6xrji6LUvJTHhnOqq8ij9NckaQ=='}
[2025-06-04 18:36:45,120] DEBUG: Response status code: 500
[2025-06-04 18:36:45,121] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:36:45 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:36:45,129] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085839712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085839856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085840000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085840144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085840288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085831792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085836544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085836688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085836832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085836976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085837120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085837264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085837408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085837552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085837696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085837840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085837984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085838128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085838272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085838416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085838560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085838704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085838848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085838992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085839136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085839280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085839424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085839568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:36:45,159] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085839712">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085839856">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085840000">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085840144">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085840288">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085831792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085836544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085836688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085836832">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085836976">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085837120">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085837264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085837408">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085837552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085837696">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085837840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085837984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085838128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085838272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085838416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085838560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085838704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085838848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085838992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085839136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085839280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085839424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085839568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:36:45,168] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:37:45,670] DEBUG: Checking approval status for server 8
[2025-06-04 18:37:45,671] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'W3qaoiOoGyXYbXZco76ZH1IZ2FTKDsZ1ITmOm7pIRA7tzj6FXONPzxvJ3EhSHrrhmfJMvOPTas+LLQlZJ4FPD6GCg0+qtXcwkUEOtt44OI5XmSvgRqj8HZOEHbJ0vojXvwsvinRq4LLC3c5tXGs9bjXQ2h8nBydL2xlCX0XFTFg77VMJZ9PMtAjXxwA43WX3wmzFLtFqdc3o+8fusmxIfCmOzz0nYzPXoHmsvBqYuCjES1LHgnpy6ZhPAjqpgg+1gYeZ61SYUCjKPJX/cFOcAHRu71UdRXktgdcTtSObcPXm46BS0W7repwMNNQE8A6cmStZdnjo4dsMIzSEH76tIA=='}
[2025-06-04 18:37:47,736] DEBUG: Response status code: 500
[2025-06-04 18:37:47,739] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:37:47 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:37:47,753] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085844320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085844464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085844608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085844752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085844896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085840864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085841152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085841296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085841440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085841584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085841728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085841872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085842016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085842160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085842304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085842448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085842592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085842736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085842880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085843024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085843168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085843312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085843456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085843600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085843744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085843888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085844032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085844176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:37:47,790] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "51Wkxka61fx0l6t380WX";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2255085844320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085844464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085844608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085844752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085844896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2255085840864">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2255085841152">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2255085841296">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2255085841440">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2255085841584">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2255085841728">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2255085841872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-2255085842016">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-2255085842160">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085842304">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2255085842448">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2255085842592">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2255085842736">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085842880">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085843024">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2255085843168">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2255085843312">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085843456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2255085843600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2255085843744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-2255085843888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-2255085844032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2255085844176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:37:47,798] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:38:48,123] DEBUG: Checking approval status for server 8
[2025-06-04 18:38:48,127] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'd18gSTlM375BaHoSSAZgjKqvheBKXUEyYs4vmzM5Ck6b+/eAX4pyIg4OG1nHldhJE55GLdiwt5IU/AkBkar9B5HmOzseyJpdzQF73zI2vCMv6JN5DupirW25v7JLVDpHTuQLnw3nTBAWSQGVGNVumf+fz7rdwSer1Ubm9aElO1Tq0rMyGlceNFpjaW8MHbwf/z37kxE6X+lFNY7yyBAoR0KGCcctnj96iboKK0wKNzy+tqtdA3PF1IhUiBNYlXpd8xUoyS7h34o7blRYl1fIrBLOUJo8BXgWzsFqkJtjv79CueEftv3lqWxE+4MpE2fBoK8Sb5A7+vJMMDSWBv3dDQ=='}
[2025-06-04 18:38:50,601] DEBUG: Response status code: 500
[2025-06-04 18:38:50,604] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:38:50 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:38:50,610] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749305780992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749305781136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749305781280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749305781424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305781568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749304199200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749304203952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749304204096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749304204240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749304204384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749304204528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749304204672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749304211872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749304723920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749304724064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749304730400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749304730544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749304732560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305771920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305775952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749305776096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749305776240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305776384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749305776528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749305776672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749305779552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749305780272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305780416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:38:50,614] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749305780992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749305781136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749305781280">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749305781424">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305781568">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749304199200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749304203952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749304204096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749304204240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749304204384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749304204528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749304204672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749304211872">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749304723920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749304724064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749304730400">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749304730544">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749304732560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305771920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305775952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749305776096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749305776240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305776384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749305776528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749305776672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749305779552">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749305780272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749305780416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:38:50,617] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:39:51,405] DEBUG: Checking approval status for server 8
[2025-06-04 18:39:51,433] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'GBuESGS5zFxRnPXFck9+zjL9+YrEKahZKZavL9b9oQc2iHPzLCYrqHaxemU8/imEJIWkntfoUnfTHA91kcjXtznH5Q35Iu4Qp00ttQ5Z1CBLSThHV5b4XXAhCdIkuCMwj0C0404/tiszKGrNz4zWq/ZO/BMd72LvbDn2pC11R6OPsMrZ0oVzvnwqaf4SJWKzhl/F2vtSj8Fn5z1CaPQ5UhIqbAxgHiFoNc9LqPn8VhaOsiIcjkaClNU6Kr/Wntc+4uK9WQI18xJflaQ/yR7NTNMzNKUyl7o0Pzw4hni8x3FZLzeP6ZtKjkT6m8dKtptJTpLh1mGlBT1sgxGFaU/beA=='}
[2025-06-04 18:39:54,551] DEBUG: Response status code: 500
[2025-06-04 18:39:54,556] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:39:54 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:39:54,636] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749307197184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307197328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307197472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307197616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307197760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749306849840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749306849264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749306849984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749306850128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749306850272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749306850416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749306850560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749306850704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749306850848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749306850992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749306851136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749307195456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749307195600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307195744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307195888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749307196032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749307196176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307196320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749307196464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307196608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307196752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307196896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307197040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:39:54,685] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749307197184">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307197328">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307197472">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307197616">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307197760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749306849840">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749306849264">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749306849984">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749306850128">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749306850272">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749306850416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749306850560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749306850704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749306850848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749306850992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749306851136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749307195456">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749307195600">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307195744">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307195888">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749307196032">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749307196176">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307196320">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749307196464">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307196608">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307196752">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307196896">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307197040">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:39:54,687] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:40:54,782] DEBUG: Checking approval status for server 8
[2025-06-04 18:40:54,784] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'kr0dEvIWY2x+D53n2V+COOZnmotzlRYhQp9LdEvub4Ajn1c5XBB7yLBy+Wo846b5nPuOaMYAwCmJWdzBkxEwoIC2Jo0b0Fk8gECwDKs9t/nZG2rce1jDMe58GMdNeydKUDgnTU0iZESvHHPdt0mahbqSDCP+rs/ZMgdQuXaGVyt1mODpdVMrahWHyiULUR6rxaMN5jzDHymjskOYZFfh1rajJjhK4sIDcxfXcdqQHrjoEcXMWzW8OVUjDevYYS3+G7CJC8gizYmNOStL+Y1McsCaIjmfU41+yLRdbSHr8dLfzySG2FAGV/1TNXq8OEnGOsIrSKOn/7bQVtzopPidzw=='}
[2025-06-04 18:40:56,843] DEBUG: Response status code: 500
[2025-06-04 18:40:56,845] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:40:56 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:40:56,853] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749307201072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307201216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307201360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307201504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307201648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749306848688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749307197904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749307198048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749307198192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749307198336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749307198480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749307198624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749307198768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749307198912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307199056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307199632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307199776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749307200064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307200208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749307200352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307200496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307200640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307200784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307200928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:40:56,862] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749307201072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307201216">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307201360">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307201504">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307201648">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749306848688">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749307197904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749307198048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749307198192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749307198336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749307198480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749307198624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749307198768">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749307198912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307199056">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199200">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199344">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199488">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307199632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307199776">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749307199920">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749307200064">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307200208">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749307200352">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307200496">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307200640">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307200784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307200928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:40:56,863] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:41:56,962] DEBUG: Checking approval status for server 8
[2025-06-04 18:41:56,964] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'A6vxTSWvUDtY7JlF37z92dtRDXOFJKQUHKrcihEkTk9bA4w1J6tUOu+JVLOuG1F6znfpSSi7ZvNDRVg2ZA+hJz1PxxKO2r5XfcBXpefit2mFCIKSfZ9cwa0PbmtVo5X7W/ziabW1tAAjm2MnisuvBmhLsru1hiU6FIAjEMLRpJPzNm69ZCM/nk+p+61mHEuG1EKmYh6NgGWQWO+1M02SSUDHHjja7RDHGnKnr/PKGjtWTRnM8dwqyC+CMzXZsXw0XPc/Pe4ToADZuC/pnvx9o81x9mtyQfFOBr9v4Y3EHP4yVi1QUSkh3MiE+lgkruq2vo7xx4JVTuYl/bSbAzYz7w=='}
[2025-06-04 18:41:59,033] DEBUG: Response status code: 500
[2025-06-04 18:41:59,033] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:41:59 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '65698', 'Connection': 'close'}
[2025-06-04 18:41:59,035] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749307205536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307205680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307205824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307205968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307206112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749307202080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749307202368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749307202512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749307202656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749307202800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749307202944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749307203088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749307203232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749307203376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307203520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749307203664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749307203808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749307203952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307204096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307204240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749307204384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749307204528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307204672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749307204816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307204960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307205104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307205248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307205392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:41:59,038] ERROR: Failed to check approval status: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dz8mef0HkbnQMz0H5cJi";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1749307205536">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307205680">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307205824">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307205968">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307206112">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1749307202080">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1749307202368">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1749307202512">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1749307202656">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1749307202800">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1749307202944">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1749307203088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">51</em>,
      in <code class="function">decorated_function</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def decorated_function(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>auth_header = request.headers.get(&#39;Authorization&#39;, &#39;&#39;)</pre>
<pre class="line before"><span class="ws">        </span>if not auth_header.startswith(&#39;Bearer &#39;):</pre>
<pre class="line before"><span class="ws">            </span>abort(401, description=&#39;Missing or invalid Authorization header&#39;)</pre>
<pre class="line before"><span class="ws">        </span>token_value = auth_header.split(&#39; &#39;, 1)[1]</pre>
<pre class="line current"><span class="ws">        </span>server = Server.query.filter_by(token=token_value).first()
<span class="ws">        </span>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not server:</pre>
<pre class="line after"><span class="ws">            </span>abort(401, description=&#39;Invalid client token&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Verify signature if present</pre>
<pre class="line after"><span class="ws">        </span>signature = request.headers.get(&#39;X-Signature&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-1749307203232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2754</em>,
      in <code class="function">first</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># replicates limit(1) behavior</pre>
<pre class="line before"><span class="ws">        </span>if self._statement is not None:</pre>
<pre class="line before"><span class="ws">            </span>return self._iter().first()  # type: ignore</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self.limit(1)._iter().first()  # type: ignore
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>Returns ``None`` if the query selects</pre></div>
</div>

<li><div class="frame" id="frame-1749307203376">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307203520">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1749307203664">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1749307203808">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1749307203952">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307204096">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307204240">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1749307204384">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1749307204528">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307204672">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1749307204816">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1749307204960">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="frame" id="frame-1749307205104">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._discard()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>mogrified_query = self._mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(mogrified_query, (bytes, bytearray))</pre>
<pre class="line current"><span class="ws">        </span>res = self._query(mogrified_query)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return res</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _mogrify(self, query, args=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return query after binding args.&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>db = self._get_db()</pre></div>
</div>

<li><div class="frame" id="frame-1749307205248">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>db = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._result = None</pre>
<pre class="line before"><span class="ws">        </span>self.rowcount = None</pre>
<pre class="line before"><span class="ws">        </span>self.lastrowid = None</pre>
<pre class="line current"><span class="ws">        </span>db.query(q)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result(db)</pre>
<pre class="line after"><span class="ws">        </span>self._post_get_result()</pre>
<pre class="line after"><span class="ws">        </span>self._executed = q</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1749307205392">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py"</cite>,
      line <em class="line">280</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def query(self, query):</pre>
<pre class="line before"><span class="ws">        </span># Since _mysql releases GIL while querying, we need immutable buffer.</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(query, bytearray):</pre>
<pre class="line before"><span class="ws">            </span>query = bytes(query)</pre>
<pre class="line current"><span class="ws">        </span>_mysql.connection.query(self, query)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _bytes_literal(self, bs):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(bs, (bytes, bytearray))</pre>
<pre class="line after"><span class="ws">        </span>x = self.string_literal(bs)  # x is escaped and quoted bytes</pre>
<pre class="line after"><span class="ws">        </span>if self._binary_prefix:</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py&#34;, line 330, in _query
    db.query(q)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py&#34;, line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, &#34;Unknown column &#39;servers.private_key&#39; in &#39;field list&#39;&#34;)
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: (&#39;9af0b81a88e040d482cc1a1d19f547cb&#39;, 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1054, "Unknown column 'servers.private_key' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 51, in decorated_function
    server = Server.query.filter_by(token=token_value).first()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2754, in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1054, "Unknown column 'servers.private_key' in 'field list'")
[SQL: SELECT servers.id AS servers_id, servers.name AS servers_name, servers.last_seen AS servers_last_seen, servers.local_ip AS servers_local_ip, servers.public_ip AS servers_public_ip, servers.dns_servers AS servers_dns_servers, servers.dhcp_server AS servers_dhcp_server, servers.disk_size_gb AS servers_disk_size_gb, servers.disk_free_gb AS servers_disk_free_gb, servers.cpu_type AS servers_cpu_type, servers.ram_gb AS servers_ram_gb, servers.internet_access AS servers_internet_access, servers.listening_ports AS servers_listening_ports, servers.last_login_time AS servers_last_login_time, servers.last_login_user AS servers_last_login_user, servers.running_services AS servers_running_services, servers.update_interval_seconds AS servers_update_interval_seconds, servers.client_poll_interval_seconds AS servers_client_poll_interval_seconds, servers.is_approved AS servers_is_approved, servers.token AS servers_token, servers.public_key AS servers_public_key, servers.private_key AS servers_private_key, servers.encryption_key AS servers_encryption_key, servers.created_at AS servers_created_at, servers.updated_at AS servers_updated_at 
FROM servers 
WHERE servers.token = %s 
 LIMIT %s]
[parameters: ('9af0b81a88e040d482cc1a1d19f547cb', 1)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

[2025-06-04 18:41:59,040] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:42:59,378] DEBUG: Checking approval status for server 8
[2025-06-04 18:42:59,380] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Uf6xpu6gNRTUTeCrXXFh3etROwGryKzBBDtywRm4l/+Y6gMpJYpMsyNsfrJu493FOpaPJmI0NCRW7jgcfEoC8HA9vdaTSRUmDs+zZu3pLMy70YUsWPkckJjrvw/KwNpJjUUgcIAC2hU/k4VoSZxOR8GoI4pAgwNG0dsPOJCruLSIVpd45x3rAIssGCb2ikB3GohpOOfJhm3vv5xrTyHa1tNEaeJvIYt9HHunbDpDQn0TzhDb8F6zAQJyHSOhVScnfzAoD2LneUB6Nmg3uOUnUY8x3Gc1UaPv7QC7fRHwrYPUabDPju7Ktcgfy+6kftLH5MXbL5PE6JK+HFganlG7Ng=='}
[2025-06-04 18:43:03,440] ERROR: Error checking approval status: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020D439150D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-04 18:43:03,626] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000020D439150D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020D439150D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 481, in check_approval_status
    resp = requests.get(f'{API_BASE}/client/approval_status/{cfg["client_id"]}', headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 73, in get
    return request("get", url, params=params, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/approval_status/8 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000020D439150D0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-04 18:43:03,628] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 18:44:03,927] DEBUG: Checking approval status for server 8
[2025-06-04 18:44:03,928] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'h1mZ+IbPb5NL3SeeZcC5OyPCiDVsN3z9qUvSuWLrebo2j681GX0bJcHr944SBi0abHEYRan4YXCWbZ2kPFEA17nziyfQTzGAA6Opzm5flNwbjthA5Kts5aZuZTKm10xIHSgwva+dVngQO80h0OwzaiSRDtE8HlLzPYHf+Fcwo8wvnKVVZTDencWuunfofRXcEAuZawdFiyVgLVfaMnmk1aZNIWK1SRyFgEgv/Hn7QL5P7WENKYpsehpGLmuC11fQgujRTAeJ3+LQVNPMe0GcUbHBgJ7rfR0k4aC8annLAtxiUD51moy8lqPmQwuaSA0ogXZVAUjrcayVg4gbD+CoXg=='}
[2025-06-04 18:44:06,329] DEBUG: Response status code: 200
[2025-06-04 18:44:06,331] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:44:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:44:06,350] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:44:06,424] INFO: Server is approved and ready to process commands
[2025-06-04 18:44:06,461] INFO: Fetching commands...
[2025-06-04 18:44:06,565] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:44:06,565] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Lk43eYyAna2Ntz5fQ4ddPuuvL7rv5SOn7frYHrA3zIrhXH9uG15FUML9jYA1/dBzQon1uAtBt91oXvvNinVe8rlKKKMtT3yZFHWRE4MjCo1VI0DY+Ur8PGPvzqN+3IULaXEt61cJozOwIiuzYTgBKCACd73VtJ1XXzQZxdMlFW5u3kIexoNXpXs9EaD/RNzW4yosHPGJIurXF2oTvw3dcj8lKPgw6a4cNDMtFexI8ky7GLWNgjD8B7DgxN6WJcHWcs+teSAUvVYW0Viu1HQuMu7UU0ivvfFohVEg7AuQzAH7CCJK3JeJF0/k9c7nQPs0kK5p3i5MroGrB9oSgItqRA=='}
[2025-06-04 18:44:08,666] DEBUG: Response status code: 200
[2025-06-04 18:44:08,668] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:44:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:44:08,678] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:44:08,682] INFO: Commands: []
[2025-06-04 18:44:42,951] DEBUG: Checking approval status for server 8
[2025-06-04 18:44:42,956] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Eq0UQT3ssIv4PmXfCySFrzZBJpEGtLX5W2MuiMxwaw7NzK/cWup6s6mk9KsDW+IwnP2OFri0wlvP1V19yiTBSyNBm76s6zyDd38p2SxoPuevFc47MX7R9jQhE5pPo3AdYqAUcDeys4tQhl7wX8PNN2HYk756nPY9ciCy1ObW+dz5nApRyl9+b/ARFDo0/Ruwuh/gK1S22fNbmNMTOkQjn3ipUMnHzwlP7Glc2L/n+cAxBFRXuUEp7BzF9YNGjWczq41I072neezXRQcKKBHpywvOQhSXmcDfE/aZKHXj8QLxY+xaJ7u6tYivP4ZtjM53gpzuFPrBrAigdBxjAETlOA=='}
[2025-06-04 18:44:45,117] DEBUG: Response status code: 200
[2025-06-04 18:44:45,139] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:44:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:44:45,156] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:44:45,158] INFO: Server is approved and ready to process commands
[2025-06-04 18:44:45,161] INFO: Fetching commands...
[2025-06-04 18:44:45,418] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:44:45,419] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'oNKpl7zFoPWL2Ml5tPy+CDdACYo0cXUTPB9MYUXo3RkUHKUkluOBmI0NoDccI2/z7trWKo68+uH3+osTFo59L4q0a4PsZx/1tZou/orQJ6sOglu1kBI1i8TAREvXT2a6UgF86abYe3ea/V4FlncbxrI80MnWk8IEyqbczaZOBb7aUqMExcZJ1TBJzgQOD+U9B3kLSAM7PHsPOoEVB3a3O3X0dUxXSswIP41uUsQJZn5bpdYGGmYRjl5FhRRSkXekoydApOT+iQV14lMdhsmIrgZwK/xghz/PA1Hu6MAHLnYTjRYe2mrXf+RnK+IABRbDRkygtA6ZO9qoirR1J49m7Q=='}
[2025-06-04 18:44:47,550] DEBUG: Response status code: 200
[2025-06-04 18:44:47,551] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:44:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:44:47,553] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:44:47,554] INFO: Commands: []
[2025-06-04 18:45:19,907] DEBUG: Checking approval status for server 8
[2025-06-04 18:45:19,908] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'UChXhPQwLn455qPSDnmoXKu0lwdYaeqTkfpURAq8Niekl64sMc0eNU1LSDM0Okig0mctnnJ8Jr/BxRBFMfWpb+3V2rIM+KCas58x+2Hc90YjJkMOBK3u4b9gwIeQ211qTDfPsVegkyQOa4h/5pa+3hYLMejpAtOwFw+NcEhq0nIf3+MAKHnL6D5qM2Rl870CLVnE7hndISiw+knJCiRc8bv0KLrvA8ECX5mzT2TLp+b7OE5pbsXzUxoGWFyNlmi599EmAAeDENgYv4zMLWA/PrfzZIot3H1qlwWSQ1Vf/RpIEeanthRu++3UlvQq4BFF1Ie6uVFSLtOyuwOY7XG+Ww=='}
[2025-06-04 18:45:21,965] DEBUG: Response status code: 200
[2025-06-04 18:45:21,972] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:45:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:45:21,979] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:45:21,980] INFO: Server is approved and ready to process commands
[2025-06-04 18:45:21,984] INFO: Fetching commands...
[2025-06-04 18:45:22,150] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:45:22,150] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Q39LW8lJfz2UMj4m0Lqgl8Ny4sZsi312zvTuXN91vmdhDMp0CbTIlrubLm7vSt5hMX4khHQ6VIq8bZRpF6D1zt6Kf6TgIxRZvq8zJVRogLXYMKzaeZTxq9aDWgne/PneNS6gAXetvSw8EvxUUBE2QuZ83HN+vUVyypWSHRMyveZWRFDhHgawnbJKVV3W3Zmg3b14nhGeHTtV5SbkG3EZz0skErFJPbAZJPp0nPB3nyjREILSm4L8pBP1o/Xx3SwKUdJF+iTaaKhmhv6xh0EufqR+PyQEaQLUNUPJyAlAuU/ttQ15BbymAed7JbIsHEceVCVBW824d7MARfaerT5biw=='}
[2025-06-04 18:45:24,483] DEBUG: Response status code: 200
[2025-06-04 18:45:24,485] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:45:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:45:24,495] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:45:24,497] INFO: Commands: []
[2025-06-04 18:45:57,692] DEBUG: Checking approval status for server 8
[2025-06-04 18:45:57,692] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'gkou3XHVZroj1mCBFRx2Qq1vnzYSL3Htf8thPChuWDv31QlQS81u76b/gtQsU94cLxjghdQHJ851AQmKE8ba/PgK7Fb+vOZmZSJXJ9lepFx3M96ua1fbZHCcnDvd3rjNiKCog5KmtGQuXjIZhVdPELrxXU+qip1iSFlOGpBpoU0MJ9Dj013X+EJyWA+Qy5KDluQUmrCwGQ5BB08hd2oQ0eXcPdDdSMmSzgwHWwnBoLWPEjTGqVXSokmo6WsCArKE+OHOr7Qvau5yxvpwfY8PyDFJ6+Jhdlv9VS1SUXdpG0SIyDppioerjXOrJo0Vxckis13bSJH5Gp4/TW+dYZRMJg=='}
[2025-06-04 18:46:00,438] DEBUG: Response status code: 200
[2025-06-04 18:46:00,438] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:46:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:46:00,503] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:46:00,519] INFO: Server is approved and ready to process commands
[2025-06-04 18:46:00,622] INFO: Fetching commands...
[2025-06-04 18:46:01,047] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:46:01,107] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Zm17YR0N8OyRW/kw88HwxOmfwL/xgnbPARIfS/eS3gHkgoNak851cA7e2Htt4L/0uNnZtcNTGzRR4wWaYgNCuXp98o/5mErGSrS2If1FRj9vIXH7sNuaTx02ZDe01ueypbNjiC+Ka7dgevNpAiInj+pGxLSeq0lQPq2Wh41cyMY5YBnpSBLCZ3CJE3YyFF4MOnwMYmRYRDdaAmrSj25rPw1WAXfrbg9o0ZLj0hOoYpe4wD+/CNBbhS5grwhhKjJQeJfzvtZppOm/1lZUkZV/4JTVMxLxaCLjJ5X4vLlIFAIfCN1mUHt5sLC9BhCcBKKYhOydK1tAQY9ldarTI60vkw=='}
[2025-06-04 18:46:03,667] DEBUG: Response status code: 200
[2025-06-04 18:46:03,676] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:46:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:46:03,732] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:46:03,796] INFO: Commands: []
[2025-06-04 18:46:36,994] DEBUG: Checking approval status for server 8
[2025-06-04 18:46:36,994] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'jhkol7EFE+lXc0Qoo/HlnDH1QPiIq1rk92o4pW7sH4KbOy5O8MnVjWqSJYCIqurZV7zjgkLZn+09TLFYsv7RjJnugupeCA/k0M2LK0xuxW+GpsShRrA9p32rAwcTAHaQbGluRgq/r12k3WVKCg5mId9ROEBBX7Mg9RejVVzr2386JPdKlqoiCqgkAUmGzTGLz7jSxUdxnisARiIDAt4RT/JOvc88RLq4b+Cvy1SgUv9P2KmGs7E8sYbcGURC7PHTXI+zcsIJJgaHo/HLYRBuTmGwYNybuOnLYp47g3/iwNjzaWcjNsiv/T/euFW3kdXDkwis+yj6LjNFCYrsTkW1Iw=='}
[2025-06-04 18:46:39,410] DEBUG: Response status code: 200
[2025-06-04 18:46:39,411] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:46:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:46:39,449] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:46:39,454] INFO: Server is approved and ready to process commands
[2025-06-04 18:46:39,461] INFO: Fetching commands...
[2025-06-04 18:46:39,859] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:46:39,878] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Yof0srlMppu6fKcFKt3VWORBvG09ks4iCzz+VC3ZAdJFWTORl2Mcl5hq/PcltzOh1+X7o6cyOyunOtWs+d50o7uefAO4uocwEV0CHHa27/RWjpJ8uAqhIRTfW61rEMG5reh42SaidIr+O7JkkUhOJuijgEHNwhraqQrIBIYSEyxnyHOyT+u2GRzBayyKf4i1cs2Ybu26O5vbIh2ZPlw0Db6/+7iwnFQV8zA21kaRScm7YivweunKc5VjBkcODQCicj4q9m9++DiTeTdGmGTPhqpBvJawGl2/qjZvl+gVcPghmG3Q1ezaDm85DOxBpnMHKnVAZmflSpwFAVWp7jBd1g=='}
[2025-06-04 18:46:42,492] DEBUG: Response status code: 200
[2025-06-04 18:46:42,507] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:46:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '152', 'Connection': 'close'}
[2025-06-04 18:46:42,528] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "systeminfo",
      "history_id": "21",
      "id": null
    }
  ],
  "interval": 30
}
[2025-06-04 18:46:42,552] INFO: Commands: [{'as_admin': True, 'command': 'systeminfo', 'history_id': '21', 'id': None}]
[2025-06-04 18:46:46,910] INFO: Running command: systeminfo (admin=True)
[2025-06-04 18:46:59,515] INFO: Result: {'success': True, 'output': '\nHost Name:                     LAP-MOSHEG\nOS Name:                       Microsoft Windows 11 Business\nOS Version:                    10.0.26100 N/A Build 26100\nOS Manufacturer:               Microsoft Corporation\nOS Configuration:              Standalone Workstation\nOS Build Type:                 Multiprocessor Free\nRegistered Owner:              N/A\nRegistered Organization:       N/A\nProduct ID:                    00330-73745-00003-AAOEM\nOriginal Install Date:         10/13/2024, 11:41:51 AM\nSystem Boot Time:              5/30/2025, 12:28:48 PM\nSystem Manufacturer:           LENOVO\nSystem Model:                  82RF\nSystem Type:                   x64-based PC\nProcessor(s):                  1 Processor(s) Installed.\n                               [01]: Intel64 Family 6 Model 154 Stepping 3 GenuineIntel ~2500 Mhz\nBIOS Version:                  LENOVO J2CN40WW, 4/15/2022\nWindows Directory:             C:\\WINDOWS\nSystem Directory:              C:\\WINDOWS\\system32\nBoot Device:                   \\Device\\HarddiskVolume1\nSystem Locale:                 en-us;English (United States)\nInput Locale:                  en-us;English (United States)\nTime Zone:                     (UTC+02:00) Jerusalem\nTotal Physical Memory:         32,492 MB\nAvailable Physical Memory:     4,078 MB\nVirtual Memory: Max Size:      79,596 MB\nVirtual Memory: Available:     17,709 MB\nVirtual Memory: In Use:        61,887 MB\nPage File Location(s):         C:\\pagefile.sys\nDomain:                        WORKGROUP\nLogon Server:                  \\\\LAP-MOSHEG\nHotfix(s):                     5 Hotfix(s) Installed.\n                               [01]: KB5054979\n                               [02]: KB5061977\n                               [03]: KB5058538\n                               [04]: KB5058523\n                               [05]: KB5059502\nNetwork Card(s):               9 NIC(s) Installed.\n                               [01]: Intel(R) Wi-Fi 6E AX211 160MHz\n                                     Connection Name: Wi-Fi\n                                     DHCP Enabled:    Yes\n                                     DHCP Server:     192.168.179.47\n                                     IP address(es)\n                                     [01]: 192.168.179.211\n                                     [02]: fe80::f95b:d3a4:c0ec:a347\n                               [02]: TAP-Windows Adapter V9\n                                     Connection Name: Ethernet 6\n                                     Status:          Media disconnected\n                               [03]: Fortinet SSL VPN Virtual Ethernet Adapter\n                                     Connection Name: Ethernet 4\n                                     Status:          Hardware not present\n                               [04]: Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n                                     Connection Name: Ethernet 5\n                                     Status:          Media disconnected\n                               [05]: Sophos TAP Adapter\n                                     Connection Name: Ethernet 3\n                                     Status:          Media disconnected\n                               [06]: Realtek PCIe GbE Family Controller\n                                     Connection Name: Ethernet\n                                     Status:          Media disconnected\n                               [07]: Bluetooth Device (Personal Area Network)\n                                     Connection Name: Bluetooth Network Connection\n                                     Status:          Media disconnected\n                               [08]: Wintun Userspace Tunnel\n                                     Connection Name: OpenVPN Wintun\n                                     Status:          Media disconnected\n                               [09]: OpenVPN Data Channel Offload\n                                     Connection Name: OpenVPN Data Channel Offload\n                                     Status:          Media disconnected\nVirtualization-based security: Status: Running\n                               Required Security Properties:\n                               Available Security Properties:\n                                     Base Virtualization Support\n                                     Secure Boot\n                                     DMA Protection\n                                     UEFI Code Readonly\n                                     SMM Security Mitigations 1.0\n                                     Mode Based Execution Control\n                                     APIC Virtualization\n                               Services Configured:\n                               Services Running:\n                               App Control for Business policy: Enforced\n                               App Control for Business user mode policy: Off\n                               Security Features Enabled:\nHyper-V Requirements:          A hypervisor has been detected. Features required for Hyper-V will not be displayed.\n', 'error': '', 'duration': 12.590977191925049, 'returncode': 0}
[2025-06-04 18:47:01,956] INFO: Result for command None sent successfully
[2025-06-04 18:47:32,530] DEBUG: Checking approval status for server 8
[2025-06-04 18:47:32,550] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'mUBrcGkixoGiUkc3Zr9qLCpgBkZ8Mvvt/AKORV0bALfZdjnykOddUSQUn+zlOhHMN5BUdUazKWlsgk8ZRF3OPUSZcWGbAF3WT+p2bxXv+fjdA6ig+yXwUYt6ABbrgG5tkF5D1FvRioFRxF3kh4/5qKgGxPqB+OsDy37hcEMMSzjuFIv93B2CF1E/VvEOYV2z3o3XuN/Y/29xM3vo9TKdArDWatgPN0b7RoAppq58m9AUwhxVsIIBeL4K7NjKSwOf0i0qTd3xcnFJXHW2fzyTDbfj5cKAA/o2dQ4QQbe4M+PmHWqTQ4rVYx5RCRWcTq6N3h7iAF9ucO/7VeiFpTvRcw=='}
[2025-06-04 18:47:34,600] DEBUG: Response status code: 200
[2025-06-04 18:47:34,601] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:47:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:47:34,602] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:47:34,602] INFO: Server is approved and ready to process commands
[2025-06-04 18:47:34,603] INFO: Fetching commands...
[2025-06-04 18:47:34,699] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:47:34,699] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'h+KGdU//gXch+l4fx9F0oA/JVapG0T7s+ZqOVmZQegnx6TBZnEeK32G2WiiGkvt+OmpxDGQIdkEginGJlhakaDK0IXaZMRD4SvFb2t3DT75ycF87jVfl3Jx6CLWFQiqHEdCm7xCqRMSjEByMbb0KDBHwtj+h0/NxchN5RBpHZ8EFQXG1TO8gaJDVmPOobz1miAUSHPNtKlrMe0A5ZlhByqumjDV4WrB2a9x9i4Pw8wXabSXCi5XEkDEnNa5PQ4yE4m2Da5DD1P8UHTa3vOAR0aOwetcNVrPPAAhcr4+qBUTh2aCnLTvyppN+/1HvHiBWfYzKkduXa6rMw6YB+Umt5A=='}
[2025-06-04 18:47:36,926] DEBUG: Response status code: 200
[2025-06-04 18:47:36,927] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:47:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:47:36,928] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:47:36,929] INFO: Commands: []
[2025-06-04 18:48:09,615] DEBUG: Checking approval status for server 8
[2025-06-04 18:48:09,620] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'OkBx27GX0mXxDtwfadRFVoR/V2fAXwpzDvcpkTZcUDmdWbrOMEawWjFKAY0POVnPVfiSitgPHiwSZm+zxKsSoquKywXY427YaQURWCY8pQHmhRqxhZITK0tKrG7AARG1pTTxFmwDW5S4rurihtIrHNl2B7lS96RLzK4galxXLhoe6gxiLWZQSZO2bEOzNaq+0hIXqyvyQh8AUj994OAwYvsxcP69Rm9H37dhyOO8O3w+LIN/maVDSCeFZftf+dg8jiLkRnmlhyDtJXZziGOR/7Cd5aU40d32i5J2DDx3sEK7+k0ot1zF1uFR3kfiFQ2KFh90Xl0QBPfU6JwJhWHWww=='}
[2025-06-04 18:48:11,910] DEBUG: Response status code: 200
[2025-06-04 18:48:11,927] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:48:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:48:11,932] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:48:11,940] INFO: Server is approved and ready to process commands
[2025-06-04 18:48:11,950] INFO: Fetching commands...
[2025-06-04 18:48:12,296] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:48:12,299] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'B5NAMS6LOwtAnz0GGHvV7cezMYTduwjqe9PcCkBQXl3nw6EVSxLsh7v+9XoOPz1YNQ8qYizYSzlzpSEMFSmellDWN6ksuelOxbPRk+vdwd1KAXeeWF0aa3pM6itb95kzQ5Xnr9i7Xf2VtlUbLJSB9e/6fl10iwBFlvcP57wZesaXl+vfHbjDAoWdr7nudjNna1odcc+s/OxUl7844wXIkkdbE0HFaTJS8fy04C/6/0tHk88gRHSmiCGZj5o1iY2an9LsRueSwA94bKdMFbk8nGSxdhqmIApYfGq/7VWCOg5RcCK8ggayG7zTDju9j3tYwb8U/MX5LQjf7tVyAQ57Lw=='}
[2025-06-04 18:48:14,537] DEBUG: Response status code: 200
[2025-06-04 18:48:14,539] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:48:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:48:14,579] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:48:14,613] INFO: Commands: []
[2025-06-04 18:48:48,254] DEBUG: Checking approval status for server 8
[2025-06-04 18:48:48,255] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'OWqOBOOrCin7S3nyWAkaoDx9LQjSgfY7Yq5kZt4DoXdHbH6yUz7vWv0k/F9PxKcRz+j9M3WyU/Zm5FhblRct8BrClcMXr9I9vIWHcP9FZxkqTU8t3t4y8Z2rArlV/6DhViCdOlxVeW7/+1cX3ualR5GY9D41logfuP6+OIiJF6X61ke8zTm3NCDQYhbDoiKYuTVf40wgCCTEADO1opnk0E9PZyUxuqL2Xg7PzlvhIVM8Qk3lHkNF8c/7SBuBCSSgvT0hDzedfK9bRebXAJShvlNb6nJezRm3f0yulyyX9y9yrUtQRoK4zQcmGHQWD9WtEm3+QIW6g2+Y9J8SCAx4Cw=='}
[2025-06-04 18:48:50,531] DEBUG: Response status code: 200
[2025-06-04 18:48:50,534] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:48:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:48:50,538] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:48:50,540] INFO: Server is approved and ready to process commands
[2025-06-04 18:48:50,559] INFO: Fetching commands...
[2025-06-04 18:48:50,739] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:48:50,741] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'aArIoJqzmSbOkEIZsAzaE5F+aTy13ujKd2j7nzJWEnvqgpAPF/7zdqrhN38UN3VJ7/uecMzWrbBgUr18J690nMof59S6AZHNke4ZWMJIzKPyC5wMDD4a8/p8dKOW7SqETEUxL9Hv2M7jRb7yaTs54zT2MgEDW423SGd8iP+FwnA8wlOhdnCNgm559icv3WvSQWBTzaTEQkO2uR/Tt+M4CDq9I2+YEwoweJhKcQjdJgrDxLcb5QeHzQpGroDVfmffhqJ7B/w3ne46a2MnpR9lAb+bVM7xlxkeCSbmFuatP7IOvYEThihmzrugL971XO/aqmNTHAiE2xudvd/q1dtzvQ=='}
[2025-06-04 18:48:52,830] DEBUG: Response status code: 200
[2025-06-04 18:48:52,833] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:48:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:48:52,840] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:48:52,843] INFO: Commands: []
[2025-06-04 18:49:25,072] DEBUG: Checking approval status for server 8
[2025-06-04 18:49:25,073] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'j9dC5rOZuqUIWFwWn+iC6jA4wx1cW+HzmfVPUVTmUppdPBUc/gcBh0vUmh6XhD6R/Ady/L2WVt09uusd6IO7M48pkNIswBd25mntDjxRr7UB+q/HgXd7p9VQHHudi1NEeu1CIrJEVM0qLjOjcMvcR2cUygHxDnqLBZSES1xobTdCDGixlvU1Gh8Txdwro0VhRif/JqZTefXWVQNLCx425DZunjlWMl07fMb5cBgtp7bVq/IbkN6Jr4e2ulSdMvZlukLQFlI3sydvzqB2RGDaiYhjOQW8+91dmJWkTVU3EgC4MJWO3Ze+PXz1EYGGWEk6LtOAnmoO/Y6ix5DA621xQw=='}
[2025-06-04 18:49:27,183] DEBUG: Response status code: 200
[2025-06-04 18:49:27,184] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:49:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:49:27,185] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:49:27,186] INFO: Server is approved and ready to process commands
[2025-06-04 18:49:27,187] INFO: Fetching commands...
[2025-06-04 18:49:27,279] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:49:27,280] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Ia/CvLUSMCCXARfz0s54hpJpua+2TpQfma/joR3jNZO/gYuFvKItVrFX+tHdWtbMZj+0SG6HoKiiJFN/A2SyKUdVB8+fDj0qtWJZ7CfEd/y/fQjV5cmH8CjwK/1OyER6c2jqmIjYWzzQniCNetvekmoXl2bt8UZivtMF+D7IuN0Uu3D1xgUY0SfFImN//MpfRRhEA6W2FiiGQeFBe9Dt4Jbcn6/E47S2h450GzFc5JNuBIkEBtMFjDGOMLfcnBC+GCflHE/C96GZ6VSYe9KoH9jkRbfYe7i3YACQnwbEiPJGq3iY3FzGdENPQK4E8G1tMu1voDuFQ+BBKvT20x1lmw=='}
[2025-06-04 18:49:29,404] DEBUG: Response status code: 200
[2025-06-04 18:49:29,412] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:49:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:49:29,419] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:49:29,464] INFO: Commands: []
[2025-06-04 18:50:02,068] DEBUG: Checking approval status for server 8
[2025-06-04 18:50:02,069] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'mI7enRUb5f18AHhMEkXe5VmH62Vf6eagYmpyBJtqSb9gCck25izGLbbExKBLZGzy3wvlUyJULM52xmZynSi/PxHd0UnryUS/BTzjel1PKxNa6IT/GOFMkC4P13TzTNZjxW8FcyJFlcuyAIqoHRs6H0c5Bw2N7g8Ewsy0HmMVL0lSrhxTR77UeTvVj7iVpBzbGCYOQWclWv5l664IB03ryY5OCnzDO00+bpaUIymXZonl8DcjsZuibpDAPheZ38/lXeg6dqZGA/wKoS1k50rF1tBM7NCz0hiR+cmIFmwL4QbgmZ11Si89OgI+SUz/aOm7SH0LsnY3vD+Lwvw49vbcGw=='}
[2025-06-04 18:50:04,692] DEBUG: Response status code: 200
[2025-06-04 18:50:04,693] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:50:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:50:04,696] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:50:04,696] INFO: Server is approved and ready to process commands
[2025-06-04 18:50:04,698] INFO: Fetching commands...
[2025-06-04 18:50:04,908] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:50:04,910] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'VVX0vQYFO5Z9SkQy80cqVJPW2WayeaAAU9qK56Ry8zpLfaRMYyAjZMqdi4Z7uFCKiu7rOaT919xSrDFSPamYAxLIjv85NrFNNQrPIFOGR5iDWYJ5A4udpIH6x5hS3eU4YrzyscsPabEpQIvv31ZUHxe0JDNr1yshgQBQBRJE/nuAJlqKw2Cm2V1z8mIzk7tVDQE1Qj7dndlLZmniesUcddg1xZ4I/MdtDh5U+dreABVrJy+nd4oeMrFiqWy+ZTHW80FkpKxYpOa7THOYvCI3/rG+y5knJd3UCa0usXfUTfifWlbhozhhobs+hJECP6HZ2U2YG9mRB4ZFaQBkT2b7XA=='}
[2025-06-04 18:50:07,212] DEBUG: Response status code: 200
[2025-06-04 18:50:07,223] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:50:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:50:07,238] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:50:07,264] INFO: Commands: []
[2025-06-04 18:50:40,973] DEBUG: Checking approval status for server 8
[2025-06-04 18:50:40,973] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'FFF+ndo6Uv9SOyQtxpGBkKGhYM/DO39lhM/94c2HsVSGvcXtNTaHF1mYMLqwfOWVO2gyBrPwRqNADeWhxGoSrVNxB1BJR1ndtdjTC19GdLTxpnhjkGaQUjdtUqxajEvi3C7foNT1B6XNTB1CHhf0valfeHrdBOD9Dh0cdYlfNrF/nvSRm3Gf0dQNX1k7hrKJL6i+xSfqDAwANgWRzJ2DUNGqO+/9ivwjXdPoUA6iqWJFjoG7SADKGQK2YFpASrxVeWi6fA4TRg+4htExw2LqV7OdvTero4PFuGnYicT5n0ZlnIgB0vU+N5C1PV+qnQAbPycAhHiogr50xjUk+PZbPg=='}
[2025-06-04 18:50:43,065] DEBUG: Response status code: 200
[2025-06-04 18:50:43,066] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:50:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:50:43,068] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:50:43,069] INFO: Server is approved and ready to process commands
[2025-06-04 18:50:43,071] INFO: Fetching commands...
[2025-06-04 18:50:43,175] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:50:43,176] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'anDeU/O3wJI5ZXMoPJYYMfnw8aO79ek9e8p+PlCLA0l8kPQZEYTFkTufyYv5FYIz+ImhdIiinSwqiROAB9nGkOdGlfldFMz9g6z0jZi1VeZLH37TueDco2cbvMjtgF2y/+s9jemPRLjmhGDxc1BGhttXRONt24Vg47ZBkYqncylhRGiSxF+x3ArKhKEp493W4gjKHn3Jv+58olYrgdxEwzVr3zclxMng7cjUdm49+rAPVpPAtAUdPafLU9mckLGUsQQw84yUOWal8t7cZsWtFfJhSvBwgbrzrtss7HHdxQZ+C2PbW4O17TChm0qpZqAd9ND9I3jvPBbLn+hb46bhFw=='}
[2025-06-04 18:50:45,381] DEBUG: Response status code: 200
[2025-06-04 18:50:45,382] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:50:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:50:45,387] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:50:45,390] INFO: Commands: []
[2025-06-04 18:51:18,352] DEBUG: Checking approval status for server 8
[2025-06-04 18:51:18,437] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'QFxFESaYS01QTImYt1IO3mQ/eNTBp/LWHKoGTXwL9g9U5nU6Cs1z3wrh0U0DMUcvfoFdgO62o0jgLVRUSxExb8a/07/nyG6uH2fDLahk3vTY68QuvuXqyBWJlpcoDih7CNTX14J/+IjB5kn7IvBYXgNzfoaS4iF2BYt+5LLnXMX8xgTsCLhav14ZzQfKawtT8lEXo0fTuPkWjJVoIUkDN/mRhsOBcqlUkUYMu7inWmhkl3mWiT2iZoM8PoNkxi0O0qQgQc4YP0SLn+xmD4tchOadzLt1axhc6whlgdEQ/jryz5fa1u4zt94Ztk54QNq1Mra0rTUa7pW4v2trE5AkdQ=='}
[2025-06-04 18:51:22,282] DEBUG: Response status code: 200
[2025-06-04 18:51:22,330] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:51:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:51:22,522] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:51:22,544] INFO: Server is approved and ready to process commands
[2025-06-04 18:51:22,545] INFO: Fetching commands...
[2025-06-04 18:51:23,398] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:51:23,408] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'EzY+l5uPcn7k6ub8qnoMjH4wkm8PzhNbX8TsJ6lGFHGc4f4uL54WEIpGRwMsHXe+QqfIjgzvVO+nKhsB9ibUC2rHOJDg4xcWMdwUMTuCmgK9y4nGyqsodBB+FMfuBRlUfy25wlwoWy12lF934yf13cD3n5A81xul5wPpNKjpKXcGBhwXkslReHCrc6xN3Rr9xBwITqoUZ/H5VAeQxKiqRfYRGKjDDZ0O6IyhwHa//c/IeYnKejx+tJARVkFCvGjdLfrpb9VFDZCxwZs3hmdQVrUJNzU7EfVx7g7Rx24zxvEYCsGW2Xey4i7/2Ai7GqIcvSQcwbqj6MIDnqhZFLAZYg=='}
[2025-06-04 18:51:25,918] DEBUG: Response status code: 200
[2025-06-04 18:51:25,919] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:51:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:51:25,921] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:51:25,926] INFO: Commands: []
[2025-06-04 18:57:38,016] DEBUG: Checking approval status for server 8
[2025-06-04 18:57:38,018] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'ChqeS0e2X946aSH7itW9Z1Rzt3gJBR23gFDpGydWSACL01LqBfMFhP0NuecUoytbKYNQy6s3HhvwRdYhEPFp5p2K/dlBo+ysoTXA3ubMGwdLCGQPCzJkxpEjDesIh3Z1LE3L8YW8TRj7JZRI7J0BECVO9Vcv0Oi8UIuvgF6PJUc1f7iadDlHFIwbqFgCmj+9rECgPUjOpnb5jrjln9XulamRvFRUdbjoqHuX6U1ZIRLodlsF5EJ9olfOmCZmqHD6x9grEkta5fwE0Mi5H1v/BzEUxIMhDniUmtwvh/lyd/9i8ZWR02y2Z4MYXXfxxpKEirjGWE6ZcKvb1hgkr1F29w=='}
[2025-06-04 18:57:40,085] DEBUG: Response status code: 200
[2025-06-04 18:57:40,086] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:57:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:57:40,087] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:57:40,088] INFO: Server is approved and ready to process commands
[2025-06-04 18:57:40,089] INFO: Fetching commands...
[2025-06-04 18:57:40,300] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:57:40,300] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Oe5FvG0S1uNxOGMXUpnAeNbJDMFIe/jm5wbi9bcKtXL41dDx+XhEsF1s4aM5uqKPHO5rg528Wpyldjypn3fHgaeOIXpalkt1Y1+21DbSoA7M1AznWag99NUTBybhpPRWwUNG+L0s0SHnzuXYZtzDZBl596CNoyLbPFCdYfWtP2hPDlvGveHMi4Mgo+vMo8YAyo+IEUm2U1Du7JvV2K/7GIGzVHuoQUaZ4ogr7toOYJsjBzVuSpk8Z+kzPP8MIYoMumBTw5JaDaKhNb4XRjboVs1zIDTQvMc3pDk/EnO6irWvroELOx+Puxb3xCAzUDp0CkVyDbPksrff4Z7Ml/GXtg=='}
[2025-06-04 18:57:42,361] DEBUG: Response status code: 200
[2025-06-04 18:57:42,362] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:57:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:57:42,363] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:57:42,365] INFO: Commands: []
[2025-06-04 18:58:14,660] DEBUG: Checking approval status for server 8
[2025-06-04 18:58:14,661] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Pz/cxpYM/Llt7x4npvJQg9NV3kezuQ/02gYRhGHoOtT1EU6++KP3GFdxK/l/bUUsKXtcpRcb0dBkOmA7Qd4kgYHvDjwtPKsxpPzRL/jYQt601dLtmHWlapFb/5/PUg9ADJo3TP49NHRmxF8GhKZbE7JG8M55Eucw+V4wcJLeF/9RdEJy/KKjAOy4QRFXgTnWHGnUqJB+EWka3jPeAI+r6e84rMuTIIX2OVq2iiTIeyxWNrwVNLr4kXGxpNQ8wBlXUmM3Ir1Xx80dFjLR0sZQSf4lXTASG4T0NonbiaFn3JxZx2P25terc/a9aItDH3z+EihaCJs32j6nbbFPaR9fDQ=='}
[2025-06-04 18:58:16,745] DEBUG: Response status code: 200
[2025-06-04 18:58:16,747] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:58:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:58:16,749] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:58:16,750] INFO: Server is approved and ready to process commands
[2025-06-04 18:58:16,752] INFO: Fetching commands...
[2025-06-04 18:58:16,857] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:58:16,858] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'mcjiw7TOmVZZeOo86dO2HB7TQ2RQz9uR0qiEaRKd1GHVM/FconITiTab5HBcBuAxjk+yi+8aVnaMDNe1Kqt8wtEHG9UqXZtyD8qoSTVZ1NZY9oNBsYtdp7HtBmH5v17SV1UbDL2u+aBo7BUafg87rwXtWtJJxoEhGiV40sglygUcYkn2si+5ws6x0RliBmCOCcGt8QQCYwdSLjwVSIdFHFTeg14XqLe/8gWrvhMjq+bpSMQ0EafPItOkstir2RA+pVgnDIVF6LStrHeC6K321G39SdHqIHhwNSd6vOkCGJpO66lUZqgM5SNoke8xGMp/HUwknW25hWWhjncGdI6lmA=='}
[2025-06-04 18:58:18,966] DEBUG: Response status code: 200
[2025-06-04 18:58:18,968] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:58:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:58:18,971] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:58:18,974] INFO: Commands: []
[2025-06-04 18:58:51,268] DEBUG: Checking approval status for server 8
[2025-06-04 18:58:51,269] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'E0/skdRAM/txTIBhf+p5zMbaJbm5rCThyntwI8QpexKlFtBNDnYXCI5Xbj8OCzMKNDnXhxU+tQa5GW2RAs9fjJa1U3/AX/4Cfw3eW82OUbYB378T/dLLdZqkchmbq7dNhYpGoFAIIRxaX/6DdOCL25+xMQCmrIbwwU0d+cny5XLW75iSCtOIfHHbSKJi9WE6gc7qSSTxBnx8oE4nAiP9rQ7i+w4Rt5qBYkpPQHahAaFevAKFU0A2Fxp2eYkGtIc3UWj4AaGkZXUHILg4WXi07/e5h3qOjunaoyij3uhQgRjMwElOm4lbHJ+3mOcJWH/DI0TTjLyWgOKdfSh63iRHSw=='}
[2025-06-04 18:58:53,416] DEBUG: Response status code: 200
[2025-06-04 18:58:53,417] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:58:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:58:53,421] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:58:53,421] INFO: Server is approved and ready to process commands
[2025-06-04 18:58:53,422] INFO: Fetching commands...
[2025-06-04 18:58:53,518] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:58:53,518] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'D4LgrqR1C9jwZWuUTFblYOcz786vRl9YqhuOCK7rJbbOF07mrs5TcxUG7qNQv4oCUV/2au8hqMduwhthyQIUWRmsZ0OmjQdjZI+4LM7lMkw5mfZyKDPmqc5DGkUHOzk9rV4+AERBlT/l7IIiIgmwpFaAtYoXdPb7me/A2RY0gU8TP2Tv3dOirsQIjBASxIw3Pj8Yxl7smbZNGUUqo4YF7fjWKpQvGAn8NX1TfrWMEN1QpKVjY4Pcllo2mO2ota8DJVSOVRJBtSd2zdJpDaaW3Faf356ECxfaRZSq2XIDtvgUbCF/Zuz6JJJYWYRdqkk9q40GrmkeXucStfDxMnZ8Yg=='}
[2025-06-04 18:58:55,611] DEBUG: Response status code: 200
[2025-06-04 18:58:55,612] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:58:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:58:55,621] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:58:55,624] INFO: Commands: []
[2025-06-04 18:59:27,905] DEBUG: Checking approval status for server 8
[2025-06-04 18:59:27,907] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'c4LGOXzw8tkV0+OLlikya2HLdzGwpV4LErEyS87ne3yToku683y02OfcF3cXrGhRPJoMbms9nwtYckl4U4wVK1r+er5YpjA/e8D/qqNu9whU/bm7ISOuacEj9zqriok/Ymit4Dn9KyUTZf1mzANNzEAWUlDlqJjx5WZoJyDcvlqNZBKFgHU0fY00SzO7343xX+tg8WXa2OsLbJjb/yptBxuSA15+5ATn/Z29D18BdN91TXec059rGvwRgQRpbgUnchv6DrkoJHIyuih3Zlb9ibHjdKh308Dv7c7j1BfOMN21svrRscyu/rtL07FQciq+5NJ/o5AvA7kEBnkhDpUURw=='}
[2025-06-04 18:59:30,005] DEBUG: Response status code: 200
[2025-06-04 18:59:30,014] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:59:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 18:59:30,019] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 18:59:30,019] INFO: Server is approved and ready to process commands
[2025-06-04 18:59:30,019] INFO: Fetching commands...
[2025-06-04 18:59:30,132] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 18:59:30,138] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'MM88bqAMEou6rHyKq+4yt7nwdMsBEMnkD2W75OtRARH8bj8Vn6rFYVxRJtpEBwd0k8L3qvqpW2knrUyQyGaeO/Zvdhr5lp3dAvUDLLrDXwxZihYe03lNDh44tlKCLzHujM1KKBPbPUWn0ZFk/vlPdsalp6+660/T+lNA9uHLsFTVJBCZ5nf3q+P0uy0ry/fLydr+xFWPVCfHHKDpGg+sxK3lQDJXEvT1Fm01omhUHERZjUsNYEbpHDII2qDE3Mnfanl3/gN5oHdCIzaIKO4zP7zQ8jbFdS7UjBGDHsyUpfX9TUfwhwtb22xTFGYoa0vmCrrJh3iHdFFD0ZbXeC8uhw=='}
[2025-06-04 18:59:32,295] DEBUG: Response status code: 200
[2025-06-04 18:59:32,308] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 15:59:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 18:59:32,361] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 18:59:32,370] INFO: Commands: []
[2025-06-04 19:00:04,629] DEBUG: Checking approval status for server 8
[2025-06-04 19:00:04,630] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Z81XnLGKAoaea/wUZJPzJ1mLhtzTBrpxMqKRnULVLFeYllWOTpFrWtO/po6kEruBDV2bKjlRmdiGlc3voBLJz+0Cf72TnC0X1b+rVAbUkS15R1AO2H8OWKiDZ9i9c5rzo/yFjEKWG8EDYAv1aVUplBfwiwv7wjWB41cu9Rhrvbjb7J0lh7nxYlrks3ZyiZM3zGuvsekECmcMBj7UTTLVjHWnukiHCsn0kjP7Z0cTtLKpCewLtnvA3fq2+UEeBlMkaB2lA954MYSmWMYvtVmER0cvLDpG93EXqgAuT0WF5hLh686VIeK8IZhdPrqehl5WoaDGXG4YAAzfo30niF7Dpw=='}
[2025-06-04 19:00:06,744] DEBUG: Response status code: 200
[2025-06-04 19:00:06,746] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:00:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:00:06,747] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:00:06,749] INFO: Server is approved and ready to process commands
[2025-06-04 19:00:06,751] INFO: Fetching commands...
[2025-06-04 19:00:06,845] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:00:06,846] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'K3isEPriQIrUNak2lgBey2sxqlnV9fTz3+taxjPNCSfjedv/2hv2ji7ENzeYku04J5zavWbDZxLvlhUPe3jMc+xDzj9bzaJWPWn01x13tKYFD51fD3Jig3RFJV7+mHUWhcEBy93DuJvgRpAJrRsU0LgMY/Hi/vTD//GWXMgJpEOxTjuOJebThWFFOeDLuR2YXAM8oAZzQWzSExc9NVROhS+7bcoFNDCgOHuIQNdKlUyW2e6MQ5wGX/L6jGj9234lXj6baYyYjNCGOGjrYN2ujg+bqSbi8bni5q36vvm16tncVcyOR47aA7PMkr2wHTzgmQomAmbhxMGelb4Z9WFnbA=='}
[2025-06-04 19:00:08,974] DEBUG: Response status code: 200
[2025-06-04 19:00:08,974] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:00:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:00:08,981] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:00:08,983] INFO: Commands: []
[2025-06-04 19:00:41,795] DEBUG: Checking approval status for server 8
[2025-06-04 19:00:41,800] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'gvxO9nmHCjXZmG0Hz1qCyz2zVhzBB1VaGiVzjNaAkhCbi0DhwaCd6FBNN/HBi9uClHBwlKB3re0IrTamxhGD3U/WoK2Yn2fMO2PzftsR+pNINLlH3NIZFPsAL0M4MBTXhX9xGElFgIE3258cQIiq21/4Bpm9l0ARgweWFs0u0wobSU2I3xJqkj/hjx0qoWDTCL6+j3QUM1p9UD5DTerxtobP3fqcYtt4xRMISuwPYFsU+XhsL0M7pazKFxX3LNxtAPJz0Mi63IqP4rvjuv4huSbm1Xt1DuY3M1Wy10o6dK826C5VkIh92YIlgtKnJG7RsQCBxZnO3k44nXoGheBk1w=='}
[2025-06-04 19:00:44,065] DEBUG: Response status code: 200
[2025-06-04 19:00:44,066] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:00:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:00:44,067] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:00:44,067] INFO: Server is approved and ready to process commands
[2025-06-04 19:00:44,068] INFO: Fetching commands...
[2025-06-04 19:00:44,414] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:00:44,417] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'ekfuMxRIUs6EIpsLP4Kx78L3yu46An/AN4TRDEYX1mn23+FRqd42JhB1MA9dxrVSeGeinzZyOiFWUxroAFW26MSPehF61/SdW0/JUVPE8XUz5w9HgdS3+GkEEG/zON1sTkYQbshzbbR66lSyhrGUSBDdjAgXiPoA7cFqh0AAzgYZGCxEt8P71EBnK6MSQwRb1MwiAfpgXR3W22LSnjO98E9doKPnYkbUx0AhsCVyHPbtYm0igxyYQ3JkcVxVLa3AqWY1j9VFPG15op+dfWl7t6F/7RyTiWMqQBcjmT2MeSfgcrmabDbP2A1G8j2U7XSYPenQ20OXa79O5VvhXKkI8g=='}
[2025-06-04 19:00:46,504] DEBUG: Response status code: 200
[2025-06-04 19:00:46,506] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:00:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:00:46,509] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:00:46,515] INFO: Commands: []
[2025-06-04 19:01:18,901] DEBUG: Checking approval status for server 8
[2025-06-04 19:01:18,903] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'EKW3ODFEmhc+VD/P3T7VoYYgtmISQu0e07f/82USJC2ylxkTmxHmDftS1gPdMkxC/+b4MeDXW8dppT0PFUmlvQRubBR26Oa9t/AsoNZ42KPnyAofn/4Ky01DPMtTipZShEjO/G6EIbgxcUheXbZlltlaa2zpVZQpXgyy+QZ0rC7noZdVEktIkyBvUsCqT2STLE5J5F3E5BGSd9kx7dPTIoFSxU+kxtCtlMxEHBKPJHuNcSRYRClTCJJQabVVZ07syKFVf6LKa487RDmk/Siuad98mbPEbdZpCTM23x9mMa11gMLOk+OIMwO8nluY7r4mt6sfgA8VlCDWc47kA5fjUA=='}
[2025-06-04 19:01:20,954] DEBUG: Response status code: 200
[2025-06-04 19:01:20,954] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:01:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:01:20,958] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:01:20,959] INFO: Server is approved and ready to process commands
[2025-06-04 19:01:20,965] INFO: Fetching commands...
[2025-06-04 19:01:21,065] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:01:21,067] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'UnSkxM0qXDgri/VWvS3RdvTHk4xEtZxbh+V+KbIAYAW5cCKBods4vMjZn++8Nel5RRVsXOjLuGZjmJNo7gm0C1FyeV0qD9Xa/8u+9ZQ+/tkoWUP0KDgFAMqxE3lIgzSf/2gvRiCPCbR4de8AwTGSwMGwMZmGg8BqbPF0Kp4oXkfO0ErcoMhRFBuocYov/wa4bRBYfFt/ZMr1MUFECzxr2jlBCB4QumHIa5LDx3Ld2iZdAksyiZ63v8/zcxRpzzcNRFC37VbDkO/Tr61WltVKpJWGbirs3s/GWW+CmnQmZxQu0IiUOQCQ/rM6RizPltI0eUEIIBSTWZz2tRZfNHmWsg=='}
[2025-06-04 19:01:23,340] DEBUG: Response status code: 200
[2025-06-04 19:01:23,344] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:01:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:01:23,355] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:01:23,363] INFO: Commands: []
[2025-06-04 19:01:57,264] DEBUG: Checking approval status for server 8
[2025-06-04 19:01:57,282] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'PjLGQV2OH8V86lg7aSMrbPPtmEu3xqxxo79rR3gKR0HuBkilc5et7zfnKuMby7B+FoxqvvJ2QmIpNpm5hbp2e00q5mY64wPipDVlYWxCSeY6SLyDEIOzVXmp1/w18ZMSykRUo35c8Zn0CCbWwtm7I3ZLTyXsf/P3ht7MXRNN9+iECBsv3ql4MjWb7m167r6NYU16Mx4ZH7SV6CWCq0GSg3Exqog/cyt+vUF6cgs+DFskAxuaCrvYz0kD8cxCfUBdZP0O9AykJOU/vMj3S/SirrmS+dWN7isaMefGd8M6CQJLtDAOKPptGuzLv8xMQ4RWJvkxInuJ7B7L7grxdlf+kg=='}
[2025-06-04 19:01:59,419] DEBUG: Response status code: 200
[2025-06-04 19:01:59,434] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:01:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:01:59,439] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:01:59,522] INFO: Server is approved and ready to process commands
[2025-06-04 19:01:59,526] INFO: Fetching commands...
[2025-06-04 19:01:59,728] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:01:59,731] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Mn8Q17PVwA4GE3HCwfW6gdUio1ZKcFgVuCI4pbONirOuooQ+WeVuPrzbKUFO9xLXzHvM/XSXK33zuhH/LhpRfCiPa3AWJN99Jf8p7piTMB0NBW8KVzT0fDR3FJHU4GnjlNy5BQ3KTNk6O2OzOspvNneIICzgy2yD2CB1DSXY88UrXOnbwr1BfcK7s43RBsgHOjEEdoZc5gd33zP2Q1s40Qdfgqb1v1hWsmc/XE9ryPM5vM+TlkQDX5SAnFYEqMC/L0VUM8xNFKorqAI/Vci0ybS2hEcg68+aW7bfxiWG45rVn/NCDLRdi1yR83IavU7e2vG0BdBgT4U2P7JCLvjy7Q=='}
[2025-06-04 19:02:02,049] DEBUG: Response status code: 200
[2025-06-04 19:02:02,052] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:02:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:02:02,061] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:02:02,121] INFO: Commands: []
[2025-06-04 19:02:34,558] DEBUG: Checking approval status for server 8
[2025-06-04 19:02:34,558] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'KAIVI5zyaIuX/k2Cen+cQHdr/DNZOZsR+WXfbwxuwaFUhmMHK2IUWXUAV6ZA0dLBKDKkrZB5KrZy2AM06+jHV4Ev3KFgQUZBjACo63QQkoTEdST0b56cDPRot00F0G5VQt9pF+4AiB4Jl6OtMkJl4ICvMlZN/C/Xpg6ZuMkK7EbdO0YbzSwZkyLpDhNgQf/tzxUWkL9rP/mfjPsUH1lf9B29Wn67OSfDwY9En0U61t4gcbAze+ubAsXfGpPlk3xMTJWQ5hiCm7+mULWPo86H+kGZUNcDvvEHJgF5xLSsH3rhwnmEv0BUV6ERO4XW6aJenouOJphVOpu3GMI9APCFbQ=='}
[2025-06-04 19:02:36,651] DEBUG: Response status code: 200
[2025-06-04 19:02:36,651] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:02:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:02:36,654] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:02:36,655] INFO: Server is approved and ready to process commands
[2025-06-04 19:02:36,656] INFO: Fetching commands...
[2025-06-04 19:02:36,755] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:02:36,755] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'SpSUef9mri1tTvZ+LNLZ8ly+35qei43QHvsoGWsvGlr26D4swTSPSog7unAav3HbOBb8oKwsCS2ZQ38+q+hgWUiOY0ZIAW2b5Iu5SalOwNZY9bfO25MHIr95jxf9kcz/23E3eYbbM0PftwuZauZwL5o1fPhUM7MYPEjLrUspaGvDOBuLONy7FFsm7Am1wiHMVUsUTtDM8dtvIkn5/rKlstMXCaEpv8Q/INlTg9n9s+VqFsbTUQTTJ/Q1IYH7c/nvP5dwWTS7xJ1vpzlDUIxaCE01i0vWOWdtx4+N/E+77gTis4jQnY53dMlQQ5pzpteQGBlok+BteDOH5iB53TFM0Q=='}
[2025-06-04 19:02:38,821] DEBUG: Response status code: 200
[2025-06-04 19:02:38,821] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:02:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:02:38,824] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:02:38,825] INFO: Commands: []
[2025-06-04 19:03:11,288] DEBUG: Checking approval status for server 8
[2025-06-04 19:03:11,289] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'Y/2Pb7xuRMXGlovXqJKjct8KFImmuyQ9eUQVnaRx7oTPHF5v9zO5VEsL5qwCVvnQq95qqc41Jqex3k1Cg88bWUqDHPx/9ep0SafyW4jqjae1PrEfSqNtbgVCXjdg24W2pPpjy+IrsULgf0LWHWXwnn2vq4MsbXJCCycTAXV+6wjyt4Pm1LZ68NpvlF43Q+VAxTwdUZgOwl4dl9gPdQUq36BPE98zjWmoi6qbT2+4XEsCoYOhKTluusNlN7YtS9gzLVO7kNUHdKaFsccpfq+lZTdd9SXpkUq9L4mjN578F+YJMWLm8cqv5vyqS/99zwwBXGbOas4bu4en13A+JM3HBw=='}
[2025-06-04 19:03:13,342] DEBUG: Response status code: 200
[2025-06-04 19:03:13,360] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:03:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:03:13,372] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:03:13,372] INFO: Server is approved and ready to process commands
[2025-06-04 19:03:13,408] INFO: Fetching commands...
[2025-06-04 19:03:13,525] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:03:13,525] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'ZFYAt3X5NPq8pbRU2LZ0BYf3cwpekM7E3YhCrg5j5Q1SoK4yL+KzfFIErojfepv5VQKzan6w49kwx1DVGX9sEjwmDrC3Ai94XROvfJbe0N/5LgRaQnRCJtroq6WlTg8eNwc5W7dFRlQeFmQ5sy9TBV8s9y0uNo6oesMYrKt4Diacm5gqF5RCenQm3iq9Ql58zXg7HWYDD/4/YBaArqQFxSWBs9eVLeelCP2tWLtPUYZTTuz6RKi6mL2jmemFla6bYWBqjxa/2oc57XFo3uiM/q9y8pENYbMIwUcHTExs7razOW9+Ht+9Vzm6Pb8dVQIUQuIE3Eiqnz2ab4Hlm/1PXQ=='}
[2025-06-04 19:03:15,634] DEBUG: Response status code: 200
[2025-06-04 19:03:15,637] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:03:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:03:15,641] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:03:15,645] INFO: Commands: []
[2025-06-04 19:03:48,222] DEBUG: Checking approval status for server 8
[2025-06-04 19:03:48,223] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'mzxQGvyHEmfuHkcI8D5kdDwM0vUDtroAWXljUe4vLFmGAIXlMQjwrYGV0XfDnlcc9yxotP3wXw/YXNGkisEW1/fzs7A6+p438g/HgaZy/ge843Q1VpwR40UJevqnwufd+a1fx48wl3/tITjkfkUlMIJttb2WvA62neF1EpKmz9a+3sTu6sqMBx7+alxNqXGaTgc/OE4bp2kn1E7BqO6CyHjFiwKDO9f0vwOYqwKLPNuYKAGd/kKeTn8XG3Qodf1l8+0VuRILt0NcZlHBWpJZ25X80jzJRb7/vKjo161rXPTOb2RfY/cAR5bwYAj/7HwXjyKpxIIBFCEjp6fyDxaZHQ=='}
[2025-06-04 19:03:50,294] DEBUG: Response status code: 200
[2025-06-04 19:03:50,296] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:03:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:03:50,298] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:03:50,300] INFO: Server is approved and ready to process commands
[2025-06-04 19:03:50,461] INFO: Fetching commands...
[2025-06-04 19:03:50,759] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:03:50,760] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'eA7NmUtMvniBWFZ7GmOhEQEpa4KPlckW20ya5gEGVt5qMm4EktHEDBn8BSOtrnrCPg/UneBdcMg0GmUBH3W3WmO9bE9gzKSJUZc8E+9GMbj7hiz45vIRRnW/jwEbJVFypdCvM45K7hl4HiW51q9/ddF4EHTrweHzaO/mFBKaC6iVbaP/lL/iGNjCG+1ml9GAy3AribZwcUVfOzTHOp0Ou99oWeyyEiCRdrUkSYSXlTSW+4I10T8y1+3R3xwaHPNxRh7C+588juOxo2LpEPsWN3djWLIO75kb/vQHCJjhDWsUVQ8U/F6k68kaFD86tMVv0PRbTHamSfMXydAP8AKvHw=='}
[2025-06-04 19:03:53,234] DEBUG: Response status code: 200
[2025-06-04 19:03:53,235] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:03:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:03:53,236] DEBUG: Response data: {
  "commands": [],
  "interval": 30
}
[2025-06-04 19:03:53,241] INFO: Commands: []
[2025-06-04 19:04:28,053] DEBUG: Checking approval status for server 8
[2025-06-04 19:04:28,062] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'SombyDRQqI3rBABBbLOW3QOR5FnfLEZinN8BDVA7jkqF3+6B293C0UL++W5V4W59DxcrACE/kJMtnVADfb4QBAYDcj1NXHP7KMmkjlyNTawxNxkENt4SEjC3CWHMvatUW6bH9Id1njKLQZlPcRwF01cGJ1iRcMNcF0nmAsgJCrcwpGu3D4C/BiG1/XAaaziBPd87g/EjnxC6vKpNyfhfRTx4qJInW2r8eaigvbCAxr83UZwG0D4P4aBEdgstl3ZLH35S2fDo3LRsLz4s7ObspPOTDZI9sxQz0/TqmPsK+3EbmpabdsgqsEZmcH63Ztn2L13FgoLejnJ7PX9MKjXfvw=='}
[2025-06-04 19:04:30,385] DEBUG: Response status code: 200
[2025-06-04 19:04:30,385] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:04:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:04:30,386] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:04:30,386] INFO: Server is approved and ready to process commands
[2025-06-04 19:04:30,388] INFO: Fetching commands...
[2025-06-04 19:04:30,602] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:04:30,612] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'CVYLeH18mnflP7MaIAGFwI+ImzZJzSuyXGtu5r/YnCixTj7YDx0gJqmCgwLxN8LlT9dX05nkr3V017KsMuGTO2QYMyu33OANkum00cCogOTCrwQdCsX2RiAyqFdvqzRUskCboJBnldEfCXLX/4snOqBU7g/BqZMr/ruVnfd9qSwR1nQmVQN4eSVKNYEMzwPhXH5pPYKxK4YTIAJYo1ZyLke03j7ighGVmjdR0MqKGhnNP2mLiNa1YB1hrMeyGP6Yc95/AGmW3AvTC0VnctTgc9DKHkoovrSMkzx01SrVz5qdYufpTlwQ7RX6P/J/DucpaYoo6vfL2RaA7YtkbVD7SQ=='}
[2025-06-04 19:04:32,679] DEBUG: Response status code: 200
[2025-06-04 19:04:32,681] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:04:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:04:32,681] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:04:32,683] INFO: Commands: []
[2025-06-04 19:04:54,943] DEBUG: Checking approval status for server 8
[2025-06-04 19:04:54,943] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'dj4QcWPmIAMcaf5cPDWkDcu8XWacAWyrh1S/2jn/xW6k0K0Z1+8ToudXY5Lu/+cozPOKRQSplTqLKYO744vIpO/a21ffeLimo4wMQtl9JzmBiNCQN/ug0y9pYp+cYZrZrq+uwcnYf+DASXTNTkezLGJbywpT17NBgnzEsos+Cg8a2bhg0BWitV+BTGXyCiK8sXcD8qdUMHJXIr2LOYiLiFtBqQzuoMh3wL/NuZj6IovNWBD07wOyRaRkGCvBy1xIS2grWcz5aJCEcNSr0B2CXnY47XN2YAL0lXvOvDHu95Llt+zbCUwURt++a+7H58ep8L/O6YylKmZ5NaNtEKbk0A=='}
[2025-06-04 19:04:56,999] DEBUG: Response status code: 200
[2025-06-04 19:04:56,999] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:04:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:04:57,000] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:04:57,000] INFO: Server is approved and ready to process commands
[2025-06-04 19:04:57,000] INFO: Fetching commands...
[2025-06-04 19:04:57,095] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:04:57,096] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'ORJ3r/stEnZSKzxV+g2xqaVwMU2h6cXWWPnww7vWasC14BtFLwau73+sReQlsL5l6VIqa6KfQOO5F+bKJGn5OH1VlYuIeKC8LMzEfVCMIeIOXg/S77lIUIwgCMGDbrW9rEKPWdipgc0xHiOy/yatr7/2JTwXm32tveXisa60wo3lLAlAOAN1a1SsG7iu+9rhvBTO7K9xfyAvRoIiVe07hw6WQgXwdTRLtES5O2NCDTMUYLB6TqrQqTZp3Fu0EYIl/nw8r+aEyHDGuopnVy3eZePP8uBL7Saalm17MZVPvhiT84HKRngxdk+Lr9RPJKtHD9RGm1I1Xo9fnytuWj3mSQ=='}
[2025-06-04 19:04:59,179] DEBUG: Response status code: 200
[2025-06-04 19:04:59,180] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:04:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:04:59,180] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:04:59,184] INFO: Commands: []
[2025-06-04 19:05:21,650] DEBUG: Checking approval status for server 8
[2025-06-04 19:05:21,651] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'X/f3gBy00BtK8pP0JA4znYvIKzb2pZsvadrs44DNVL0pv8Y/HdzWKjABiR2D7Yr3cRTw+nuqWMF85f7tQwO7ee8rNh0eN/pROT0VMQC0WoFtHlT47k0J4h/frC+xSMWS63gyjiSi/MvnGgAB2l/llTlKBn+iR7MjRmPZkgmabBY1P6U48m3/iFsLthT4KqmDtRdam0+Xsef15Ng6SzrK+ZBqzkTQAB8hv/BO5jRSwR3gLpFjG7W5fQhyGH0y3kUqIeyVc9K7lFnfRUkGHuVqxMdpGs5lqKWhKEKL9N7h4t3Ds4T14xNU5KBA6Jq5d9fsMl8Yu7A+hmJ8i+kWel238Q=='}
[2025-06-04 19:05:23,707] DEBUG: Response status code: 200
[2025-06-04 19:05:23,708] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:05:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:05:23,709] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:05:23,710] INFO: Server is approved and ready to process commands
[2025-06-04 19:05:23,710] INFO: Fetching commands...
[2025-06-04 19:05:23,811] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:05:23,815] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'i0Nqe3MLGuGOXT47v4zBuI3hVp6Tx8odQSlwJe/nSdjRS/XM2laJe5Ia/+nRh6HPcWnTC+rICqkSZGoCE84hzH9F1sSyutfCPf7dPCe8Euj/1dgx0OEsnrJCCSm3zZp8NVHLk80cJ+WUeRf/kL4Qq71jUPEet5MfGdhnzs0q7g4CEFHEDlQKaWjyzElVFuyZPWgk848OiYhdvEJ6dlKJ2Q70ecV4LrqhWuVGHOZvwJ+Vm3JSC9beRSEpdb4K3mBk8OOl4onRPN6ywG0ef85eCOUrsE/MrzY42+BGTxdd3IMNgkD8de65yUSfsZCgfPgTFORhkDpyt4yuCWxHjtkVhg=='}
[2025-06-04 19:05:25,915] DEBUG: Response status code: 200
[2025-06-04 19:05:25,915] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:05:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:05:25,917] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:05:25,918] INFO: Commands: []
[2025-06-04 19:05:48,361] DEBUG: Checking approval status for server 8
[2025-06-04 19:05:48,361] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'jfEnxLeCZHcQgYWuZLUXNmVtddGbjjruB/YUyu1QCGRdZPaf+R+Aj2i9vusCD8m+QVIWpVOYzfcysGE3DxPpol53BbCdQjXUXpg6xpYIkeeXYzrRei/IjXTmFUnCMedzUCWceNClasiblR26raMKN4Sd32xh4X+a5OLYBIRi93hl63gcX+YEdtqxaubsnFcEveG2T8w1k3HQYgOPA4M9N3By9RlelxG2HtSJismU8CyQp78Lzn2cDaLOjVOfpdYKgwiEmzLlCRQDOiPnQECI+uIsCDDxmbYpGKkSSqDPKk/WoGIkoRCpbnB1YI/uruJe0fvxooab5AN7xMbcpOmx6Q=='}
[2025-06-04 19:05:50,450] DEBUG: Response status code: 200
[2025-06-04 19:05:50,453] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:05:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:05:50,455] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:05:50,456] INFO: Server is approved and ready to process commands
[2025-06-04 19:05:50,457] INFO: Fetching commands...
[2025-06-04 19:05:50,549] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:05:50,549] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'h9xKW4472wwVZQRH30AMCDCVnJXI/aGhS4SxMV8dOVcpN8EP5P2jh6yljRkf+KS5b+hSZiTezbT/d9stE7R9PfWMRq65/fzBePrp29kITc7B7ZEELAT6YL0ylv21MTfx7adRbkzQVMovqQAwhm4hM8LhYtk8RVce+n1rlJzFJZbWlllPvrgXaNTl5sTk1Ji7vzI8tPMmW1b8XRZBShj002FjnF9TxX4vr9sUu0VObhLSje3KhSoD+ATeXiQKMzLJrlcPsXZYCCzB0IYiTIISXheKXf4UpvyrEppOSYFj00vKXnSGDdvG8QsbZsp9aJTgSivvB3xPHBwtPA1ToulvjA=='}
[2025-06-04 19:05:52,635] DEBUG: Response status code: 200
[2025-06-04 19:05:52,640] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:05:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:05:52,642] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:05:52,644] INFO: Commands: []
[2025-06-04 19:06:14,949] DEBUG: Checking approval status for server 8
[2025-06-04 19:06:14,949] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'A3kgzfz/S+4Ey4K5a4gvaWrkbajvee/joiGqKS8bWhEx5I1qW65ZmNgLmVnY2mQQKUHNvUxyo7Y1vFdRKWwuELmIBQPTkELQL7BEcMJ7V3+afsMwUeoDC8iYh+PltuNyI7H4bDucmwm79Fz9VhdhgM8vr5LzifXWVc2j58nEvZgKu3A0UZDU7JlCbUlCyG3eBaNabzCkT7UbDlGVDxMuFXBC3kpm+t/QA01dV51hJCLffiL98O8ztAJOQ5mu+WmFPrspNVaWIHba4uNFsJeKc54PUV9mNYsp1qM6pQW+xApUGenql+37oItse763PkZyiIywoAvxHM8WNhPtNNyBPA=='}
[2025-06-04 19:06:17,069] DEBUG: Response status code: 200
[2025-06-04 19:06:17,069] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:06:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:06:17,075] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:06:17,076] INFO: Server is approved and ready to process commands
[2025-06-04 19:06:17,079] INFO: Fetching commands...
[2025-06-04 19:06:17,271] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:06:17,271] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'LBMqRQ4GI6sJ9dwWDBFqIje7Csy2LlPGEV7h0jGqSDPpsfchnnZxH7KRkinvDGkwNHsNW1Q0CrXmtgeNDXyXTEDeaFJUndeXjXe56+A2YA3oA2CBoajDu9kgNBaAEQLlPI2TVjgKziP69wg6T+vpvBG5+AkCKHKSuwAd9s0sRuC3Vg8XqzdwrEPjcQ6h1O4ZDazpTcy6FTI6yd+o6g6VOGBmS8Wd59XSDG+IXqB/QuRUxUw08Bib1lzoWSbMXvsBp1/bT5Kztoiozut3vN7ieTU9GL3B3GsYv0bvVdzLiBnuvltXEMfpoDnW6p7853ngR+64hbes1n2ko3SDLU90gg=='}
[2025-06-04 19:06:19,335] DEBUG: Response status code: 200
[2025-06-04 19:06:19,335] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:06:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:06:19,336] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:06:19,338] INFO: Commands: []
[2025-06-04 19:06:41,668] DEBUG: Checking approval status for server 8
[2025-06-04 19:06:41,669] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'iLhrHkjKukDr7HmTFfkOgWcyhN01DTMUUDwQd6G8rY2le2sTIRIfPMFD5ANhcG9bUkkFSWhlmP3J1mi4TPDimUaP6dfeHaRN1wxlViaF3EL82wIdH9XAf4p/qKuzsmE89f5K/rH7zej3+TQYXpVMYehP4OibZryje1etsYOrRVmZGW6p/HmULYUrmVm/mOqEYNLoITuhHlyQhFNvG53N86usR2Ojo9Gyf0UuXLHXuPmaIhGJ6dlEGzKDb06YOYB3HneyLMmv5mpisZi/cONAltUnY5nb/cxxe+JBpbtwpqXBn2OkJQkoV5WlWwrjDj9QLJBeVshUhuQtKkuKRkVOEg=='}
[2025-06-04 19:06:43,710] DEBUG: Response status code: 200
[2025-06-04 19:06:43,711] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:06:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:06:43,713] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:06:43,713] INFO: Server is approved and ready to process commands
[2025-06-04 19:06:43,722] INFO: Fetching commands...
[2025-06-04 19:06:43,817] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:06:43,818] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'TilxXHhILGx0Qa1wWsfmxz40m4NhaVymcMBQJBEgw3hMFs5iUo7xyF46srZtmMfk/mbVhqac+FHMYclxXnJGNQ3yf7AE+vCY85n+5j0ozBVGh9Ere+B4FGAdFkYpAPx0ptbJN3v0XEs8e8o0jATAI82nSlV9CdZbATnt26NasKhX6yNVOlM/zrD4UThjl2CXn/LDE7pHL68zw8sOmNdjMM//Rysb7Jr2hx126V/Jm7bGrou63d5No385OaENCfTlQx5kNtDCz2qz0KQ16/r6bsmRjJB4nu1wfri4V7ixOpMLFZSgIg2xSlsxAxUEOw1YafQsuo7iaMeh9pvEJ7LIMA=='}
[2025-06-04 19:06:45,944] DEBUG: Response status code: 200
[2025-06-04 19:06:45,946] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:06:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:06:45,949] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:06:45,961] INFO: Commands: []
[2025-06-04 19:07:08,230] DEBUG: Checking approval status for server 8
[2025-06-04 19:07:08,230] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'S0lGf5ncYQwO4uVs0mrcZu4ZO2fLuo2Ch4i/XzaqzVL62opdhPclOgxmCcA02i1VYBZw6GdmzuOB0zbgbbQfxuQCkXNab10zqD32Ghl+sD4w9t3iVF1Y90jNBrQ+O/oy7WyBZkhxGVkBurbBFJaDBrSWJINXneXCaF4GcTl5T1nDwBnOQp7LPBhrWh+Jsn2oFkcLEUsZuL9LFA+Rtq85nbd31GHR9L7uIE2dffTtXecYtC5MtV6ZJJw2zufYqWOnpLO4NNPU8gecs3biULBG7pRNSOtVoy0fLCHtS/zE6NhZYAo8otF93RHIG2b8xCW/GAF4wtna3yNVpkeMLXFKag=='}
[2025-06-04 19:07:10,315] DEBUG: Response status code: 200
[2025-06-04 19:07:10,316] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:07:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:07:10,320] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 8
}

[2025-06-04 19:07:10,321] INFO: Server is approved and ready to process commands
[2025-06-04 19:07:10,322] INFO: Fetching commands...
[2025-06-04 19:07:10,413] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/8
[2025-06-04 19:07:10,413] DEBUG: Request headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'HGJ22FYgIkbjw9zVnWT3kgCCXLKU5twmzg6tkFR3eRd+c6MFBkuYQh0reENRGY625svWgGGrCirDdEuwSV9h8JEdI6hFmPIteYtbccLXCLyTN2solD6UDdzJvlNjBREAeP9wQzKLWXcBZD/DInwT++/T2RixwN+rhbm68mx1JtYzOyuRPJ8Hm0UAxk+AVOjenwXunroV1Dbf4UAhtzCOInUnlK3zE/kJP1hyAp6nDeVwhlarzfzY1BvMdJUQbg+pCJu2GWUlZGj5iXGZjQxSZxC9Wqi9jZiIK8cBG8Mldh1ZzA4xAgNsNWyOrRlGa0ByYiv6y7fTW1z4copNJZRDLw=='}
[2025-06-04 19:07:12,454] DEBUG: Response status code: 200
[2025-06-04 19:07:12,455] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:07:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:07:12,456] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:07:12,460] INFO: Commands: []
[2025-06-04 19:07:34,731] DEBUG: Checking approval status for server 8
[2025-06-04 19:07:34,731] DEBUG: Using headers: {'Authorization': 'Bearer 9af0b81a88e040d482cc1a1d19f547cb', 'X-Signature': 'OQm0U3rmx0EcnWxab2bhJ+wsX5g+TcRjawhW6z0T4upi2UPuCqReJvoblBrzpRffcWW/eCbd0IApBrKw0I0TIue+9u7/RdZngkBWObgC9k1MaxiEzYT9T2oVlIyVpUtrGG27alo1wCnborLwzP8Vrp64R59sTZaOVrNmGV8J2JRD7jLjV/hvES0aFQ83PTk3+mgz1BAhaxKNvacMxYQ6RRdFQe3E7lXa7VmKlQHQkwYPTuVHB56iX42JPA+mhm/Wg2JvaU3eqdlBvyPqC7gyfVvymCgn9sF0gfD/gZiQ07z4blwHmIwQdW0dqsQ2p5EcSlNILX3dFNQPq++q9QG8xQ=='}
[2025-06-04 19:07:36,977] DEBUG: Response status code: 401
[2025-06-04 19:07:36,984] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:07:36 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '113', 'Connection': 'close'}
[2025-06-04 19:07:36,987] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>401 Unauthorized</title>
<h1>Unauthorized</h1>
<p>Invalid client token</p>

[2025-06-04 19:07:36,991] ERROR: Authentication failed. Please re-register the client.
[2025-06-04 19:07:37,006] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 19:08:39,238] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:08:39,238] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:08:41,295] DEBUG: Response status code: 404
[2025-06-04 19:08:41,297] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:08:41 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:08:41,304] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:08:41,305] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:08:41,306] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:09:14,080] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:09:14,081] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:09:16,121] DEBUG: Response status code: 404
[2025-06-04 19:09:16,121] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:09:16 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:09:16,123] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:09:16,123] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:09:16,125] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:09:46,135] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:09:46,137] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:09:48,274] DEBUG: Response status code: 404
[2025-06-04 19:09:48,279] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:09:48 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:09:48,282] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:09:48,286] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:09:48,287] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:10:18,330] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:10:18,331] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:10:20,397] DEBUG: Response status code: 404
[2025-06-04 19:10:20,398] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:10:20 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:10:20,401] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:10:20,401] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:10:20,403] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:10:50,419] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:10:50,423] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:10:52,488] DEBUG: Response status code: 404
[2025-06-04 19:10:52,489] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:10:52 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:10:52,498] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:10:52,499] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:10:52,502] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:11:22,520] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:11:22,522] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:11:24,588] DEBUG: Response status code: 404
[2025-06-04 19:11:24,589] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:11:24 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:11:24,590] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:11:24,590] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:11:24,591] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:11:54,599] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:11:54,602] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:11:56,662] DEBUG: Response status code: 404
[2025-06-04 19:11:56,662] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:11:56 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:11:56,665] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:11:56,666] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:11:56,667] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:12:26,673] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:12:26,674] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:12:28,716] DEBUG: Response status code: 404
[2025-06-04 19:12:28,717] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:12:28 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:12:28,721] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:12:28,724] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:12:28,725] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:12:58,731] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:12:58,732] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:13:01,124] DEBUG: Response status code: 404
[2025-06-04 19:13:01,159] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:13:01 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:13:01,177] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:13:01,178] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:13:01,311] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:13:31,319] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:13:31,321] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": null,
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": false
}
[2025-06-04 19:13:33,407] DEBUG: Response status code: 404
[2025-06-04 19:13:33,413] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:13:33 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:13:33,414] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:13:33,427] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:13:33,428] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:14:05,627] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:14:05,638] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:14:07,909] DEBUG: Response status code: 404
[2025-06-04 19:14:07,910] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:14:07 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:14:07,916] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:14:07,993] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:14:08,010] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:14:41,821] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:14:41,822] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:14:43,867] DEBUG: Response status code: 404
[2025-06-04 19:14:43,867] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:14:43 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:14:43,868] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:14:43,870] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:14:43,874] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:15:18,165] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:15:18,166] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:15:20,226] DEBUG: Response status code: 404
[2025-06-04 19:15:20,226] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:15:20 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:15:20,228] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:15:20,229] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:15:20,234] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:15:52,804] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:15:52,806] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:15:54,874] DEBUG: Response status code: 404
[2025-06-04 19:15:54,875] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:15:54 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:15:54,875] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:15:54,878] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:15:54,880] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:16:30,864] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:16:30,865] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:16:32,939] DEBUG: Response status code: 404
[2025-06-04 19:16:32,939] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:16:32 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:16:32,941] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:16:32,941] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:16:32,945] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:17:04,209] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:17:04,210] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:17:06,276] DEBUG: Response status code: 404
[2025-06-04 19:17:06,277] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:17:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:17:06,279] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:17:06,285] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:17:06,286] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:17:37,509] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:17:37,511] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:17:40,310] DEBUG: Response status code: 404
[2025-06-04 19:17:40,431] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:17:40 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:17:40,871] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:17:40,926] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:17:41,081] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:18:12,689] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:18:12,690] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:18:14,751] DEBUG: Response status code: 404
[2025-06-04 19:18:14,752] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:18:14 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:18:14,759] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:18:14,759] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:18:14,765] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:18:46,165] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:18:46,169] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:18:48,270] DEBUG: Response status code: 404
[2025-06-04 19:18:48,270] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:18:48 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:18:48,293] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:18:48,294] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:18:48,295] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:19:20,188] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:19:20,192] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:19:22,419] DEBUG: Response status code: 404
[2025-06-04 19:19:22,429] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:19:22 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:19:22,438] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:19:22,449] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:19:22,458] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:19:53,448] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:19:53,448] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.179.211",
  "public_ip": "5.28.180.145",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:19:55,503] DEBUG: Response status code: 404
[2025-06-04 19:19:55,504] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:19:55 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:19:55,516] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:19:55,524] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:19:55,526] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:34:17,406] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:34:17,407] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:34:25,567] DEBUG: Response status code: 404
[2025-06-04 19:34:25,577] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:34:25 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:34:25,606] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:34:25,642] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:34:25,654] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:34:56,690] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:34:56,691] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:34:58,724] DEBUG: Response status code: 404
[2025-06-04 19:34:58,726] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:34:58 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:34:58,726] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:34:58,728] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:34:58,729] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:35:29,666] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:35:29,667] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:35:31,699] DEBUG: Response status code: 404
[2025-06-04 19:35:31,700] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:35:31 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:35:31,701] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:35:31,703] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:35:31,704] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:36:04,534] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:36:04,556] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:36:06,571] DEBUG: Response status code: 404
[2025-06-04 19:36:06,577] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:36:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:36:06,578] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:36:06,601] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:36:06,613] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:36:37,937] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:36:37,938] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:36:40,028] DEBUG: Response status code: 404
[2025-06-04 19:36:40,030] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:36:39 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:36:40,081] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:36:40,107] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:36:40,116] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:37:11,464] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:37:11,465] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:37:13,494] DEBUG: Response status code: 404
[2025-06-04 19:37:13,502] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:37:13 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:37:13,511] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:37:13,519] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:37:13,576] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:37:46,244] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:37:46,247] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:37:48,317] DEBUG: Response status code: 404
[2025-06-04 19:37:48,317] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:37:48 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:37:48,318] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:37:48,319] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:37:48,321] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:38:21,857] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:38:21,874] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:38:23,939] DEBUG: Response status code: 404
[2025-06-04 19:38:23,941] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:38:23 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:38:23,945] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:38:23,947] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:38:23,948] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:38:56,784] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:38:56,787] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:38:58,859] DEBUG: Response status code: 404
[2025-06-04 19:38:58,869] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:38:58 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:38:58,876] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:38:58,886] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:38:58,946] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:39:31,829] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:39:31,852] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:39:33,990] DEBUG: Response status code: 404
[2025-06-04 19:39:33,995] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:39:33 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:39:33,998] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:39:34,010] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:39:34,183] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:40:06,330] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:40:06,335] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:40:08,392] DEBUG: Response status code: 404
[2025-06-04 19:40:08,393] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:40:08 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:40:08,396] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:40:08,410] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:40:08,427] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:40:44,216] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:40:44,220] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:40:46,277] DEBUG: Response status code: 404
[2025-06-04 19:40:46,302] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:40:46 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:40:46,326] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:40:46,334] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:40:46,338] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:41:19,629] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:41:19,779] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:41:21,938] DEBUG: Response status code: 404
[2025-06-04 19:41:21,940] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:41:21 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:41:21,973] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:41:22,079] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:41:22,098] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:41:54,283] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:41:54,284] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:41:56,340] DEBUG: Response status code: 404
[2025-06-04 19:41:56,342] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:41:56 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:41:56,344] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:41:56,345] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:41:56,347] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:42:26,624] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:42:26,625] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:42:28,677] DEBUG: Response status code: 404
[2025-06-04 19:42:28,678] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:42:28 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:42:28,680] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:42:28,680] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:42:28,681] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:42:29,419] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:42:29,420] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:42:31,486] DEBUG: Response status code: 404
[2025-06-04 19:42:31,489] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:42:31 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:42:31,491] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:42:31,492] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:42:31,493] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:42:59,102] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:42:59,102] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:43:01,130] DEBUG: Response status code: 404
[2025-06-04 19:43:01,130] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:43:01 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:43:01,132] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:01,132] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:01,132] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:43:04,196] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:43:04,198] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:43:06,243] DEBUG: Response status code: 404
[2025-06-04 19:43:06,244] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:43:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:43:06,246] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:06,247] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:06,248] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:43:31,540] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:43:31,542] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:43:33,600] DEBUG: Response status code: 404
[2025-06-04 19:43:33,601] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:43:33 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:43:33,602] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:33,602] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:33,603] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:43:40,498] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:43:40,509] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:43:42,546] DEBUG: Response status code: 404
[2025-06-04 19:43:42,549] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:43:42 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:43:42,555] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:42,560] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:43:42,565] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:44:04,274] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:44:04,276] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:44:09,430] DEBUG: Response status code: 404
[2025-06-04 19:44:09,431] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:44:09 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:44:09,432] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:44:09,433] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:44:09,434] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:44:15,449] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:44:15,451] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:44:17,513] DEBUG: Response status code: 404
[2025-06-04 19:44:17,518] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:44:17 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:44:17,520] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:44:17,521] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:44:17,522] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 19:44:31,338] DEBUG: Sending registration request to http://localhost:5000/api/public/register
[2025-06-04 19:44:31,340] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:44:33,460] DEBUG: Response status code: 201
[2025-06-04 19:44:33,461] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:44:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:44:33,462] DEBUG: Response data: {
  "server_id": 9,
  "token": "3507116dceb0479bbe16b330b02f8653"
}
[2025-06-04 19:44:33,464] INFO: Registered client: 9
[2025-06-04 19:44:33,477] DEBUG: Checking approval status for server 9
[2025-06-04 19:44:33,479] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:44:35,560] DEBUG: Response status code: 200
[2025-06-04 19:44:35,561] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:44:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '69', 'Connection': 'close'}
[2025-06-04 19:44:35,561] DEBUG: Raw response text: {
  "is_approved": false,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:44:35,562] INFO: Server is waiting for admin approval in the servers table
[2025-06-04 19:44:35,562] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 19:44:50,036] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 19:44:50,039] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 19:44:52,083] DEBUG: Response status code: 404
[2025-06-04 19:44:52,084] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:44:52 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 19:44:52,087] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:44:52,088] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 19:44:52,092] DEBUG: Checking approval status for server 9
[2025-06-04 19:44:52,092] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:44:54,157] DEBUG: Response status code: 200
[2025-06-04 19:44:54,157] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:44:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '69', 'Connection': 'close'}
[2025-06-04 19:44:54,160] DEBUG: Raw response text: {
  "is_approved": false,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:44:54,160] INFO: Server is waiting for admin approval in the servers table
[2025-06-04 19:44:54,160] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 19:45:35,779] DEBUG: Checking approval status for server 9
[2025-06-04 19:45:35,793] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:45:38,049] DEBUG: Response status code: 200
[2025-06-04 19:45:38,066] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:45:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '69', 'Connection': 'close'}
[2025-06-04 19:45:38,100] DEBUG: Raw response text: {
  "is_approved": false,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:45:38,267] INFO: Server is waiting for admin approval in the servers table
[2025-06-04 19:45:38,291] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 19:45:54,162] DEBUG: Checking approval status for server 9
[2025-06-04 19:45:54,163] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:45:56,216] DEBUG: Response status code: 200
[2025-06-04 19:45:56,217] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:45:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '69', 'Connection': 'close'}
[2025-06-04 19:45:56,218] DEBUG: Raw response text: {
  "is_approved": false,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:45:56,218] INFO: Server is waiting for admin approval in the servers table
[2025-06-04 19:45:56,219] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 19:46:38,435] DEBUG: Checking approval status for server 9
[2025-06-04 19:46:38,460] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:46:40,545] DEBUG: Response status code: 200
[2025-06-04 19:46:40,547] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:46:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:46:40,548] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:46:40,551] INFO: Server is approved and ready to process commands
[2025-06-04 19:46:40,552] INFO: Fetching commands...
[2025-06-04 19:46:40,553] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:46:40,710] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:46:42,864] DEBUG: Response status code: 200
[2025-06-04 19:46:42,866] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:46:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:46:42,867] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:46:42,869] INFO: Commands: []
[2025-06-04 19:46:56,220] DEBUG: Checking approval status for server 9
[2025-06-04 19:46:56,220] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:46:58,312] DEBUG: Response status code: 200
[2025-06-04 19:46:58,312] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:46:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:46:58,314] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:46:58,314] INFO: Server is approved and ready to process commands
[2025-06-04 19:46:58,315] INFO: Fetching commands...
[2025-06-04 19:46:58,315] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:46:58,315] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:00,392] DEBUG: Response status code: 200
[2025-06-04 19:47:00,392] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:47:00,394] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:47:00,394] INFO: Commands: []
[2025-06-04 19:47:04,932] DEBUG: Checking approval status for server 9
[2025-06-04 19:47:04,933] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:07,042] DEBUG: Response status code: 200
[2025-06-04 19:47:07,043] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:47:07,049] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:47:07,050] INFO: Server is approved and ready to process commands
[2025-06-04 19:47:07,052] INFO: Fetching commands...
[2025-06-04 19:47:07,104] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:47:07,116] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:10,700] DEBUG: Response status code: 200
[2025-06-04 19:47:10,730] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:47:10,755] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:47:10,816] INFO: Commands: []
[2025-06-04 19:47:22,445] DEBUG: Checking approval status for server 9
[2025-06-04 19:47:22,446] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:24,512] DEBUG: Response status code: 200
[2025-06-04 19:47:24,513] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:47:24,514] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:47:24,514] INFO: Server is approved and ready to process commands
[2025-06-04 19:47:24,515] INFO: Fetching commands...
[2025-06-04 19:47:24,515] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:47:24,515] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:26,562] DEBUG: Response status code: 200
[2025-06-04 19:47:26,563] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:47:26,564] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:47:26,565] INFO: Commands: []
[2025-06-04 19:47:32,891] DEBUG: Checking approval status for server 9
[2025-06-04 19:47:32,892] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:34,984] DEBUG: Response status code: 200
[2025-06-04 19:47:34,985] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:47:34,986] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:47:34,987] INFO: Server is approved and ready to process commands
[2025-06-04 19:47:34,989] INFO: Fetching commands...
[2025-06-04 19:47:34,991] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:47:34,992] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:37,050] DEBUG: Response status code: 200
[2025-06-04 19:47:37,051] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:47:37,057] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:47:37,059] INFO: Commands: []
[2025-06-04 19:47:48,621] DEBUG: Checking approval status for server 9
[2025-06-04 19:47:48,621] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:50,826] DEBUG: Response status code: 200
[2025-06-04 19:47:50,828] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:47:50,829] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:47:50,830] INFO: Server is approved and ready to process commands
[2025-06-04 19:47:50,830] INFO: Fetching commands...
[2025-06-04 19:47:50,831] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:47:50,833] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:47:52,889] DEBUG: Response status code: 200
[2025-06-04 19:47:52,889] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:47:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:47:52,891] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:47:52,893] INFO: Commands: []
[2025-06-04 19:47:59,099] DEBUG: Checking approval status for server 9
[2025-06-04 19:47:59,101] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:01,172] DEBUG: Response status code: 200
[2025-06-04 19:48:01,173] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:48:01,176] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:48:01,176] INFO: Server is approved and ready to process commands
[2025-06-04 19:48:01,180] INFO: Fetching commands...
[2025-06-04 19:48:01,185] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:48:01,186] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:03,264] DEBUG: Response status code: 200
[2025-06-04 19:48:03,265] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:48:03,267] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:48:03,270] INFO: Commands: []
[2025-06-04 19:48:14,949] DEBUG: Checking approval status for server 9
[2025-06-04 19:48:14,949] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:17,014] DEBUG: Response status code: 200
[2025-06-04 19:48:17,015] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:48:17,015] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:48:17,015] INFO: Server is approved and ready to process commands
[2025-06-04 19:48:17,016] INFO: Fetching commands...
[2025-06-04 19:48:17,016] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:48:17,016] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:19,078] DEBUG: Response status code: 200
[2025-06-04 19:48:19,079] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:48:19,079] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:48:19,080] INFO: Commands: []
[2025-06-04 19:48:25,357] DEBUG: Checking approval status for server 9
[2025-06-04 19:48:25,364] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:27,477] DEBUG: Response status code: 200
[2025-06-04 19:48:27,479] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:48:27,481] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:48:27,482] INFO: Server is approved and ready to process commands
[2025-06-04 19:48:27,484] INFO: Fetching commands...
[2025-06-04 19:48:27,486] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:48:27,488] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:29,549] DEBUG: Response status code: 200
[2025-06-04 19:48:29,551] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:48:29,553] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:48:29,556] INFO: Commands: []
[2025-06-04 19:48:41,125] DEBUG: Checking approval status for server 9
[2025-06-04 19:48:41,125] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:43,176] DEBUG: Response status code: 200
[2025-06-04 19:48:43,177] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:48:43,181] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:48:43,182] INFO: Server is approved and ready to process commands
[2025-06-04 19:48:43,182] INFO: Fetching commands...
[2025-06-04 19:48:43,183] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:48:43,184] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:45,241] DEBUG: Response status code: 200
[2025-06-04 19:48:45,243] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:48:45,244] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:48:45,247] INFO: Commands: []
[2025-06-04 19:48:51,639] DEBUG: Checking approval status for server 9
[2025-06-04 19:48:51,640] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:53,833] DEBUG: Response status code: 200
[2025-06-04 19:48:53,834] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:48:53,835] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:48:53,836] INFO: Server is approved and ready to process commands
[2025-06-04 19:48:53,836] INFO: Fetching commands...
[2025-06-04 19:48:53,838] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:48:53,838] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:48:55,919] DEBUG: Response status code: 200
[2025-06-04 19:48:55,920] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:48:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:48:55,922] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:48:55,925] INFO: Commands: []
[2025-06-04 19:49:07,313] DEBUG: Checking approval status for server 9
[2025-06-04 19:49:07,314] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:09,356] DEBUG: Response status code: 200
[2025-06-04 19:49:09,357] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:49:09,357] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:49:09,357] INFO: Server is approved and ready to process commands
[2025-06-04 19:49:09,358] INFO: Fetching commands...
[2025-06-04 19:49:09,358] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:49:09,358] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:11,495] DEBUG: Response status code: 200
[2025-06-04 19:49:11,497] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:49:11,497] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:49:11,499] INFO: Commands: []
[2025-06-04 19:49:18,022] DEBUG: Checking approval status for server 9
[2025-06-04 19:49:18,053] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:20,273] DEBUG: Response status code: 200
[2025-06-04 19:49:20,274] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:49:20,275] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:49:20,277] INFO: Server is approved and ready to process commands
[2025-06-04 19:49:20,278] INFO: Fetching commands...
[2025-06-04 19:49:20,279] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:49:20,281] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:22,443] DEBUG: Response status code: 200
[2025-06-04 19:49:22,444] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:49:22,446] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:49:22,448] INFO: Commands: []
[2025-06-04 19:49:35,365] DEBUG: Checking approval status for server 9
[2025-06-04 19:49:35,368] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:37,576] DEBUG: Response status code: 200
[2025-06-04 19:49:37,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:49:37,585] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:49:37,593] INFO: Server is approved and ready to process commands
[2025-06-04 19:49:37,597] INFO: Fetching commands...
[2025-06-04 19:49:37,598] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:49:37,599] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:39,705] DEBUG: Response status code: 200
[2025-06-04 19:49:39,706] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:49:39,707] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:49:39,712] INFO: Commands: []
[2025-06-04 19:49:44,578] DEBUG: Checking approval status for server 9
[2025-06-04 19:49:44,583] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:46,686] DEBUG: Response status code: 200
[2025-06-04 19:49:46,687] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:49:46,691] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:49:46,693] INFO: Server is approved and ready to process commands
[2025-06-04 19:49:46,694] INFO: Fetching commands...
[2025-06-04 19:49:46,705] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:49:46,706] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:49:48,858] DEBUG: Response status code: 200
[2025-06-04 19:49:48,859] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:49:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:49:48,861] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:49:48,863] INFO: Commands: []
[2025-06-04 19:50:01,800] DEBUG: Checking approval status for server 9
[2025-06-04 19:50:01,801] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:03,848] DEBUG: Response status code: 200
[2025-06-04 19:50:03,849] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:50:03,851] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:50:03,851] INFO: Server is approved and ready to process commands
[2025-06-04 19:50:03,852] INFO: Fetching commands...
[2025-06-04 19:50:03,852] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:50:03,853] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:05,913] DEBUG: Response status code: 200
[2025-06-04 19:50:05,913] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:50:05,915] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:50:05,917] INFO: Commands: []
[2025-06-04 19:50:10,957] DEBUG: Checking approval status for server 9
[2025-06-04 19:50:10,958] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:13,014] DEBUG: Response status code: 200
[2025-06-04 19:50:13,016] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:50:13,017] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:50:13,019] INFO: Server is approved and ready to process commands
[2025-06-04 19:50:13,019] INFO: Fetching commands...
[2025-06-04 19:50:13,022] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:50:13,035] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:15,098] DEBUG: Response status code: 200
[2025-06-04 19:50:15,108] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:50:15,117] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:50:15,209] INFO: Commands: []
[2025-06-04 19:50:27,995] DEBUG: Checking approval status for server 9
[2025-06-04 19:50:27,996] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:30,086] DEBUG: Response status code: 200
[2025-06-04 19:50:30,086] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:50:30,087] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:50:30,087] INFO: Server is approved and ready to process commands
[2025-06-04 19:50:30,088] INFO: Fetching commands...
[2025-06-04 19:50:30,088] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:50:30,088] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:32,164] DEBUG: Response status code: 200
[2025-06-04 19:50:32,165] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:50:32,166] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:50:32,167] INFO: Commands: []
[2025-06-04 19:50:37,329] DEBUG: Checking approval status for server 9
[2025-06-04 19:50:37,330] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:39,420] DEBUG: Response status code: 200
[2025-06-04 19:50:39,421] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:50:39,425] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:50:39,426] INFO: Server is approved and ready to process commands
[2025-06-04 19:50:39,428] INFO: Fetching commands...
[2025-06-04 19:50:39,430] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:50:39,434] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:41,511] DEBUG: Response status code: 200
[2025-06-04 19:50:41,512] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:50:41,515] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:50:41,519] INFO: Commands: []
[2025-06-04 19:50:54,213] DEBUG: Checking approval status for server 9
[2025-06-04 19:50:54,213] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:56,346] DEBUG: Response status code: 200
[2025-06-04 19:50:56,346] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:50:56,348] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:50:56,349] INFO: Server is approved and ready to process commands
[2025-06-04 19:50:56,349] INFO: Fetching commands...
[2025-06-04 19:50:56,350] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:50:56,350] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:50:58,423] DEBUG: Response status code: 200
[2025-06-04 19:50:58,424] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:50:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:50:58,425] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:50:58,426] INFO: Commands: []
[2025-06-04 19:51:03,605] DEBUG: Checking approval status for server 9
[2025-06-04 19:51:03,606] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:05,748] DEBUG: Response status code: 200
[2025-06-04 19:51:05,749] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:51:05,751] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:51:05,752] INFO: Server is approved and ready to process commands
[2025-06-04 19:51:05,753] INFO: Fetching commands...
[2025-06-04 19:51:05,755] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:51:05,857] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:08,155] DEBUG: Response status code: 200
[2025-06-04 19:51:08,156] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:51:08,158] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:51:08,170] INFO: Commands: []
[2025-06-04 19:51:20,535] DEBUG: Checking approval status for server 9
[2025-06-04 19:51:20,536] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:22,614] DEBUG: Response status code: 200
[2025-06-04 19:51:22,615] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:51:22,616] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:51:22,617] INFO: Server is approved and ready to process commands
[2025-06-04 19:51:22,617] INFO: Fetching commands...
[2025-06-04 19:51:22,618] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:51:22,619] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:24,690] DEBUG: Response status code: 200
[2025-06-04 19:51:24,691] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:51:24,692] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:51:24,693] INFO: Commands: []
[2025-06-04 19:51:30,310] DEBUG: Checking approval status for server 9
[2025-06-04 19:51:30,312] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:32,422] DEBUG: Response status code: 200
[2025-06-04 19:51:32,424] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:51:32,428] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:51:32,430] INFO: Server is approved and ready to process commands
[2025-06-04 19:51:32,431] INFO: Fetching commands...
[2025-06-04 19:51:32,436] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:51:32,438] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:34,529] DEBUG: Response status code: 200
[2025-06-04 19:51:34,530] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:51:34,531] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:51:34,534] INFO: Commands: []
[2025-06-04 19:51:46,750] DEBUG: Checking approval status for server 9
[2025-06-04 19:51:46,750] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:48,843] DEBUG: Response status code: 200
[2025-06-04 19:51:48,843] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:51:48,844] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:51:48,846] INFO: Server is approved and ready to process commands
[2025-06-04 19:51:48,846] INFO: Fetching commands...
[2025-06-04 19:51:48,847] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:51:48,847] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:50,928] DEBUG: Response status code: 200
[2025-06-04 19:51:50,928] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:51:50,929] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:51:50,931] INFO: Commands: []
[2025-06-04 19:51:56,610] DEBUG: Checking approval status for server 9
[2025-06-04 19:51:56,611] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:51:58,688] DEBUG: Response status code: 200
[2025-06-04 19:51:58,690] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:51:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:51:58,693] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:51:58,694] INFO: Server is approved and ready to process commands
[2025-06-04 19:51:58,697] INFO: Fetching commands...
[2025-06-04 19:51:58,700] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:51:58,702] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:00,774] DEBUG: Response status code: 200
[2025-06-04 19:52:00,776] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:52:00,777] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:52:00,780] INFO: Commands: []
[2025-06-04 19:52:13,007] DEBUG: Checking approval status for server 9
[2025-06-04 19:52:13,007] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:15,112] DEBUG: Response status code: 200
[2025-06-04 19:52:15,112] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:52:15,113] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:52:15,113] INFO: Server is approved and ready to process commands
[2025-06-04 19:52:15,115] INFO: Fetching commands...
[2025-06-04 19:52:15,115] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:52:15,115] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:17,394] DEBUG: Response status code: 200
[2025-06-04 19:52:17,395] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:52:17,396] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:52:17,397] INFO: Commands: []
[2025-06-04 19:52:22,859] DEBUG: Checking approval status for server 9
[2025-06-04 19:52:22,860] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:24,928] DEBUG: Response status code: 200
[2025-06-04 19:52:24,928] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:52:24,931] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:52:24,933] INFO: Server is approved and ready to process commands
[2025-06-04 19:52:24,934] INFO: Fetching commands...
[2025-06-04 19:52:24,936] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:52:24,938] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:27,014] DEBUG: Response status code: 200
[2025-06-04 19:52:27,015] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:52:27,017] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:52:27,020] INFO: Commands: []
[2025-06-04 19:52:39,471] DEBUG: Checking approval status for server 9
[2025-06-04 19:52:39,472] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:41,537] DEBUG: Response status code: 200
[2025-06-04 19:52:41,538] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:52:41,541] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:52:41,541] INFO: Server is approved and ready to process commands
[2025-06-04 19:52:41,542] INFO: Fetching commands...
[2025-06-04 19:52:41,542] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:52:41,543] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:43,592] DEBUG: Response status code: 200
[2025-06-04 19:52:43,593] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:52:43,594] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:52:43,596] INFO: Commands: []
[2025-06-04 19:52:49,081] DEBUG: Checking approval status for server 9
[2025-06-04 19:52:49,085] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:51,324] DEBUG: Response status code: 200
[2025-06-04 19:52:51,325] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:52:51,326] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:52:51,327] INFO: Server is approved and ready to process commands
[2025-06-04 19:52:51,328] INFO: Fetching commands...
[2025-06-04 19:52:51,330] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:52:51,336] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:52:53,602] DEBUG: Response status code: 200
[2025-06-04 19:52:53,610] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:52:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:52:53,628] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:52:53,743] INFO: Commands: []
[2025-06-04 19:53:05,666] DEBUG: Checking approval status for server 9
[2025-06-04 19:53:05,667] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:07,728] DEBUG: Response status code: 200
[2025-06-04 19:53:07,729] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:53:07,730] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:53:07,731] INFO: Server is approved and ready to process commands
[2025-06-04 19:53:07,732] INFO: Fetching commands...
[2025-06-04 19:53:07,732] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:53:07,732] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:09,803] DEBUG: Response status code: 200
[2025-06-04 19:53:09,803] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:53:09,805] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:53:09,807] INFO: Commands: []
[2025-06-04 19:53:15,968] DEBUG: Checking approval status for server 9
[2025-06-04 19:53:15,972] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:19,367] DEBUG: Response status code: 200
[2025-06-04 19:53:19,367] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:53:19,371] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:53:19,372] INFO: Server is approved and ready to process commands
[2025-06-04 19:53:19,373] INFO: Fetching commands...
[2025-06-04 19:53:19,627] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:53:20,020] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:22,108] DEBUG: Response status code: 200
[2025-06-04 19:53:22,109] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:53:22,111] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:53:22,113] INFO: Commands: []
[2025-06-04 19:53:31,862] DEBUG: Checking approval status for server 9
[2025-06-04 19:53:31,862] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:33,953] DEBUG: Response status code: 200
[2025-06-04 19:53:33,954] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:53:33,955] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:53:33,956] INFO: Server is approved and ready to process commands
[2025-06-04 19:53:33,957] INFO: Fetching commands...
[2025-06-04 19:53:33,959] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:53:33,960] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:36,042] DEBUG: Response status code: 200
[2025-06-04 19:53:36,042] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:53:36,045] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:53:36,047] INFO: Commands: []
[2025-06-04 19:53:44,205] DEBUG: Checking approval status for server 9
[2025-06-04 19:53:44,207] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:46,291] DEBUG: Response status code: 200
[2025-06-04 19:53:46,292] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:53:46,295] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:53:46,297] INFO: Server is approved and ready to process commands
[2025-06-04 19:53:46,300] INFO: Fetching commands...
[2025-06-04 19:53:46,301] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:53:46,308] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:53:48,373] DEBUG: Response status code: 200
[2025-06-04 19:53:48,373] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:53:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:53:48,376] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:53:48,379] INFO: Commands: []
[2025-06-04 19:53:58,114] DEBUG: Checking approval status for server 9
[2025-06-04 19:53:58,115] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:00,217] DEBUG: Response status code: 200
[2025-06-04 19:54:00,221] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:54:00,223] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:54:00,223] INFO: Server is approved and ready to process commands
[2025-06-04 19:54:00,224] INFO: Fetching commands...
[2025-06-04 19:54:00,225] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:54:00,225] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:02,306] DEBUG: Response status code: 200
[2025-06-04 19:54:02,306] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:54:02,307] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:54:02,308] INFO: Commands: []
[2025-06-04 19:54:10,705] DEBUG: Checking approval status for server 9
[2025-06-04 19:54:10,706] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:13,234] DEBUG: Response status code: 200
[2025-06-04 19:54:13,234] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:54:13,239] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:54:13,263] INFO: Server is approved and ready to process commands
[2025-06-04 19:54:13,282] INFO: Fetching commands...
[2025-06-04 19:54:13,294] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:54:13,305] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:16,092] DEBUG: Response status code: 200
[2025-06-04 19:54:16,093] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:54:16,094] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:54:16,096] INFO: Commands: []
[2025-06-04 19:54:24,465] DEBUG: Checking approval status for server 9
[2025-06-04 19:54:24,465] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:26,776] DEBUG: Response status code: 200
[2025-06-04 19:54:26,778] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:54:26,780] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:54:26,780] INFO: Server is approved and ready to process commands
[2025-06-04 19:54:26,781] INFO: Fetching commands...
[2025-06-04 19:54:26,782] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:54:26,782] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:29,104] DEBUG: Response status code: 200
[2025-06-04 19:54:29,105] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:54:29,108] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:54:29,109] INFO: Commands: []
[2025-06-04 19:54:38,296] DEBUG: Checking approval status for server 9
[2025-06-04 19:54:38,297] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:40,399] DEBUG: Response status code: 200
[2025-06-04 19:54:40,400] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:54:40,404] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:54:40,406] INFO: Server is approved and ready to process commands
[2025-06-04 19:54:40,408] INFO: Fetching commands...
[2025-06-04 19:54:40,516] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:54:40,556] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:42,851] DEBUG: Response status code: 200
[2025-06-04 19:54:42,867] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:54:42,874] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:54:42,879] INFO: Commands: []
[2025-06-04 19:54:51,388] DEBUG: Checking approval status for server 9
[2025-06-04 19:54:51,389] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:53,565] DEBUG: Response status code: 200
[2025-06-04 19:54:53,566] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:54:53,571] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:54:53,571] INFO: Server is approved and ready to process commands
[2025-06-04 19:54:53,571] INFO: Fetching commands...
[2025-06-04 19:54:53,572] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:54:53,572] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:54:55,669] DEBUG: Response status code: 200
[2025-06-04 19:54:55,669] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:54:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:54:55,670] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:54:55,672] INFO: Commands: []
[2025-06-04 19:55:04,938] DEBUG: Checking approval status for server 9
[2025-06-04 19:55:04,938] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:07,168] DEBUG: Response status code: 200
[2025-06-04 19:55:07,169] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:55:07,170] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:55:07,171] INFO: Server is approved and ready to process commands
[2025-06-04 19:55:07,172] INFO: Fetching commands...
[2025-06-04 19:55:07,179] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:55:07,182] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:09,281] DEBUG: Response status code: 200
[2025-06-04 19:55:09,283] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:55:09,290] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:55:09,296] INFO: Commands: []
[2025-06-04 19:55:17,832] DEBUG: Checking approval status for server 9
[2025-06-04 19:55:17,832] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:20,576] DEBUG: Response status code: 200
[2025-06-04 19:55:20,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:55:20,577] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:55:20,577] INFO: Server is approved and ready to process commands
[2025-06-04 19:55:20,578] INFO: Fetching commands...
[2025-06-04 19:55:20,578] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:55:20,579] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:22,684] DEBUG: Response status code: 200
[2025-06-04 19:55:22,684] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:55:22,685] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:55:22,686] INFO: Commands: []
[2025-06-04 19:55:31,408] DEBUG: Checking approval status for server 9
[2025-06-04 19:55:31,409] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:33,484] DEBUG: Response status code: 200
[2025-06-04 19:55:33,493] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:55:33,496] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:55:33,498] INFO: Server is approved and ready to process commands
[2025-06-04 19:55:33,506] INFO: Fetching commands...
[2025-06-04 19:55:33,508] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:55:33,510] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:35,742] DEBUG: Response status code: 200
[2025-06-04 19:55:35,744] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:55:35,745] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:55:35,747] INFO: Commands: []
[2025-06-04 19:55:44,812] DEBUG: Checking approval status for server 9
[2025-06-04 19:55:44,812] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:46,876] DEBUG: Response status code: 200
[2025-06-04 19:55:46,876] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:55:46,878] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:55:46,879] INFO: Server is approved and ready to process commands
[2025-06-04 19:55:46,879] INFO: Fetching commands...
[2025-06-04 19:55:46,882] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:55:46,885] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:48,989] DEBUG: Response status code: 200
[2025-06-04 19:55:48,989] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:55:48,990] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:55:48,991] INFO: Commands: []
[2025-06-04 19:55:57,853] DEBUG: Checking approval status for server 9
[2025-06-04 19:55:57,854] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:55:59,934] DEBUG: Response status code: 200
[2025-06-04 19:55:59,936] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:55:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:55:59,940] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:55:59,942] INFO: Server is approved and ready to process commands
[2025-06-04 19:55:59,943] INFO: Fetching commands...
[2025-06-04 19:55:59,944] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:55:59,946] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:02,026] DEBUG: Response status code: 200
[2025-06-04 19:56:02,027] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:56:02,029] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:56:02,031] INFO: Commands: []
[2025-06-04 19:56:11,066] DEBUG: Checking approval status for server 9
[2025-06-04 19:56:11,073] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:13,169] DEBUG: Response status code: 200
[2025-06-04 19:56:13,171] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:56:13,172] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:56:13,173] INFO: Server is approved and ready to process commands
[2025-06-04 19:56:13,173] INFO: Fetching commands...
[2025-06-04 19:56:13,173] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:56:13,174] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:15,271] DEBUG: Response status code: 200
[2025-06-04 19:56:15,272] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:56:15,273] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:56:15,276] INFO: Commands: []
[2025-06-04 19:56:24,149] DEBUG: Checking approval status for server 9
[2025-06-04 19:56:24,150] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:26,244] DEBUG: Response status code: 200
[2025-06-04 19:56:26,245] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:56:26,246] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:56:26,247] INFO: Server is approved and ready to process commands
[2025-06-04 19:56:26,248] INFO: Fetching commands...
[2025-06-04 19:56:26,249] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:56:26,250] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:28,325] DEBUG: Response status code: 200
[2025-06-04 19:56:28,326] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:56:28,328] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:56:28,335] INFO: Commands: []
[2025-06-04 19:56:37,325] DEBUG: Checking approval status for server 9
[2025-06-04 19:56:37,326] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:39,393] DEBUG: Response status code: 200
[2025-06-04 19:56:39,393] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:56:39,395] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:56:39,395] INFO: Server is approved and ready to process commands
[2025-06-04 19:56:39,396] INFO: Fetching commands...
[2025-06-04 19:56:39,396] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:56:39,396] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:41,439] DEBUG: Response status code: 200
[2025-06-04 19:56:41,439] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:56:41,440] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:56:41,441] INFO: Commands: []
[2025-06-04 19:56:50,429] DEBUG: Checking approval status for server 9
[2025-06-04 19:56:50,432] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:52,614] DEBUG: Response status code: 200
[2025-06-04 19:56:52,615] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:56:52,617] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:56:52,619] INFO: Server is approved and ready to process commands
[2025-06-04 19:56:52,630] INFO: Fetching commands...
[2025-06-04 19:56:52,643] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:56:52,645] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:56:54,902] DEBUG: Response status code: 200
[2025-06-04 19:56:54,904] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:56:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:56:54,906] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:56:54,926] INFO: Commands: []
[2025-06-04 19:57:03,522] DEBUG: Checking approval status for server 9
[2025-06-04 19:57:03,522] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:05,660] DEBUG: Response status code: 200
[2025-06-04 19:57:05,661] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:57:05,662] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:57:05,664] INFO: Server is approved and ready to process commands
[2025-06-04 19:57:05,665] INFO: Fetching commands...
[2025-06-04 19:57:05,665] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:57:05,665] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:07,746] DEBUG: Response status code: 200
[2025-06-04 19:57:07,747] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:57:07,750] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:57:07,752] INFO: Commands: []
[2025-06-04 19:57:17,086] DEBUG: Checking approval status for server 9
[2025-06-04 19:57:17,088] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:19,668] DEBUG: Response status code: 200
[2025-06-04 19:57:19,669] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:57:19,676] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:57:19,677] INFO: Server is approved and ready to process commands
[2025-06-04 19:57:19,715] INFO: Fetching commands...
[2025-06-04 19:57:19,754] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:57:19,776] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:22,106] DEBUG: Response status code: 200
[2025-06-04 19:57:22,107] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:57:22,109] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:57:22,111] INFO: Commands: []
[2025-06-04 19:57:30,058] DEBUG: Checking approval status for server 9
[2025-06-04 19:57:30,058] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:32,266] DEBUG: Response status code: 200
[2025-06-04 19:57:32,267] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:57:32,268] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:57:32,269] INFO: Server is approved and ready to process commands
[2025-06-04 19:57:32,269] INFO: Fetching commands...
[2025-06-04 19:57:32,270] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:57:32,270] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:34,417] DEBUG: Response status code: 200
[2025-06-04 19:57:34,418] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '152', 'Connection': 'close'}
[2025-06-04 19:57:34,418] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "systeminfo",
      "history_id": "22",
      "id": null
    }
  ],
  "interval": 20
}
[2025-06-04 19:57:34,420] INFO: Commands: [{'as_admin': True, 'command': 'systeminfo', 'history_id': '22', 'id': None}]
[2025-06-04 19:57:36,642] INFO: Running command: systeminfo (admin=True)
[2025-06-04 19:57:45,328] DEBUG: Checking approval status for server 9
[2025-06-04 19:57:45,630] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:46,216] INFO: Result: {'success': True, 'output': '\nHost Name:                     LAP-MOSHEG\nOS Name:                       Microsoft Windows 11 Business\nOS Version:                    10.0.26100 N/A Build 26100\nOS Manufacturer:               Microsoft Corporation\nOS Configuration:              Standalone Workstation\nOS Build Type:                 Multiprocessor Free\nRegistered Owner:              N/A\nRegistered Organization:       N/A\nProduct ID:                    00330-73745-00003-AAOEM\nOriginal Install Date:         10/13/2024, 11:41:51 AM\nSystem Boot Time:              5/30/2025, 12:28:48 PM\nSystem Manufacturer:           LENOVO\nSystem Model:                  82RF\nSystem Type:                   x64-based PC\nProcessor(s):                  1 Processor(s) Installed.\n                               [01]: Intel64 Family 6 Model 154 Stepping 3 GenuineIntel ~2500 Mhz\nBIOS Version:                  LENOVO J2CN40WW, 4/15/2022\nWindows Directory:             C:\\WINDOWS\nSystem Directory:              C:\\WINDOWS\\system32\nBoot Device:                   \\Device\\HarddiskVolume1\nSystem Locale:                 en-us;English (United States)\nInput Locale:                  en-us;English (United States)\nTime Zone:                     (UTC+02:00) Jerusalem\nTotal Physical Memory:         32,492 MB\nAvailable Physical Memory:     3,722 MB\nVirtual Memory: Max Size:      79,596 MB\nVirtual Memory: Available:     17,157 MB\nVirtual Memory: In Use:        62,439 MB\nPage File Location(s):         C:\\pagefile.sys\nDomain:                        WORKGROUP\nLogon Server:                  \\\\LAP-MOSHEG\nHotfix(s):                     5 Hotfix(s) Installed.\n                               [01]: KB5054979\n                               [02]: KB5061977\n                               [03]: KB5058538\n                               [04]: KB5058523\n                               [05]: KB5059502\nNetwork Card(s):               9 NIC(s) Installed.\n                               [01]: Intel(R) Wi-Fi 6E AX211 160MHz\n                                     Connection Name: Wi-Fi\n                                     DHCP Enabled:    Yes\n                                     DHCP Server:     192.168.1.1\n                                     IP address(es)\n                                     [01]: 192.168.1.127\n                                     [02]: fe80::f95b:d3a4:c0ec:a347\n                                     [03]: 2a00:a041:e933:2f00:2025:7f8a:58f6:377b\n                                     [04]: 2a00:a041:e933:2f00:a924:354e:2960:e725\n                               [02]: TAP-Windows Adapter V9\n                                     Connection Name: Ethernet 6\n                                     Status:          Media disconnected\n                               [03]: Fortinet SSL VPN Virtual Ethernet Adapter\n                                     Connection Name: Ethernet 4\n                                     Status:          Hardware not present\n                               [04]: Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n                                     Connection Name: Ethernet 5\n                                     Status:          Media disconnected\n                               [05]: Sophos TAP Adapter\n                                     Connection Name: Ethernet 3\n                                     Status:          Media disconnected\n                               [06]: Realtek PCIe GbE Family Controller\n                                     Connection Name: Ethernet\n                                     Status:          Media disconnected\n                               [07]: Bluetooth Device (Personal Area Network)\n                                     Connection Name: Bluetooth Network Connection\n                                     Status:          Media disconnected\n                               [08]: Wintun Userspace Tunnel\n                                     Connection Name: OpenVPN Wintun\n                                     Status:          Media disconnected\n                               [09]: OpenVPN Data Channel Offload\n                                     Connection Name: OpenVPN Data Channel Offload\n                                     Status:          Media disconnected\nVirtualization-based security: Status: Running\n                               Required Security Properties:\n                               Available Security Properties:\n                                     Base Virtualization Support\n                                     Secure Boot\n                                     DMA Protection\n                                     UEFI Code Readonly\n                                     SMM Security Mitigations 1.0\n                                     Mode Based Execution Control\n                                     APIC Virtualization\n                               Services Configured:\n                               Services Running:\n                               App Control for Business policy: Enforced\n                               App Control for Business user mode policy: Off\n                               Security Features Enabled:\nHyper-V Requirements:          A hypervisor has been detected. Features required for Hyper-V will not be displayed.\n', 'error': '', 'duration': 9.56569504737854, 'returncode': 0}
[2025-06-04 19:57:47,764] DEBUG: Response status code: 200
[2025-06-04 19:57:47,765] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:57:47,766] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:57:47,769] INFO: Server is approved and ready to process commands
[2025-06-04 19:57:47,771] INFO: Fetching commands...
[2025-06-04 19:57:47,773] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:57:47,773] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:57:48,399] INFO: Result for command None sent successfully
[2025-06-04 19:57:50,310] DEBUG: Response status code: 200
[2025-06-04 19:57:50,337] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:57:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 19:57:50,368] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 19:57:50,627] INFO: Commands: []
[2025-06-04 19:58:08,400] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:08,400] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:10,576] DEBUG: Response status code: 200
[2025-06-04 19:58:10,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:10,577] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:10,578] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:10,579] INFO: Fetching commands...
[2025-06-04 19:58:10,579] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:10,580] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:12,960] DEBUG: Response status code: 200
[2025-06-04 19:58:12,960] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:12,960] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:12,961] INFO: Commands: []
[2025-06-04 19:58:12,994] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:12,995] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:15,040] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:15,040] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:15,107] DEBUG: Response status code: 200
[2025-06-04 19:58:15,108] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:15,110] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:15,114] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:15,116] INFO: Fetching commands...
[2025-06-04 19:58:15,117] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:15,132] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:17,125] DEBUG: Response status code: 200
[2025-06-04 19:58:17,126] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:17,127] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:17,128] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:17,129] INFO: Fetching commands...
[2025-06-04 19:58:17,130] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:17,132] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:17,230] DEBUG: Response status code: 200
[2025-06-04 19:58:17,235] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:17,246] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:17,314] INFO: Commands: []
[2025-06-04 19:58:19,193] DEBUG: Response status code: 200
[2025-06-04 19:58:19,193] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:19,193] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:19,194] INFO: Commands: []
[2025-06-04 19:58:19,410] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:19,411] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:21,282] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:21,282] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:21,757] DEBUG: Response status code: 200
[2025-06-04 19:58:21,759] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:21,761] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:21,762] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:21,766] INFO: Fetching commands...
[2025-06-04 19:58:21,771] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:21,774] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:24,821] DEBUG: Response status code: 200
[2025-06-04 19:58:24,822] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:24,822] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:24,822] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:24,823] INFO: Fetching commands...
[2025-06-04 19:58:24,823] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:24,823] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:27,564] DEBUG: Response status code: 200
[2025-06-04 19:58:27,566] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '147', 'Connection': 'close'}
[2025-06-04 19:58:27,569] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "whoami",
      "history_id": "23",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 19:58:27,571] INFO: Commands: [{'as_admin': True, 'command': 'whoami', 'history_id': '23', 'id': None}]
[2025-06-04 19:58:27,667] DEBUG: Response status code: 200
[2025-06-04 19:58:27,667] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '147', 'Connection': 'close'}
[2025-06-04 19:58:27,667] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "whoami",
      "history_id": "23",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 19:58:27,669] INFO: Commands: [{'as_admin': True, 'command': 'whoami', 'history_id': '23', 'id': None}]
[2025-06-04 19:58:29,936] INFO: Running command: whoami (admin=True)
[2025-06-04 19:58:30,054] INFO: Running command: whoami (admin=True)
[2025-06-04 19:58:30,331] INFO: Result: {'success': True, 'output': 'azuread\\moshegabay\n', 'error': '', 'duration': 0.395646333694458, 'returncode': 0}
[2025-06-04 19:58:30,681] INFO: Result: {'success': True, 'output': 'azuread\\moshegabay\n', 'error': '', 'duration': 0.6111776828765869, 'returncode': 0}
[2025-06-04 19:58:32,487] INFO: Result for command None sent successfully
[2025-06-04 19:58:32,487] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:32,488] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:32,870] INFO: Result for command None sent successfully
[2025-06-04 19:58:32,872] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:32,880] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:34,636] DEBUG: Response status code: 200
[2025-06-04 19:58:34,636] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:34,637] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:34,637] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:34,638] INFO: Fetching commands...
[2025-06-04 19:58:34,638] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:34,639] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:35,014] DEBUG: Response status code: 200
[2025-06-04 19:58:35,015] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:35,020] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:35,021] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:35,022] INFO: Fetching commands...
[2025-06-04 19:58:35,024] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:35,025] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:36,720] DEBUG: Response status code: 200
[2025-06-04 19:58:36,720] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:36,721] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:36,722] INFO: Commands: []
[2025-06-04 19:58:37,140] DEBUG: Response status code: 200
[2025-06-04 19:58:37,141] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:37,143] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:37,144] INFO: Commands: []
[2025-06-04 19:58:39,036] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:39,037] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:39,212] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:39,326] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:41,192] DEBUG: Response status code: 200
[2025-06-04 19:58:41,192] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:41,193] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:41,194] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:41,195] INFO: Fetching commands...
[2025-06-04 19:58:41,196] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:41,196] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:41,724] DEBUG: Response status code: 200
[2025-06-04 19:58:41,726] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:41,745] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:41,807] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:41,808] INFO: Fetching commands...
[2025-06-04 19:58:41,813] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:41,819] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:43,253] DEBUG: Response status code: 200
[2025-06-04 19:58:43,253] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '154', 'Connection': 'close'}
[2025-06-04 19:58:43,254] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "ipconfig /all",
      "history_id": "24",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 19:58:43,255] INFO: Commands: [{'as_admin': True, 'command': 'ipconfig /all', 'history_id': '24', 'id': None}]
[2025-06-04 19:58:44,046] DEBUG: Response status code: 200
[2025-06-04 19:58:44,047] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '154', 'Connection': 'close'}
[2025-06-04 19:58:44,051] DEBUG: Response data: {
  "commands": [
    {
      "as_admin": true,
      "command": "ipconfig /all",
      "history_id": "24",
      "id": null
    }
  ],
  "interval": 0
}
[2025-06-04 19:58:44,057] INFO: Commands: [{'as_admin': True, 'command': 'ipconfig /all', 'history_id': '24', 'id': None}]
[2025-06-04 19:58:45,380] INFO: Running command: ipconfig /all (admin=True)
[2025-06-04 19:58:45,763] INFO: Result: {'success': True, 'output': '\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : LAP-MOSHEG\n   Primary Dns Suffix  . . . . . . . : \n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n\nEthernet adapter Ethernet 6:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : pango.local\n   Description . . . . . . . . . . . : TAP-Windows Adapter V9\n   Physical Address. . . . . . . . . : 00-FF-5B-75-33-05\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 3:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Sophos TAP Adapter\n   Physical Address. . . . . . . . . : 00-FF-A1-F8-B1-EB\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nUnknown adapter OpenVPN Wintun:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Wintun Userspace Tunnel\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter vEthernet (Default Switch):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-01-C3-00\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::3876:c8d5:44a3:6e54%32(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.26.240.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 536876381\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter vEthernet (WSL (Hyper-V firewall)):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter #2\n   Physical Address. . . . . . . . . : 00-15-5D-A2-0F-F2\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::8563:3655:44b1:2be8%68(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.22.160.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 1140856157\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nUnknown adapter OpenVPN Data Channel Offload:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : OpenVPN Data Channel Offload\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-28\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 2:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter #2\n   Physical Address. . . . . . . . . : C6-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 5:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n   Physical Address. . . . . . . . . : 00-09-0F-FE-00-01\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Wi-Fi:\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Intel(R) Wi-Fi 6E AX211 160MHz\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   IPv6 Address. . . . . . . . . . . : 2a00:a041:e933:2f00:a924:354e:2960:e725(Preferred) \n   Temporary IPv6 Address. . . . . . : 2a00:a041:e933:2f00:2025:7f8a:58f6:377b(Preferred) \n   Link-local IPv6 Address . . . . . : fe80::f95b:d3a4:c0ec:a347%8(Preferred) \n   IPv4 Address. . . . . . . . . . . : 192.168.1.127(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Lease Obtained. . . . . . . . . . : Wednesday, June 4, 2025 7:34:10 PM\n   Lease Expires . . . . . . . . . . : Wednesday, June 4, 2025 8:36:23 PM\n   Default Gateway . . . . . . . . . : fe80::da78:7fff:fe16:b6bf%8\n                                       192.168.1.1\n   DHCP Server . . . . . . . . . . . : 192.168.1.1\n   DHCPv6 IAID . . . . . . . . . . . : 130286504\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   DNS Servers . . . . . . . . . . . : 2a00:a041:e933:2f00:da78:7fff:fe16:b6bf\n                                       213.57.2.5\n                                       213.57.22.5\n                                       2a00:a041:e933:2f00:da78:7fff:fe16:b6bf\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Bluetooth Network Connection:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Bluetooth Device (Personal Area Network)\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-2B\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Realtek PCIe GbE Family Controller\n   Physical Address. . . . . . . . . : 6C-24-08-36-72-73\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n', 'error': '', 'duration': 0.38085174560546875, 'returncode': 0}
[2025-06-04 19:58:46,148] INFO: Running command: ipconfig /all (admin=True)
[2025-06-04 19:58:46,708] INFO: Result: {'success': True, 'output': '\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : LAP-MOSHEG\n   Primary Dns Suffix  . . . . . . . : \n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n\nEthernet adapter Ethernet 6:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : pango.local\n   Description . . . . . . . . . . . : TAP-Windows Adapter V9\n   Physical Address. . . . . . . . . : 00-FF-5B-75-33-05\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 3:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Sophos TAP Adapter\n   Physical Address. . . . . . . . . : 00-FF-A1-F8-B1-EB\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nUnknown adapter OpenVPN Wintun:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Wintun Userspace Tunnel\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter vEthernet (Default Switch):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-01-C3-00\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::3876:c8d5:44a3:6e54%32(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.26.240.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 536876381\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter vEthernet (WSL (Hyper-V firewall)):\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter #2\n   Physical Address. . . . . . . . . : 00-15-5D-A2-0F-F2\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::8563:3655:44b1:2be8%68(Preferred) \n   IPv4 Address. . . . . . . . . . . : 172.22.160.1(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n   DHCPv6 IAID . . . . . . . . . . . : 1140856157\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nUnknown adapter OpenVPN Data Channel Offload:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : OpenVPN Data Channel Offload\n   Physical Address. . . . . . . . . : \n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-28\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Local Area Connection* 2:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter #2\n   Physical Address. . . . . . . . . : C6-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet 5:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Fortinet Virtual Ethernet Adapter (NDIS 6.30)\n   Physical Address. . . . . . . . . : 00-09-0F-FE-00-01\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nWireless LAN adapter Wi-Fi:\n\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Intel(R) Wi-Fi 6E AX211 160MHz\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-27\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   IPv6 Address. . . . . . . . . . . : 2a00:a041:e933:2f00:a924:354e:2960:e725(Preferred) \n   Temporary IPv6 Address. . . . . . : 2a00:a041:e933:2f00:2025:7f8a:58f6:377b(Preferred) \n   Link-local IPv6 Address . . . . . : fe80::f95b:d3a4:c0ec:a347%8(Preferred) \n   IPv4 Address. . . . . . . . . . . : 192.168.1.127(Preferred) \n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Lease Obtained. . . . . . . . . . : Wednesday, June 4, 2025 7:34:10 PM\n   Lease Expires . . . . . . . . . . : Wednesday, June 4, 2025 8:36:23 PM\n   Default Gateway . . . . . . . . . : fe80::da78:7fff:fe16:b6bf%8\n                                       192.168.1.1\n   DHCP Server . . . . . . . . . . . : 192.168.1.1\n   DHCPv6 IAID . . . . . . . . . . . : 130286504\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-29-F5-06-9B-6C-24-08-36-72-73\n   DNS Servers . . . . . . . . . . . : 2a00:a041:e933:2f00:da78:7fff:fe16:b6bf\n                                       213.57.2.5\n                                       213.57.22.5\n                                       2a00:a041:e933:2f00:da78:7fff:fe16:b6bf\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Bluetooth Network Connection:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Bluetooth Device (Personal Area Network)\n   Physical Address. . . . . . . . . : C4-03-A8-00-3D-2B\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n\nEthernet adapter Ethernet:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n   Description . . . . . . . . . . . : Realtek PCIe GbE Family Controller\n   Physical Address. . . . . . . . . : 6C-24-08-36-72-73\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n', 'error': '', 'duration': 0.4886927604675293, 'returncode': 0}
[2025-06-04 19:58:47,884] INFO: Result for command None sent successfully
[2025-06-04 19:58:47,885] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:47,885] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:48,875] INFO: Result for command None sent successfully
[2025-06-04 19:58:48,877] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:48,882] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:50,239] DEBUG: Response status code: 200
[2025-06-04 19:58:50,240] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:50,241] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:50,241] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:50,242] INFO: Fetching commands...
[2025-06-04 19:58:50,242] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:50,243] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:50,996] DEBUG: Response status code: 200
[2025-06-04 19:58:50,998] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:50,998] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:50,999] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:51,000] INFO: Fetching commands...
[2025-06-04 19:58:51,000] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:51,002] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:52,416] DEBUG: Response status code: 200
[2025-06-04 19:58:52,419] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:52,420] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:52,422] INFO: Commands: []
[2025-06-04 19:58:53,122] DEBUG: Response status code: 200
[2025-06-04 19:58:53,123] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:53,128] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:53,181] INFO: Commands: []
[2025-06-04 19:58:54,599] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:54,601] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:55,291] DEBUG: Checking approval status for server 9
[2025-06-04 19:58:55,292] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:56,790] DEBUG: Response status code: 200
[2025-06-04 19:58:56,791] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:56,791] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:56,792] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:56,792] INFO: Fetching commands...
[2025-06-04 19:58:56,793] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:56,793] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:57,482] DEBUG: Response status code: 200
[2025-06-04 19:58:57,486] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:58:57,487] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:58:57,490] INFO: Server is approved and ready to process commands
[2025-06-04 19:58:57,490] INFO: Fetching commands...
[2025-06-04 19:58:57,492] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:58:57,627] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:58:58,881] DEBUG: Response status code: 200
[2025-06-04 19:58:58,882] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:58:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:58:58,882] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:58:58,883] INFO: Commands: []
[2025-06-04 19:59:00,107] DEBUG: Response status code: 200
[2025-06-04 19:59:00,108] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:00,118] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:00,174] INFO: Commands: []
[2025-06-04 19:59:00,954] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:00,954] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:02,482] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:02,488] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:03,167] DEBUG: Response status code: 200
[2025-06-04 19:59:03,168] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:03,169] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:03,170] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:03,171] INFO: Fetching commands...
[2025-06-04 19:59:03,171] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:03,172] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:04,630] DEBUG: Response status code: 200
[2025-06-04 19:59:04,632] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:04,638] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:04,639] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:04,675] INFO: Fetching commands...
[2025-06-04 19:59:04,679] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:04,682] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:05,332] DEBUG: Response status code: 200
[2025-06-04 19:59:05,333] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:05,334] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:05,334] INFO: Commands: []
[2025-06-04 19:59:06,842] DEBUG: Response status code: 200
[2025-06-04 19:59:06,843] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:06,852] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:06,938] INFO: Commands: []
[2025-06-04 19:59:07,438] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:07,438] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:09,065] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:09,066] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:09,616] DEBUG: Response status code: 200
[2025-06-04 19:59:09,617] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:09,617] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:09,617] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:09,618] INFO: Fetching commands...
[2025-06-04 19:59:09,618] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:09,618] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:11,138] DEBUG: Response status code: 200
[2025-06-04 19:59:11,143] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:11,195] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:11,217] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:11,218] INFO: Fetching commands...
[2025-06-04 19:59:11,220] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:11,222] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:12,316] DEBUG: Response status code: 200
[2025-06-04 19:59:12,316] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:12,317] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:12,317] INFO: Commands: []
[2025-06-04 19:59:13,278] DEBUG: Response status code: 200
[2025-06-04 19:59:13,279] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:13,281] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:13,284] INFO: Commands: []
[2025-06-04 19:59:14,710] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:14,710] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:15,432] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:15,434] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:16,768] DEBUG: Response status code: 200
[2025-06-04 19:59:16,768] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:16,768] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:16,769] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:16,769] INFO: Fetching commands...
[2025-06-04 19:59:16,769] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:16,769] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:18,057] DEBUG: Response status code: 200
[2025-06-04 19:59:18,058] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:18,059] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:18,059] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:18,060] INFO: Fetching commands...
[2025-06-04 19:59:18,061] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:18,062] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:18,867] DEBUG: Response status code: 200
[2025-06-04 19:59:18,868] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:18,868] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:18,869] INFO: Commands: []
[2025-06-04 19:59:20,200] DEBUG: Response status code: 200
[2025-06-04 19:59:20,202] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:20,204] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:20,207] INFO: Commands: []
[2025-06-04 19:59:20,986] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:20,987] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:22,277] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:22,279] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:23,206] DEBUG: Response status code: 200
[2025-06-04 19:59:23,207] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:23,208] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:23,209] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:23,210] INFO: Fetching commands...
[2025-06-04 19:59:23,211] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:23,212] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:24,333] DEBUG: Response status code: 200
[2025-06-04 19:59:24,335] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:24,336] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:24,337] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:24,338] INFO: Fetching commands...
[2025-06-04 19:59:24,340] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:24,342] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:26,297] DEBUG: Response status code: 200
[2025-06-04 19:59:26,298] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:26,298] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:26,300] INFO: Commands: []
[2025-06-04 19:59:28,154] DEBUG: Response status code: 200
[2025-06-04 19:59:28,159] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:28,401] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:28,404] INFO: Commands: []
[2025-06-04 19:59:28,787] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:28,788] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:30,650] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:30,652] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:30,861] DEBUG: Response status code: 200
[2025-06-04 19:59:30,862] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:30,863] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:30,863] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:30,863] INFO: Fetching commands...
[2025-06-04 19:59:30,864] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:30,864] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:32,802] DEBUG: Response status code: 200
[2025-06-04 19:59:32,804] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:32,805] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:32,806] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:32,807] INFO: Fetching commands...
[2025-06-04 19:59:32,808] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:32,827] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:33,128] DEBUG: Response status code: 200
[2025-06-04 19:59:33,130] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:33,130] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:33,131] INFO: Commands: []
[2025-06-04 19:59:35,283] DEBUG: Response status code: 200
[2025-06-04 19:59:35,290] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:35,297] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:35,358] INFO: Commands: []
[2025-06-04 19:59:35,432] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:35,434] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:37,448] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:37,450] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:37,843] DEBUG: Response status code: 200
[2025-06-04 19:59:37,843] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:37,844] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:37,844] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:37,844] INFO: Fetching commands...
[2025-06-04 19:59:37,844] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:37,845] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:39,777] DEBUG: Response status code: 200
[2025-06-04 19:59:39,778] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:39,783] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:39,785] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:39,790] INFO: Fetching commands...
[2025-06-04 19:59:39,791] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:39,794] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:39,896] DEBUG: Response status code: 200
[2025-06-04 19:59:39,897] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:39,897] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:39,898] INFO: Commands: []
[2025-06-04 19:59:41,915] DEBUG: Response status code: 200
[2025-06-04 19:59:41,916] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:41,919] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:41,925] INFO: Commands: []
[2025-06-04 19:59:42,092] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:42,092] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:43,978] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:43,979] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:44,148] DEBUG: Response status code: 200
[2025-06-04 19:59:44,148] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:44,149] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:44,149] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:44,149] INFO: Fetching commands...
[2025-06-04 19:59:44,149] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:44,150] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:46,493] DEBUG: Response status code: 200
[2025-06-04 19:59:46,494] DEBUG: Response status code: 200
[2025-06-04 19:59:46,494] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:46,494] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:46,495] INFO: Commands: []
[2025-06-04 19:59:46,615] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:46,617] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:46,618] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:46,657] INFO: Fetching commands...
[2025-06-04 19:59:46,673] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:46,681] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:48,681] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:48,681] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:48,844] DEBUG: Response status code: 200
[2025-06-04 19:59:48,845] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:48,854] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:48,856] INFO: Commands: []
[2025-06-04 19:59:50,735] DEBUG: Response status code: 200
[2025-06-04 19:59:50,735] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:50,736] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:50,736] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:50,736] INFO: Fetching commands...
[2025-06-04 19:59:50,737] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:50,737] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:51,003] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:51,005] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:52,882] DEBUG: Response status code: 200
[2025-06-04 19:59:52,883] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:52,883] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:52,885] INFO: Commands: []
[2025-06-04 19:59:53,056] DEBUG: Response status code: 200
[2025-06-04 19:59:53,057] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:53,060] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:53,060] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:53,062] INFO: Fetching commands...
[2025-06-04 19:59:53,134] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:53,181] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:54,922] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:54,922] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:55,254] DEBUG: Response status code: 200
[2025-06-04 19:59:55,255] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:55,257] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:55,259] INFO: Commands: []
[2025-06-04 19:59:57,167] DEBUG: Response status code: 200
[2025-06-04 19:59:57,168] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:57,169] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:57,169] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:57,169] INFO: Fetching commands...
[2025-06-04 19:59:57,169] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:57,170] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:57,684] DEBUG: Checking approval status for server 9
[2025-06-04 19:59:57,684] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 19:59:59,227] DEBUG: Response status code: 200
[2025-06-04 19:59:59,227] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 19:59:59,228] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 19:59:59,229] INFO: Commands: []
[2025-06-04 19:59:59,779] DEBUG: Response status code: 200
[2025-06-04 19:59:59,781] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 16:59:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 19:59:59,782] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 19:59:59,783] INFO: Server is approved and ready to process commands
[2025-06-04 19:59:59,784] INFO: Fetching commands...
[2025-06-04 19:59:59,789] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 19:59:59,791] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:01,297] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:01,297] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:01,962] DEBUG: Response status code: 200
[2025-06-04 20:00:01,974] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:01,980] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:02,035] INFO: Commands: []
[2025-06-04 20:00:03,399] DEBUG: Response status code: 200
[2025-06-04 20:00:03,399] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:03 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:03,399] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:03,400] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:03,400] INFO: Fetching commands...
[2025-06-04 20:00:03,400] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:03,402] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:04,118] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:04,119] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:05,492] DEBUG: Response status code: 200
[2025-06-04 20:00:05,492] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:05,493] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:05,493] INFO: Commands: []
[2025-06-04 20:00:06,280] DEBUG: Response status code: 200
[2025-06-04 20:00:06,280] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:06,281] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:06,281] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:06,284] INFO: Fetching commands...
[2025-06-04 20:00:06,286] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:06,287] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:07,658] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:07,659] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:08,720] DEBUG: Response status code: 200
[2025-06-04 20:00:08,722] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:08,726] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:08,855] INFO: Commands: []
[2025-06-04 20:00:09,868] DEBUG: Response status code: 200
[2025-06-04 20:00:09,868] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:09,869] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:09,869] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:09,869] INFO: Fetching commands...
[2025-06-04 20:00:09,870] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:09,870] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:11,005] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:11,006] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:12,002] DEBUG: Response status code: 200
[2025-06-04 20:00:12,003] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:12,005] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:12,008] INFO: Commands: []
[2025-06-04 20:00:13,109] DEBUG: Response status code: 200
[2025-06-04 20:00:13,110] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:13,119] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:13,121] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:13,122] INFO: Fetching commands...
[2025-06-04 20:00:13,125] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:13,134] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:14,099] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:14,100] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:15,235] DEBUG: Response status code: 200
[2025-06-04 20:00:15,236] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:15,242] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:15,248] INFO: Commands: []
[2025-06-04 20:00:16,197] DEBUG: Response status code: 200
[2025-06-04 20:00:16,197] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:16,198] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:16,198] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:16,198] INFO: Fetching commands...
[2025-06-04 20:00:16,199] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:16,199] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:17,368] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:17,369] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:18,380] DEBUG: Response status code: 200
[2025-06-04 20:00:18,380] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:18,381] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:18,382] INFO: Commands: []
[2025-06-04 20:00:19,706] DEBUG: Response status code: 200
[2025-06-04 20:00:19,710] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:19,719] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:19,841] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:19,846] INFO: Fetching commands...
[2025-06-04 20:00:19,908] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:20,002] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:20,925] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:20,926] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:22,120] DEBUG: Response status code: 200
[2025-06-04 20:00:22,121] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:22,124] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:22,128] INFO: Commands: []
[2025-06-04 20:00:22,987] DEBUG: Response status code: 200
[2025-06-04 20:00:22,987] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:22,989] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:22,991] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:22,991] INFO: Fetching commands...
[2025-06-04 20:00:22,993] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:22,993] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:24,223] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:24,224] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:25,125] DEBUG: Response status code: 200
[2025-06-04 20:00:25,126] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:25,127] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:25,129] INFO: Commands: []
[2025-06-04 20:00:26,340] DEBUG: Response status code: 200
[2025-06-04 20:00:26,342] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:26,343] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:26,344] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:26,346] INFO: Fetching commands...
[2025-06-04 20:00:26,347] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:26,348] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:27,180] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:27,181] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:29,192] DEBUG: Response status code: 200
[2025-06-04 20:00:29,193] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:29,270] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:29,276] INFO: Commands: []
[2025-06-04 20:00:29,439] DEBUG: Response status code: 200
[2025-06-04 20:00:29,440] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:29,441] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:29,441] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:29,442] INFO: Fetching commands...
[2025-06-04 20:00:29,443] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:29,443] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:31,376] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:31,377] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:31,661] DEBUG: Response status code: 200
[2025-06-04 20:00:31,661] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:31,662] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:31,665] INFO: Commands: []
[2025-06-04 20:00:33,850] DEBUG: Response status code: 200
[2025-06-04 20:00:33,851] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:33,853] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:33,854] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:33,856] INFO: Fetching commands...
[2025-06-04 20:00:33,910] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:33,910] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:33,991] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:34,026] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:35,998] DEBUG: Response status code: 200
[2025-06-04 20:00:35,999] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:35,999] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:36,001] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:36,001] INFO: Fetching commands...
[2025-06-04 20:00:36,001] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:36,002] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:36,112] DEBUG: Response status code: 200
[2025-06-04 20:00:36,113] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:36,115] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:36,119] INFO: Commands: []
[2025-06-04 20:00:38,088] DEBUG: Response status code: 200
[2025-06-04 20:00:38,089] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:38,089] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:38,090] INFO: Commands: []
[2025-06-04 20:00:38,273] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:38,275] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:40,203] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:40,203] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:40,380] DEBUG: Response status code: 200
[2025-06-04 20:00:40,382] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:40,384] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:40,385] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:40,386] INFO: Fetching commands...
[2025-06-04 20:00:40,386] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:40,392] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:42,417] DEBUG: Response status code: 200
[2025-06-04 20:00:42,417] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:42,418] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:42,418] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:42,419] INFO: Fetching commands...
[2025-06-04 20:00:42,419] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:42,419] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:42,575] DEBUG: Response status code: 200
[2025-06-04 20:00:42,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:42,584] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:42,585] INFO: Commands: []
[2025-06-04 20:00:44,810] DEBUG: Response status code: 200
[2025-06-04 20:00:44,810] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:44,811] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:44,812] INFO: Commands: []
[2025-06-04 20:00:44,877] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:44,879] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:46,928] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:46,929] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:47,022] DEBUG: Response status code: 200
[2025-06-04 20:00:47,026] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:47,027] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:47,028] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:47,030] INFO: Fetching commands...
[2025-06-04 20:00:47,032] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:47,035] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:49,136] DEBUG: Response status code: 200
[2025-06-04 20:00:49,137] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:49,137] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:49,137] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:49,138] INFO: Fetching commands...
[2025-06-04 20:00:49,138] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:49,138] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:49,360] DEBUG: Response status code: 200
[2025-06-04 20:00:49,361] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:49,363] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:49,365] INFO: Commands: []
[2025-06-04 20:00:51,242] DEBUG: Response status code: 200
[2025-06-04 20:00:51,243] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:51,243] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:51,244] INFO: Commands: []
[2025-06-04 20:00:51,804] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:51,806] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:53,396] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:53,396] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:54,012] DEBUG: Response status code: 200
[2025-06-04 20:00:54,013] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:54,015] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:54,017] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:54,018] INFO: Fetching commands...
[2025-06-04 20:00:54,020] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:54,021] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:55,492] DEBUG: Response status code: 200
[2025-06-04 20:00:55,493] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:00:55,494] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:00:55,494] INFO: Server is approved and ready to process commands
[2025-06-04 20:00:55,496] INFO: Fetching commands...
[2025-06-04 20:00:55,496] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:00:55,496] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:56,106] DEBUG: Response status code: 200
[2025-06-04 20:00:56,108] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:56,109] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:56,112] INFO: Commands: []
[2025-06-04 20:00:57,826] DEBUG: Response status code: 200
[2025-06-04 20:00:57,827] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:00:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:00:57,828] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:00:57,829] INFO: Commands: []
[2025-06-04 20:00:58,157] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:58,158] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:00:59,908] DEBUG: Checking approval status for server 9
[2025-06-04 20:00:59,910] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:00,206] DEBUG: Response status code: 200
[2025-06-04 20:01:00,207] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:00,215] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:00,224] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:00,226] INFO: Fetching commands...
[2025-06-04 20:01:00,229] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:00,237] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:01,979] DEBUG: Response status code: 200
[2025-06-04 20:01:01,979] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:01,981] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:01,981] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:01,981] INFO: Fetching commands...
[2025-06-04 20:01:01,982] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:01,982] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:02,294] DEBUG: Response status code: 200
[2025-06-04 20:01:02,296] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:02,297] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:02,301] INFO: Commands: []
[2025-06-04 20:01:04,199] DEBUG: Response status code: 200
[2025-06-04 20:01:04,200] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:04,202] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:04,203] INFO: Commands: []
[2025-06-04 20:01:04,643] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:04,650] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:06,262] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:06,263] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:06,821] DEBUG: Response status code: 200
[2025-06-04 20:01:06,822] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:06,824] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:06,825] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:06,826] INFO: Fetching commands...
[2025-06-04 20:01:06,827] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:06,830] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:08,345] DEBUG: Response status code: 200
[2025-06-04 20:01:08,346] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:08,346] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:08,347] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:08,347] INFO: Fetching commands...
[2025-06-04 20:01:08,347] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:08,347] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:08,934] DEBUG: Response status code: 200
[2025-06-04 20:01:08,935] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:08,936] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:08,939] INFO: Commands: []
[2025-06-04 20:01:10,415] DEBUG: Response status code: 200
[2025-06-04 20:01:10,416] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:10,418] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:10,424] INFO: Commands: []
[2025-06-04 20:01:11,108] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:11,110] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:12,622] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:12,623] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:13,176] DEBUG: Response status code: 200
[2025-06-04 20:01:13,178] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:13,180] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:13,182] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:13,185] INFO: Fetching commands...
[2025-06-04 20:01:13,186] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:13,189] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:14,751] DEBUG: Response status code: 200
[2025-06-04 20:01:14,751] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:14,752] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:14,753] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:14,753] INFO: Fetching commands...
[2025-06-04 20:01:14,753] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:14,755] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:15,460] DEBUG: Response status code: 200
[2025-06-04 20:01:15,463] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:15,466] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:15,496] INFO: Commands: []
[2025-06-04 20:01:16,881] DEBUG: Response status code: 200
[2025-06-04 20:01:16,881] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:16,881] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:16,883] INFO: Commands: []
[2025-06-04 20:01:17,642] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:17,644] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:18,969] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:18,970] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:19,740] DEBUG: Response status code: 200
[2025-06-04 20:01:19,742] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:19,743] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:19,745] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:19,746] INFO: Fetching commands...
[2025-06-04 20:01:19,747] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:19,749] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:21,074] DEBUG: Response status code: 200
[2025-06-04 20:01:21,074] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:21,077] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:21,079] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:21,079] INFO: Fetching commands...
[2025-06-04 20:01:21,080] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:21,080] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:21,866] DEBUG: Response status code: 200
[2025-06-04 20:01:21,867] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:21,868] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:21,869] INFO: Commands: []
[2025-06-04 20:01:23,134] DEBUG: Response status code: 200
[2025-06-04 20:01:23,135] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:23,136] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:23,137] INFO: Commands: []
[2025-06-04 20:01:23,922] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:23,923] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:25,224] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:25,224] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:25,983] DEBUG: Response status code: 200
[2025-06-04 20:01:25,984] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:25,994] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:25,995] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:25,998] INFO: Fetching commands...
[2025-06-04 20:01:26,111] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:26,250] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:27,318] DEBUG: Response status code: 200
[2025-06-04 20:01:27,319] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:27,319] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:27,320] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:27,320] INFO: Fetching commands...
[2025-06-04 20:01:27,320] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:27,321] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:31,208] DEBUG: Response status code: 200
[2025-06-04 20:01:31,210] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:31,212] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:31,398] INFO: Commands: []
[2025-06-04 20:01:32,186] DEBUG: Response status code: 200
[2025-06-04 20:01:32,186] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:32,187] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:32,187] INFO: Commands: []
[2025-06-04 20:01:33,736] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:33,738] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:34,282] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:34,283] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:35,860] DEBUG: Response status code: 200
[2025-06-04 20:01:35,866] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:35,876] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:35,927] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:35,947] INFO: Fetching commands...
[2025-06-04 20:01:35,957] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:35,974] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:36,335] DEBUG: Response status code: 200
[2025-06-04 20:01:36,336] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:36,336] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:36,336] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:36,336] INFO: Fetching commands...
[2025-06-04 20:01:36,337] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:36,337] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:38,182] DEBUG: Response status code: 200
[2025-06-04 20:01:38,191] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:38,203] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:38,303] INFO: Commands: []
[2025-06-04 20:01:38,475] DEBUG: Response status code: 200
[2025-06-04 20:01:38,477] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:38,479] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:38,485] INFO: Commands: []
[2025-06-04 20:01:40,433] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:40,435] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:40,734] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:40,735] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:42,673] DEBUG: Response status code: 200
[2025-06-04 20:01:42,676] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:42,680] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:42,680] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:42,681] INFO: Fetching commands...
[2025-06-04 20:01:42,689] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:42,691] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:42,849] DEBUG: Response status code: 200
[2025-06-04 20:01:42,852] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:42,852] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:42,852] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:42,853] INFO: Fetching commands...
[2025-06-04 20:01:42,853] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:42,854] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:44,760] DEBUG: Response status code: 200
[2025-06-04 20:01:44,770] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:44,782] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:44,821] INFO: Commands: []
[2025-06-04 20:01:45,023] DEBUG: Response status code: 200
[2025-06-04 20:01:45,023] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:45,026] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:45,027] INFO: Commands: []
[2025-06-04 20:01:46,920] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:46,921] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:47,066] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:47,067] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:49,303] DEBUG: Response status code: 200
[2025-06-04 20:01:49,308] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:49,314] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:49,367] DEBUG: Response status code: 200
[2025-06-04 20:01:49,368] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:49,368] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:49,369] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:49,370] INFO: Fetching commands...
[2025-06-04 20:01:49,374] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:49,375] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:49,383] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:49,404] INFO: Fetching commands...
[2025-06-04 20:01:49,410] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:49,415] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:51,464] DEBUG: Response status code: 200
[2025-06-04 20:01:51,464] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:51,464] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:51,465] INFO: Commands: []
[2025-06-04 20:01:51,507] DEBUG: Response status code: 200
[2025-06-04 20:01:51,508] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:51,513] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:51,519] INFO: Commands: []
[2025-06-04 20:01:53,603] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:53,603] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:53,605] DEBUG: Checking approval status for server 9
[2025-06-04 20:01:53,644] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:55,762] DEBUG: Response status code: 200
[2025-06-04 20:01:55,762] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:55,763] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:55,764] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:55,764] INFO: Fetching commands...
[2025-06-04 20:01:55,764] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:55,764] DEBUG: Response status code: 200
[2025-06-04 20:01:55,764] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:55,766] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:01:55,771] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:01:55,773] INFO: Server is approved and ready to process commands
[2025-06-04 20:01:55,803] INFO: Fetching commands...
[2025-06-04 20:01:55,907] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:01:55,910] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:01:57,854] DEBUG: Response status code: 200
[2025-06-04 20:01:57,855] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:57,856] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:57,857] INFO: Commands: []
[2025-06-04 20:01:57,945] DEBUG: Response status code: 200
[2025-06-04 20:01:57,946] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:01:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:01:57,947] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:01:57,950] INFO: Commands: []
[2025-06-04 20:02:00,340] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:00,342] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:00,346] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:00,352] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:02,430] DEBUG: Response status code: 200
[2025-06-04 20:02:02,430] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:02,431] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:02,431] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:02,431] INFO: Fetching commands...
[2025-06-04 20:02:02,432] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:02,432] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:02,459] DEBUG: Response status code: 200
[2025-06-04 20:02:02,460] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:02,463] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:02,464] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:02,465] INFO: Fetching commands...
[2025-06-04 20:02:02,503] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:02,527] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:04,874] DEBUG: Response status code: 200
[2025-06-04 20:02:04,874] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:04,876] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:04,877] INFO: Commands: []
[2025-06-04 20:02:04,905] DEBUG: Response status code: 200
[2025-06-04 20:02:04,906] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:04,907] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:04,909] INFO: Commands: []
[2025-06-04 20:02:07,087] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:07,091] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:07,180] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:07,182] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:09,180] DEBUG: Response status code: 200
[2025-06-04 20:02:09,180] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:09,181] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:09,181] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:09,182] INFO: Fetching commands...
[2025-06-04 20:02:09,182] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:09,183] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:09,241] DEBUG: Response status code: 200
[2025-06-04 20:02:09,242] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:09,243] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:09,244] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:09,245] INFO: Fetching commands...
[2025-06-04 20:02:09,246] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:09,248] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:11,237] DEBUG: Response status code: 200
[2025-06-04 20:02:11,238] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:11,239] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:11,241] INFO: Commands: []
[2025-06-04 20:02:11,306] DEBUG: Response status code: 200
[2025-06-04 20:02:11,307] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:11,309] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:11,310] INFO: Commands: []
[2025-06-04 20:02:13,288] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:13,289] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:13,360] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:13,361] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:15,384] DEBUG: Response status code: 200
[2025-06-04 20:02:15,385] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:15,386] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:15,387] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:15,387] INFO: Fetching commands...
[2025-06-04 20:02:15,388] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:15,388] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:15,476] DEBUG: Response status code: 200
[2025-06-04 20:02:15,478] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:15,480] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:15,481] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:15,482] INFO: Fetching commands...
[2025-06-04 20:02:15,490] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:15,492] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:17,473] DEBUG: Response status code: 200
[2025-06-04 20:02:17,475] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:17,478] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:17,480] INFO: Commands: []
[2025-06-04 20:02:17,562] DEBUG: Response status code: 200
[2025-06-04 20:02:17,564] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:17,564] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:17,566] INFO: Commands: []
[2025-06-04 20:02:19,654] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:19,654] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:19,726] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:19,727] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:21,991] DEBUG: Response status code: 200
[2025-06-04 20:02:21,991] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:21,992] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:21,993] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:21,993] INFO: Fetching commands...
[2025-06-04 20:02:21,993] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:21,994] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:22,186] DEBUG: Response status code: 200
[2025-06-04 20:02:22,186] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:22,189] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:22,190] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:22,191] INFO: Fetching commands...
[2025-06-04 20:02:22,290] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:22,404] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:24,059] DEBUG: Response status code: 200
[2025-06-04 20:02:24,063] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:24,063] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:24,064] INFO: Commands: []
[2025-06-04 20:02:24,508] DEBUG: Response status code: 200
[2025-06-04 20:02:24,510] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:24,515] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:24,517] INFO: Commands: []
[2025-06-04 20:02:26,097] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:26,097] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:26,738] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:26,739] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:28,944] DEBUG: Response status code: 200
[2025-06-04 20:02:28,970] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:28,977] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:29,033] DEBUG: Response status code: 200
[2025-06-04 20:02:29,033] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:29,033] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:29,034] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:29,034] INFO: Fetching commands...
[2025-06-04 20:02:29,034] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:29,035] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:29,366] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:29,571] INFO: Fetching commands...
[2025-06-04 20:02:30,362] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:31,624] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:32,791] DEBUG: Response status code: 200
[2025-06-04 20:02:32,793] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:32,793] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:32,794] INFO: Commands: []
[2025-06-04 20:02:34,187] DEBUG: Response status code: 200
[2025-06-04 20:02:34,191] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:34,202] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:34,278] INFO: Commands: []
[2025-06-04 20:02:34,963] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:34,964] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:36,466] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:36,468] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:37,095] DEBUG: Response status code: 200
[2025-06-04 20:02:37,095] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:37,096] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:37,096] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:37,097] INFO: Fetching commands...
[2025-06-04 20:02:37,097] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:37,097] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:38,656] DEBUG: Response status code: 200
[2025-06-04 20:02:38,658] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:38,659] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:38,659] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:38,660] INFO: Fetching commands...
[2025-06-04 20:02:38,752] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:38,796] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:39,279] DEBUG: Response status code: 200
[2025-06-04 20:02:39,280] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:39,281] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:39,282] INFO: Commands: []
[2025-06-04 20:02:40,938] DEBUG: Response status code: 200
[2025-06-04 20:02:40,939] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:40,942] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:40,945] INFO: Commands: []
[2025-06-04 20:02:41,460] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:41,460] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:43,122] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:43,124] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:43,576] DEBUG: Response status code: 200
[2025-06-04 20:02:43,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:43,577] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:43,578] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:43,578] INFO: Fetching commands...
[2025-06-04 20:02:43,578] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:43,579] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:45,485] DEBUG: Response status code: 200
[2025-06-04 20:02:45,487] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:45,576] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:45,592] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:45,674] INFO: Fetching commands...
[2025-06-04 20:02:45,725] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:45,740] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:45,772] DEBUG: Response status code: 200
[2025-06-04 20:02:45,772] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:45,773] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:45,773] INFO: Commands: []
[2025-06-04 20:02:47,876] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:47,876] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:47,893] DEBUG: Response status code: 200
[2025-06-04 20:02:47,894] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:47,901] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:47,939] INFO: Commands: []
[2025-06-04 20:02:49,945] DEBUG: Response status code: 200
[2025-06-04 20:02:49,946] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:49,946] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:49,947] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:49,947] INFO: Fetching commands...
[2025-06-04 20:02:49,947] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:49,947] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:50,014] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:50,015] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:52,044] DEBUG: Response status code: 200
[2025-06-04 20:02:52,045] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:52,045] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:52,046] INFO: Commands: []
[2025-06-04 20:02:52,108] DEBUG: Response status code: 200
[2025-06-04 20:02:52,109] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:52,112] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:52,112] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:52,118] INFO: Fetching commands...
[2025-06-04 20:02:52,128] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:52,129] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:54,131] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:54,132] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:54,233] DEBUG: Response status code: 200
[2025-06-04 20:02:54,235] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:54,238] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:54,247] INFO: Commands: []
[2025-06-04 20:02:56,203] DEBUG: Response status code: 200
[2025-06-04 20:02:56,203] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:56,205] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:56,205] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:56,206] INFO: Fetching commands...
[2025-06-04 20:02:56,206] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:56,206] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:56,316] DEBUG: Checking approval status for server 9
[2025-06-04 20:02:56,317] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:02:58,243] DEBUG: Response status code: 200
[2025-06-04 20:02:58,243] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:02:58,244] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:02:58,245] INFO: Commands: []
[2025-06-04 20:02:58,415] DEBUG: Response status code: 200
[2025-06-04 20:02:58,418] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:02:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:02:58,423] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:02:58,426] INFO: Server is approved and ready to process commands
[2025-06-04 20:02:58,433] INFO: Fetching commands...
[2025-06-04 20:02:58,441] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:02:58,442] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:00,346] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:00,346] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:00,673] DEBUG: Response status code: 200
[2025-06-04 20:03:00,674] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:00,683] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:00,738] INFO: Commands: []
[2025-06-04 20:03:02,479] DEBUG: Response status code: 200
[2025-06-04 20:03:02,479] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:02,480] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:02,480] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:02,481] INFO: Fetching commands...
[2025-06-04 20:03:02,481] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:02,481] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:02,870] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:02,872] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:04,565] DEBUG: Response status code: 200
[2025-06-04 20:03:04,566] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:04,566] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:04,568] INFO: Commands: []
[2025-06-04 20:03:04,960] DEBUG: Response status code: 200
[2025-06-04 20:03:04,961] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:04,964] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:04,965] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:04,972] INFO: Fetching commands...
[2025-06-04 20:03:04,974] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:04,978] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:07,131] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:07,148] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:07,352] DEBUG: Response status code: 200
[2025-06-04 20:03:07,353] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:07,355] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:07,373] INFO: Commands: []
[2025-06-04 20:03:09,225] DEBUG: Response status code: 200
[2025-06-04 20:03:09,226] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:09,227] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:09,227] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:09,228] INFO: Fetching commands...
[2025-06-04 20:03:09,228] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:09,229] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:09,431] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:09,432] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:11,379] DEBUG: Response status code: 200
[2025-06-04 20:03:11,379] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:11,379] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:11,381] INFO: Commands: []
[2025-06-04 20:03:11,594] DEBUG: Response status code: 200
[2025-06-04 20:03:11,595] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:11,601] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:11,602] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:11,604] INFO: Fetching commands...
[2025-06-04 20:03:11,605] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:11,636] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:13,463] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:13,463] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:13,827] DEBUG: Response status code: 200
[2025-06-04 20:03:13,828] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:13,830] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:13,832] INFO: Commands: []
[2025-06-04 20:03:15,543] DEBUG: Response status code: 200
[2025-06-04 20:03:15,543] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:15,543] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:15,544] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:15,544] INFO: Fetching commands...
[2025-06-04 20:03:15,544] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:15,544] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:15,873] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:15,874] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:17,723] DEBUG: Response status code: 200
[2025-06-04 20:03:17,723] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:17,724] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:17,725] INFO: Commands: []
[2025-06-04 20:03:18,024] DEBUG: Response status code: 200
[2025-06-04 20:03:18,025] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:18,037] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:18,049] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:18,145] INFO: Fetching commands...
[2025-06-04 20:03:18,201] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:18,219] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:19,778] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:19,778] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:20,284] DEBUG: Response status code: 200
[2025-06-04 20:03:20,285] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:20,287] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:20,288] INFO: Commands: []
[2025-06-04 20:03:21,851] DEBUG: Response status code: 200
[2025-06-04 20:03:21,851] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:21,852] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:21,853] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:21,853] INFO: Fetching commands...
[2025-06-04 20:03:21,853] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:21,854] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:22,361] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:22,362] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:23,937] DEBUG: Response status code: 200
[2025-06-04 20:03:23,937] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:23,938] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:23,939] INFO: Commands: []
[2025-06-04 20:03:24,460] DEBUG: Response status code: 200
[2025-06-04 20:03:24,461] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:24,463] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:24,464] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:24,465] INFO: Fetching commands...
[2025-06-04 20:03:24,467] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:24,468] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:25,990] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:25,991] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:26,552] DEBUG: Response status code: 200
[2025-06-04 20:03:26,554] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:26,560] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:26,654] INFO: Commands: []
[2025-06-04 20:03:28,101] DEBUG: Response status code: 200
[2025-06-04 20:03:28,101] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:28,102] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:28,102] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:28,103] INFO: Fetching commands...
[2025-06-04 20:03:28,103] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:28,104] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:29,215] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:29,568] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:30,232] DEBUG: Response status code: 200
[2025-06-04 20:03:30,232] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:30,233] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:30,233] INFO: Commands: []
[2025-06-04 20:03:32,498] DEBUG: Response status code: 200
[2025-06-04 20:03:32,499] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:32,501] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:32,502] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:32,507] INFO: Fetching commands...
[2025-06-04 20:03:32,807] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:33,569] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:34,428] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:34,429] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:35,843] DEBUG: Response status code: 200
[2025-06-04 20:03:35,844] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:35,847] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:35,849] INFO: Commands: []
[2025-06-04 20:03:36,493] DEBUG: Response status code: 200
[2025-06-04 20:03:36,494] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:36,494] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:36,495] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:36,496] INFO: Fetching commands...
[2025-06-04 20:03:36,497] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:36,497] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:37,934] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:37,935] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:38,556] DEBUG: Response status code: 200
[2025-06-04 20:03:38,557] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:38,558] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:38,559] INFO: Commands: []
[2025-06-04 20:03:40,911] DEBUG: Response status code: 200
[2025-06-04 20:03:40,912] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:40,913] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:40,914] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:40,916] INFO: Fetching commands...
[2025-06-04 20:03:40,918] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:40,923] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:41,055] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:41,056] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:43,154] DEBUG: Response status code: 200
[2025-06-04 20:03:43,154] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:43,155] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:43,156] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:43,156] INFO: Fetching commands...
[2025-06-04 20:03:43,156] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:43,157] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:43,420] DEBUG: Response status code: 200
[2025-06-04 20:03:43,421] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:43,423] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:43,424] INFO: Commands: []
[2025-06-04 20:03:45,216] DEBUG: Response status code: 200
[2025-06-04 20:03:45,216] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:45,218] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:45,219] INFO: Commands: []
[2025-06-04 20:03:45,474] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:45,475] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:47,339] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:47,340] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:47,627] DEBUG: Response status code: 200
[2025-06-04 20:03:47,628] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:47,630] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:47,631] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:47,632] INFO: Fetching commands...
[2025-06-04 20:03:47,633] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:47,637] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:49,521] DEBUG: Response status code: 200
[2025-06-04 20:03:49,523] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:49,524] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:49,525] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:49,527] INFO: Fetching commands...
[2025-06-04 20:03:49,527] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:49,527] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:49,748] DEBUG: Response status code: 200
[2025-06-04 20:03:49,751] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:49,753] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:49,756] INFO: Commands: []
[2025-06-04 20:03:51,740] DEBUG: Response status code: 200
[2025-06-04 20:03:51,741] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:51,742] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:51,743] INFO: Commands: []
[2025-06-04 20:03:51,893] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:51,894] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:53,816] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:53,816] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:53,958] DEBUG: Response status code: 200
[2025-06-04 20:03:53,960] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:53,961] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:53,962] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:53,967] INFO: Fetching commands...
[2025-06-04 20:03:53,968] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:53,969] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:55,939] DEBUG: Response status code: 200
[2025-06-04 20:03:55,939] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:03:55,939] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:03:55,940] INFO: Server is approved and ready to process commands
[2025-06-04 20:03:55,940] INFO: Fetching commands...
[2025-06-04 20:03:55,940] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:03:55,940] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:03:56,041] DEBUG: Response status code: 200
[2025-06-04 20:03:56,042] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:56,044] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:56,045] INFO: Commands: []
[2025-06-04 20:03:58,040] DEBUG: Response status code: 200
[2025-06-04 20:03:58,040] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:03:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:03:58,043] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:03:58,044] INFO: Commands: []
[2025-06-04 20:03:58,108] DEBUG: Checking approval status for server 9
[2025-06-04 20:03:58,109] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:00,225] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:00,225] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:00,258] DEBUG: Response status code: 200
[2025-06-04 20:04:00,259] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:00,262] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:00,262] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:00,263] INFO: Fetching commands...
[2025-06-04 20:04:00,265] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:00,267] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:02,280] DEBUG: Response status code: 200
[2025-06-04 20:04:02,280] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:02,281] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:02,284] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:02,284] INFO: Fetching commands...
[2025-06-04 20:04:02,285] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:02,285] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:02,337] DEBUG: Response status code: 200
[2025-06-04 20:04:02,338] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:02,340] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:02,342] INFO: Commands: []
[2025-06-04 20:04:04,863] DEBUG: Response status code: 200
[2025-06-04 20:04:04,864] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:04,864] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:04,864] INFO: Commands: []
[2025-06-04 20:04:05,136] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:05,137] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:06,957] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:06,958] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:07,219] DEBUG: Response status code: 200
[2025-06-04 20:04:07,220] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:07,222] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:07,223] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:07,224] INFO: Fetching commands...
[2025-06-04 20:04:07,226] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:07,226] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:09,034] DEBUG: Response status code: 200
[2025-06-04 20:04:09,035] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:09,036] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:09,037] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:09,037] INFO: Fetching commands...
[2025-06-04 20:04:09,039] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:09,040] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:09,296] DEBUG: Response status code: 200
[2025-06-04 20:04:09,298] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:09,298] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:09,300] INFO: Commands: []
[2025-06-04 20:04:11,194] DEBUG: Response status code: 200
[2025-06-04 20:04:11,194] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:11,195] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:11,196] INFO: Commands: []
[2025-06-04 20:04:11,376] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:11,381] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:13,286] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:13,286] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:13,490] DEBUG: Response status code: 200
[2025-06-04 20:04:13,492] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:13,496] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:13,557] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:13,562] INFO: Fetching commands...
[2025-06-04 20:04:13,566] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:13,567] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:15,336] DEBUG: Response status code: 200
[2025-06-04 20:04:15,337] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:15,338] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:15,338] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:15,339] INFO: Fetching commands...
[2025-06-04 20:04:15,339] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:15,339] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:15,662] DEBUG: Response status code: 200
[2025-06-04 20:04:15,663] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:15,673] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:15,681] INFO: Commands: []
[2025-06-04 20:04:17,417] DEBUG: Response status code: 200
[2025-06-04 20:04:17,417] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:17,418] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:17,420] INFO: Commands: []
[2025-06-04 20:04:17,834] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:17,835] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:19,474] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:19,475] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:20,108] DEBUG: Response status code: 200
[2025-06-04 20:04:20,109] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:20,110] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:20,111] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:20,113] INFO: Fetching commands...
[2025-06-04 20:04:20,131] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:20,140] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:21,573] DEBUG: Response status code: 200
[2025-06-04 20:04:21,574] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:21,575] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:21,575] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:21,576] INFO: Fetching commands...
[2025-06-04 20:04:21,577] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:21,577] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:22,262] DEBUG: Response status code: 200
[2025-06-04 20:04:22,264] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:22,273] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:22,293] INFO: Commands: []
[2025-06-04 20:04:23,720] DEBUG: Response status code: 200
[2025-06-04 20:04:23,720] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:23,721] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:23,723] INFO: Commands: []
[2025-06-04 20:04:24,404] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:24,405] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:25,854] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:25,855] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:26,475] DEBUG: Response status code: 200
[2025-06-04 20:04:26,477] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:26,480] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:26,482] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:26,483] INFO: Fetching commands...
[2025-06-04 20:04:26,489] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:26,493] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:27,928] DEBUG: Response status code: 200
[2025-06-04 20:04:27,929] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:27,930] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:27,930] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:27,931] INFO: Fetching commands...
[2025-06-04 20:04:27,931] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:27,932] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:28,583] DEBUG: Response status code: 200
[2025-06-04 20:04:28,584] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:28,586] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:28,589] INFO: Commands: []
[2025-06-04 20:04:30,032] DEBUG: Response status code: 200
[2025-06-04 20:04:30,036] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:30,037] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:30,039] INFO: Commands: []
[2025-06-04 20:04:30,704] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:30,705] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:32,102] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:32,102] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:34,719] DEBUG: Response status code: 200
[2025-06-04 20:04:34,720] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:34,736] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:34,764] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:34,787] DEBUG: Response status code: 200
[2025-06-04 20:04:34,787] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:34,790] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:34,791] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:34,792] INFO: Fetching commands...
[2025-06-04 20:04:34,793] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:34,793] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:34,797] INFO: Fetching commands...
[2025-06-04 20:04:34,806] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:34,812] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:36,898] DEBUG: Response status code: 200
[2025-06-04 20:04:36,898] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:36,899] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:36,901] INFO: Commands: []
[2025-06-04 20:04:37,294] DEBUG: Response status code: 200
[2025-06-04 20:04:37,295] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:37,297] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:37,302] INFO: Commands: []
[2025-06-04 20:04:38,964] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:38,964] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:39,405] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:39,407] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:41,025] DEBUG: Response status code: 200
[2025-06-04 20:04:41,025] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:41,027] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:41,027] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:41,028] INFO: Fetching commands...
[2025-06-04 20:04:41,028] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:41,028] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:41,471] DEBUG: Response status code: 200
[2025-06-04 20:04:41,472] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:41,476] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:41,477] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:41,481] INFO: Fetching commands...
[2025-06-04 20:04:41,488] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:41,494] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:43,145] DEBUG: Response status code: 200
[2025-06-04 20:04:43,146] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:43,147] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:43,148] INFO: Commands: []
[2025-06-04 20:04:43,600] DEBUG: Response status code: 200
[2025-06-04 20:04:43,601] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:43,604] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:43,608] INFO: Commands: []
[2025-06-04 20:04:45,281] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:45,282] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:45,676] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:45,678] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:47,573] DEBUG: Response status code: 200
[2025-06-04 20:04:47,574] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:47,578] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:47,590] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:47,605] INFO: Fetching commands...
[2025-06-04 20:04:47,606] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:47,617] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:47,952] DEBUG: Response status code: 200
[2025-06-04 20:04:47,955] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:47,957] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:47,957] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:47,959] INFO: Fetching commands...
[2025-06-04 20:04:47,962] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:47,964] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:49,713] DEBUG: Response status code: 200
[2025-06-04 20:04:49,714] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:49,715] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:49,716] INFO: Commands: []
[2025-06-04 20:04:50,063] DEBUG: Response status code: 200
[2025-06-04 20:04:50,064] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:50,067] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:50,073] INFO: Commands: []
[2025-06-04 20:04:51,815] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:51,815] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:52,141] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:52,143] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:53,958] DEBUG: Response status code: 200
[2025-06-04 20:04:53,959] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:53,961] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:53,963] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:53,963] INFO: Fetching commands...
[2025-06-04 20:04:53,963] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:53,964] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:54,200] DEBUG: Response status code: 200
[2025-06-04 20:04:54,202] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:04:54,203] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:04:54,204] INFO: Server is approved and ready to process commands
[2025-06-04 20:04:54,205] INFO: Fetching commands...
[2025-06-04 20:04:54,206] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:04:54,208] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:56,034] DEBUG: Response status code: 200
[2025-06-04 20:04:56,034] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:56,035] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:56,036] INFO: Commands: []
[2025-06-04 20:04:56,296] DEBUG: Response status code: 200
[2025-06-04 20:04:56,297] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:04:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:04:56,298] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:04:56,302] INFO: Commands: []
[2025-06-04 20:04:58,088] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:58,088] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:04:58,841] DEBUG: Checking approval status for server 9
[2025-06-04 20:04:58,843] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:00,181] DEBUG: Response status code: 200
[2025-06-04 20:05:00,182] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:00,182] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:00,183] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:00,183] INFO: Fetching commands...
[2025-06-04 20:05:00,184] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:00,184] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:00,902] DEBUG: Response status code: 200
[2025-06-04 20:05:00,903] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:00,904] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:00,905] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:00,906] INFO: Fetching commands...
[2025-06-04 20:05:00,908] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:00,909] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:02,252] DEBUG: Response status code: 200
[2025-06-04 20:05:02,252] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:02,253] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:02,255] INFO: Commands: []
[2025-06-04 20:05:02,978] DEBUG: Response status code: 200
[2025-06-04 20:05:02,979] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:02,982] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:02,986] INFO: Commands: []
[2025-06-04 20:05:04,300] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:04,301] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:05,089] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:05,091] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:06,362] DEBUG: Response status code: 200
[2025-06-04 20:05:06,363] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:06,364] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:06,364] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:06,365] INFO: Fetching commands...
[2025-06-04 20:05:06,367] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:06,368] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:07,181] DEBUG: Response status code: 200
[2025-06-04 20:05:07,182] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:07,185] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:07,186] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:07,188] INFO: Fetching commands...
[2025-06-04 20:05:07,192] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:07,197] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:08,447] DEBUG: Response status code: 200
[2025-06-04 20:05:08,447] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:08,449] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:08,450] INFO: Commands: []
[2025-06-04 20:05:09,326] DEBUG: Response status code: 200
[2025-06-04 20:05:09,327] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:09,329] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:09,333] INFO: Commands: []
[2025-06-04 20:05:10,558] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:10,559] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:11,386] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:11,387] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:12,624] DEBUG: Response status code: 200
[2025-06-04 20:05:12,625] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:12,625] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:12,626] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:12,626] INFO: Fetching commands...
[2025-06-04 20:05:12,627] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:12,627] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:13,449] DEBUG: Response status code: 200
[2025-06-04 20:05:13,450] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:13,453] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:13,455] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:13,456] INFO: Fetching commands...
[2025-06-04 20:05:13,457] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:13,458] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:14,703] DEBUG: Response status code: 200
[2025-06-04 20:05:14,703] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:14,704] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:14,705] INFO: Commands: []
[2025-06-04 20:05:15,562] DEBUG: Response status code: 200
[2025-06-04 20:05:15,563] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:15,570] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:15,593] INFO: Commands: []
[2025-06-04 20:05:16,780] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:16,781] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:17,699] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:17,700] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:18,878] DEBUG: Response status code: 200
[2025-06-04 20:05:18,879] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:18,881] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:18,881] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:18,882] INFO: Fetching commands...
[2025-06-04 20:05:18,882] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:18,884] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:19,859] DEBUG: Response status code: 200
[2025-06-04 20:05:19,860] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:19,863] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:19,863] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:19,865] INFO: Fetching commands...
[2025-06-04 20:05:19,877] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:19,879] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:21,613] DEBUG: Response status code: 200
[2025-06-04 20:05:21,614] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:21,614] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:21,615] INFO: Commands: []
[2025-06-04 20:05:22,137] DEBUG: Response status code: 200
[2025-06-04 20:05:22,140] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:22,141] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:22,162] INFO: Commands: []
[2025-06-04 20:05:23,716] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:23,716] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:24,244] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:24,244] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:25,920] DEBUG: Response status code: 200
[2025-06-04 20:05:25,920] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:25,920] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:25,924] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:25,924] INFO: Fetching commands...
[2025-06-04 20:05:25,924] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:25,925] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:26,307] DEBUG: Response status code: 200
[2025-06-04 20:05:26,308] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:26,309] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:26,310] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:26,311] INFO: Fetching commands...
[2025-06-04 20:05:26,312] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:26,313] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:28,043] DEBUG: Response status code: 200
[2025-06-04 20:05:28,044] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:28,044] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:28,046] INFO: Commands: []
[2025-06-04 20:05:28,382] DEBUG: Response status code: 200
[2025-06-04 20:05:28,383] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:28,385] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:28,389] INFO: Commands: []
[2025-06-04 20:05:30,132] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:30,133] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:30,424] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:30,426] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:32,202] DEBUG: Response status code: 200
[2025-06-04 20:05:32,202] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:32,202] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:32,204] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:32,204] INFO: Fetching commands...
[2025-06-04 20:05:32,204] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:32,204] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:32,562] DEBUG: Response status code: 200
[2025-06-04 20:05:32,563] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:32 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:32,565] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:32,566] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:32,567] INFO: Fetching commands...
[2025-06-04 20:05:32,568] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:32,572] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:34,634] DEBUG: Response status code: 200
[2025-06-04 20:05:34,635] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:34,636] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:34,638] INFO: Commands: []
[2025-06-04 20:05:35,281] DEBUG: Response status code: 200
[2025-06-04 20:05:35,282] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:35,328] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:35,330] INFO: Commands: []
[2025-06-04 20:05:36,847] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:36,847] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:38,025] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:38,026] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:38,952] DEBUG: Response status code: 200
[2025-06-04 20:05:38,952] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:38,953] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:38,953] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:38,953] INFO: Fetching commands...
[2025-06-04 20:05:38,954] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:38,954] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:40,106] DEBUG: Response status code: 200
[2025-06-04 20:05:40,107] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:40,109] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:40,110] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:40,111] INFO: Fetching commands...
[2025-06-04 20:05:40,112] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:40,120] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:41,073] DEBUG: Response status code: 200
[2025-06-04 20:05:41,074] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:41,074] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:41,075] INFO: Commands: []
[2025-06-04 20:05:42,309] DEBUG: Response status code: 200
[2025-06-04 20:05:42,310] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:42,313] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:42,415] INFO: Commands: []
[2025-06-04 20:05:43,165] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:43,165] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:44,640] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:44,642] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:45,210] DEBUG: Response status code: 200
[2025-06-04 20:05:45,210] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:45,211] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:45,211] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:45,211] INFO: Fetching commands...
[2025-06-04 20:05:45,211] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:45,212] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:46,695] DEBUG: Response status code: 200
[2025-06-04 20:05:46,696] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:46,702] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:46,706] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:46,707] INFO: Fetching commands...
[2025-06-04 20:05:46,710] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:46,711] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:47,267] DEBUG: Response status code: 200
[2025-06-04 20:05:47,267] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:47,268] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:47,269] INFO: Commands: []
[2025-06-04 20:05:48,777] DEBUG: Response status code: 200
[2025-06-04 20:05:48,778] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:48,780] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:48,784] INFO: Commands: []
[2025-06-04 20:05:49,343] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:49,345] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:50,951] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:50,953] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:51,427] DEBUG: Response status code: 200
[2025-06-04 20:05:51,429] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:51,429] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:51,431] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:51,431] INFO: Fetching commands...
[2025-06-04 20:05:51,431] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:51,433] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:53,091] DEBUG: Response status code: 200
[2025-06-04 20:05:53,092] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:53,094] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:53,095] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:53,096] INFO: Fetching commands...
[2025-06-04 20:05:53,097] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:53,099] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:53,475] DEBUG: Response status code: 200
[2025-06-04 20:05:53,476] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:53,476] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:53,477] INFO: Commands: []
[2025-06-04 20:05:55,199] DEBUG: Response status code: 200
[2025-06-04 20:05:55,201] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:05:55,204] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:05:55,213] INFO: Commands: []
[2025-06-04 20:05:55,520] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:55,521] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:57,269] DEBUG: Checking approval status for server 9
[2025-06-04 20:05:57,271] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:05:57,573] DEBUG: Response status code: 200
[2025-06-04 20:05:57,573] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:05:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:05:57,574] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:05:57,575] INFO: Server is approved and ready to process commands
[2025-06-04 20:05:57,576] INFO: Fetching commands...
[2025-06-04 20:05:57,576] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:05:57,576] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:00,104] DEBUG: Response status code: 200
[2025-06-04 20:06:00,108] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:00,109] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:00,110] INFO: Commands: []
[2025-06-04 20:06:00,163] DEBUG: Response status code: 200
[2025-06-04 20:06:00,165] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:00,229] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:00,489] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:00,673] INFO: Fetching commands...
[2025-06-04 20:06:01,001] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:01,207] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:02,959] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:02,960] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:05,822] DEBUG: Response status code: 200
[2025-06-04 20:06:05,823] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:05,830] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:06,025] INFO: Commands: []
[2025-06-04 20:06:06,185] DEBUG: Response status code: 200
[2025-06-04 20:06:06,185] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:06,186] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:06,187] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:06,188] INFO: Fetching commands...
[2025-06-04 20:06:06,189] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:06,190] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:08,607] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:08,608] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:08,746] DEBUG: Response status code: 200
[2025-06-04 20:06:08,746] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:08,747] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:08,748] INFO: Commands: []
[2025-06-04 20:06:10,659] DEBUG: Response status code: 200
[2025-06-04 20:06:10,660] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:10,661] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:10,661] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:10,662] INFO: Fetching commands...
[2025-06-04 20:06:10,663] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:10,663] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:10,793] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:10,794] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:12,700] DEBUG: Response status code: 200
[2025-06-04 20:06:12,701] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:12,702] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:12,703] INFO: Commands: []
[2025-06-04 20:06:12,833] DEBUG: Response status code: 200
[2025-06-04 20:06:12,834] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:12,834] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:12,835] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:12,835] INFO: Fetching commands...
[2025-06-04 20:06:12,835] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:12,836] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:14,735] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:14,736] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:14,859] DEBUG: Response status code: 200
[2025-06-04 20:06:14,860] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:14,860] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:14,862] INFO: Commands: []
[2025-06-04 20:06:16,932] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:16,932] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:16,933] DEBUG: Response status code: 200
[2025-06-04 20:06:16,933] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:16,934] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:16,935] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:16,935] INFO: Fetching commands...
[2025-06-04 20:06:16,936] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:16,936] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:19,007] DEBUG: Response status code: 200
[2025-06-04 20:06:19,008] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:19,008] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:19,008] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:19,008] INFO: Fetching commands...
[2025-06-04 20:06:19,010] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:19,010] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:21,066] DEBUG: Response status code: 200
[2025-06-04 20:06:21,066] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:21,067] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:21,069] INFO: Commands: []
[2025-06-04 20:06:23,128] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:23,130] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:25,199] DEBUG: Response status code: 200
[2025-06-04 20:06:25,199] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:25,199] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:25,200] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:25,200] INFO: Fetching commands...
[2025-06-04 20:06:25,200] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:25,201] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:27,257] DEBUG: Response status code: 200
[2025-06-04 20:06:27,257] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:27,259] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:27,260] INFO: Commands: []
[2025-06-04 20:06:29,312] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:29,313] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:31,357] DEBUG: Response status code: 200
[2025-06-04 20:06:31,357] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:31,358] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:31,358] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:31,358] INFO: Fetching commands...
[2025-06-04 20:06:31,358] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:31,359] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:33,445] DEBUG: Response status code: 200
[2025-06-04 20:06:33,446] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:33,446] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:33,447] INFO: Commands: []
[2025-06-04 20:06:35,492] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:35,492] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:37,567] DEBUG: Response status code: 200
[2025-06-04 20:06:37,568] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:37,569] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:37,569] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:37,570] INFO: Fetching commands...
[2025-06-04 20:06:37,570] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:37,570] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:39,683] DEBUG: Response status code: 200
[2025-06-04 20:06:39,684] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:39,685] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:39,687] INFO: Commands: []
[2025-06-04 20:06:41,743] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:41,743] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:43,786] DEBUG: Response status code: 200
[2025-06-04 20:06:43,786] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:43,787] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:43,787] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:43,788] INFO: Fetching commands...
[2025-06-04 20:06:43,788] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:43,788] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:45,827] DEBUG: Response status code: 200
[2025-06-04 20:06:45,828] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:45,828] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:45,829] INFO: Commands: []
[2025-06-04 20:06:47,872] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:47,872] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:49,938] DEBUG: Response status code: 200
[2025-06-04 20:06:49,938] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:49,940] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:49,940] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:49,940] INFO: Fetching commands...
[2025-06-04 20:06:49,940] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:49,941] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:52,050] DEBUG: Response status code: 200
[2025-06-04 20:06:52,050] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:52,052] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:52,054] INFO: Commands: []
[2025-06-04 20:06:54,152] DEBUG: Checking approval status for server 9
[2025-06-04 20:06:54,152] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:56,189] DEBUG: Response status code: 200
[2025-06-04 20:06:56,192] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:06:56,192] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:06:56,193] INFO: Server is approved and ready to process commands
[2025-06-04 20:06:56,193] INFO: Fetching commands...
[2025-06-04 20:06:56,194] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:06:56,195] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:06:58,238] DEBUG: Response status code: 200
[2025-06-04 20:06:58,238] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:06:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:06:58,238] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:06:58,239] INFO: Commands: []
[2025-06-04 20:07:00,287] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:00,288] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:02,357] DEBUG: Response status code: 200
[2025-06-04 20:07:02,357] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:02,359] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:02,359] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:02,360] INFO: Fetching commands...
[2025-06-04 20:07:02,360] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:02,360] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:04,432] DEBUG: Response status code: 200
[2025-06-04 20:07:04,433] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:04,434] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:04,435] INFO: Commands: []
[2025-06-04 20:07:06,502] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:06,503] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:08,576] DEBUG: Response status code: 200
[2025-06-04 20:07:08,576] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:08,586] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:08,586] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:08,587] INFO: Fetching commands...
[2025-06-04 20:07:08,587] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:08,587] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:10,993] DEBUG: Response status code: 200
[2025-06-04 20:07:10,993] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:10,994] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:10,995] INFO: Commands: []
[2025-06-04 20:07:13,052] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:13,052] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:15,168] DEBUG: Response status code: 200
[2025-06-04 20:07:15,169] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:15,169] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:15,169] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:15,170] INFO: Fetching commands...
[2025-06-04 20:07:15,170] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:15,170] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:17,220] DEBUG: Response status code: 200
[2025-06-04 20:07:17,221] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:17,222] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:17,223] INFO: Commands: []
[2025-06-04 20:07:19,291] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:19,291] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:21,357] DEBUG: Response status code: 200
[2025-06-04 20:07:21,358] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:21,358] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:21,359] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:21,359] INFO: Fetching commands...
[2025-06-04 20:07:21,359] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:21,359] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:23,409] DEBUG: Response status code: 200
[2025-06-04 20:07:23,410] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:23,410] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:23,411] INFO: Commands: []
[2025-06-04 20:07:25,475] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:25,475] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:27,519] DEBUG: Response status code: 200
[2025-06-04 20:07:27,520] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:27,520] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:27,521] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:27,521] INFO: Fetching commands...
[2025-06-04 20:07:27,521] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:27,522] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:29,589] DEBUG: Response status code: 200
[2025-06-04 20:07:29,589] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:29,590] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:29,590] INFO: Commands: []
[2025-06-04 20:07:31,714] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:31,714] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:33,792] DEBUG: Response status code: 200
[2025-06-04 20:07:33,792] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:33,793] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:33,793] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:33,793] INFO: Fetching commands...
[2025-06-04 20:07:33,794] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:33,794] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:35,828] DEBUG: Response status code: 200
[2025-06-04 20:07:35,829] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:35,829] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:35,831] INFO: Commands: []
[2025-06-04 20:07:37,924] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:37,924] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:39,999] DEBUG: Response status code: 200
[2025-06-04 20:07:39,999] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:39,999] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:40,000] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:40,000] INFO: Fetching commands...
[2025-06-04 20:07:40,001] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:40,002] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:42,060] DEBUG: Response status code: 200
[2025-06-04 20:07:42,063] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:42,063] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:42,064] INFO: Commands: []
[2025-06-04 20:07:44,135] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:44,135] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:46,251] DEBUG: Response status code: 200
[2025-06-04 20:07:46,252] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:46,252] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:46,253] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:46,253] INFO: Fetching commands...
[2025-06-04 20:07:46,254] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:46,254] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:48,317] DEBUG: Response status code: 200
[2025-06-04 20:07:48,318] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:48,318] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:48,320] INFO: Commands: []
[2025-06-04 20:07:50,407] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:50,409] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:52,536] DEBUG: Response status code: 200
[2025-06-04 20:07:52,536] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:52,538] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:52,538] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:52,538] INFO: Fetching commands...
[2025-06-04 20:07:52,538] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:52,539] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:54,617] DEBUG: Response status code: 200
[2025-06-04 20:07:54,617] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:07:54,618] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:07:54,620] INFO: Commands: []
[2025-06-04 20:07:56,695] DEBUG: Checking approval status for server 9
[2025-06-04 20:07:56,695] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:07:58,771] DEBUG: Response status code: 200
[2025-06-04 20:07:58,772] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:07:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:07:58,773] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:07:58,773] INFO: Server is approved and ready to process commands
[2025-06-04 20:07:58,775] INFO: Fetching commands...
[2025-06-04 20:07:58,775] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:07:58,776] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:00,835] DEBUG: Response status code: 200
[2025-06-04 20:08:00,835] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:00,836] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:00,837] INFO: Commands: []
[2025-06-04 20:08:02,936] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:02,936] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:05,018] DEBUG: Response status code: 200
[2025-06-04 20:08:05,019] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:05 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:05,019] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:05,020] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:05,020] INFO: Fetching commands...
[2025-06-04 20:08:05,021] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:05,021] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:07,101] DEBUG: Response status code: 200
[2025-06-04 20:08:07,101] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:07 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:07,102] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:07,103] INFO: Commands: []
[2025-06-04 20:08:09,194] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:09,196] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:11,289] DEBUG: Response status code: 200
[2025-06-04 20:08:11,289] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:11,292] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:11,292] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:11,293] INFO: Fetching commands...
[2025-06-04 20:08:11,295] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:11,296] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:13,371] DEBUG: Response status code: 200
[2025-06-04 20:08:13,372] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:13,374] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:13,375] INFO: Commands: []
[2025-06-04 20:08:15,422] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:15,422] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:17,470] DEBUG: Response status code: 200
[2025-06-04 20:08:17,471] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:17,471] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:17,471] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:17,472] INFO: Fetching commands...
[2025-06-04 20:08:17,472] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:17,472] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:19,553] DEBUG: Response status code: 200
[2025-06-04 20:08:19,554] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:19,555] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:19,558] INFO: Commands: []
[2025-06-04 20:08:21,652] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:21,652] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:23,708] DEBUG: Response status code: 200
[2025-06-04 20:08:23,708] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:23,708] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:23,709] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:23,709] INFO: Fetching commands...
[2025-06-04 20:08:23,709] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:23,710] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:25,767] DEBUG: Response status code: 200
[2025-06-04 20:08:25,767] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:25,767] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:25,768] INFO: Commands: []
[2025-06-04 20:08:27,821] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:27,821] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:29,873] DEBUG: Response status code: 200
[2025-06-04 20:08:29,873] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:29,873] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:29,873] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:29,874] INFO: Fetching commands...
[2025-06-04 20:08:29,874] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:29,874] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:31,911] DEBUG: Response status code: 200
[2025-06-04 20:08:31,911] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:31,912] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:31,913] INFO: Commands: []
[2025-06-04 20:08:33,967] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:33,967] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:36,014] DEBUG: Response status code: 200
[2025-06-04 20:08:36,015] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:36,015] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:36,016] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:36,016] INFO: Fetching commands...
[2025-06-04 20:08:36,016] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:36,016] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:38,076] DEBUG: Response status code: 200
[2025-06-04 20:08:38,077] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:38,078] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:38,080] INFO: Commands: []
[2025-06-04 20:08:40,130] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:40,131] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:42,210] DEBUG: Response status code: 200
[2025-06-04 20:08:42,210] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:42 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:42,212] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:42,212] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:42,213] INFO: Fetching commands...
[2025-06-04 20:08:42,213] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:42,213] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:44,271] DEBUG: Response status code: 200
[2025-06-04 20:08:44,271] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:44,272] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:44,273] INFO: Commands: []
[2025-06-04 20:08:46,348] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:46,349] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:48,396] DEBUG: Response status code: 200
[2025-06-04 20:08:48,396] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:48 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:48,397] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:48,397] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:48,401] INFO: Fetching commands...
[2025-06-04 20:08:48,403] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:48,404] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:50,471] DEBUG: Response status code: 200
[2025-06-04 20:08:50,471] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:50,472] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:50,474] INFO: Commands: []
[2025-06-04 20:08:52,539] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:52,540] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:54,598] DEBUG: Response status code: 200
[2025-06-04 20:08:54,598] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:54 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:08:54,600] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:08:54,601] INFO: Server is approved and ready to process commands
[2025-06-04 20:08:54,601] INFO: Fetching commands...
[2025-06-04 20:08:54,601] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:08:54,603] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:08:56,677] DEBUG: Response status code: 200
[2025-06-04 20:08:56,677] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:08:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:08:56,677] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:08:56,679] INFO: Commands: []
[2025-06-04 20:08:58,725] DEBUG: Checking approval status for server 9
[2025-06-04 20:08:58,725] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:00,791] DEBUG: Response status code: 200
[2025-06-04 20:09:00,792] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:00,792] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:00,793] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:00,793] INFO: Fetching commands...
[2025-06-04 20:09:00,794] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:00,794] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:02,874] DEBUG: Response status code: 200
[2025-06-04 20:09:02,876] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:02,878] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:02,882] INFO: Commands: []
[2025-06-04 20:09:04,936] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:04,937] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:06,987] DEBUG: Response status code: 200
[2025-06-04 20:09:06,987] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:06,988] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:06,988] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:06,989] INFO: Fetching commands...
[2025-06-04 20:09:06,990] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:06,993] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:09,041] DEBUG: Response status code: 200
[2025-06-04 20:09:09,041] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:09,042] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:09,043] INFO: Commands: []
[2025-06-04 20:09:11,089] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:11,090] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:13,134] DEBUG: Response status code: 200
[2025-06-04 20:09:13,134] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:13 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:13,136] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:13,137] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:13,138] INFO: Fetching commands...
[2025-06-04 20:09:13,139] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:13,139] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:15,195] DEBUG: Response status code: 200
[2025-06-04 20:09:15,195] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:15 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:15,196] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:15,198] INFO: Commands: []
[2025-06-04 20:09:17,274] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:17,274] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:19,322] DEBUG: Response status code: 200
[2025-06-04 20:09:19,323] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:19,323] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:19,323] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:19,325] INFO: Fetching commands...
[2025-06-04 20:09:19,326] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:19,327] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:21,377] DEBUG: Response status code: 200
[2025-06-04 20:09:21,377] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:21,378] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:21,379] INFO: Commands: []
[2025-06-04 20:09:23,421] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:23,422] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:25,463] DEBUG: Response status code: 200
[2025-06-04 20:09:25,463] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:25,464] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:25,465] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:25,466] INFO: Fetching commands...
[2025-06-04 20:09:25,467] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:25,468] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:27,529] DEBUG: Response status code: 200
[2025-06-04 20:09:27,530] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:27,531] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:27,534] INFO: Commands: []
[2025-06-04 20:09:29,594] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:29,595] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:31,665] DEBUG: Response status code: 200
[2025-06-04 20:09:31,665] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:31 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:31,667] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:31,669] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:31,670] INFO: Fetching commands...
[2025-06-04 20:09:31,672] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:31,674] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:33,719] DEBUG: Response status code: 200
[2025-06-04 20:09:33,720] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:33,722] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:33,725] INFO: Commands: []
[2025-06-04 20:09:35,776] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:35,777] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:37,806] DEBUG: Response status code: 200
[2025-06-04 20:09:37,807] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:37,807] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:37,808] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:37,808] INFO: Fetching commands...
[2025-06-04 20:09:37,809] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:37,809] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:39,866] DEBUG: Response status code: 200
[2025-06-04 20:09:39,866] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:39,867] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:39,869] INFO: Commands: []
[2025-06-04 20:09:41,923] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:41,923] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:43,966] DEBUG: Response status code: 200
[2025-06-04 20:09:43,967] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:43,967] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:43,967] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:43,969] INFO: Fetching commands...
[2025-06-04 20:09:43,971] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:43,971] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:46,045] DEBUG: Response status code: 200
[2025-06-04 20:09:46,045] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:46,047] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:46,048] INFO: Commands: []
[2025-06-04 20:09:48,120] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:48,120] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:50,172] DEBUG: Response status code: 200
[2025-06-04 20:09:50,173] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:50 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:50,173] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:50,174] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:50,175] INFO: Fetching commands...
[2025-06-04 20:09:50,177] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:50,180] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:52,242] DEBUG: Response status code: 200
[2025-06-04 20:09:52,242] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:52,243] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:52,245] INFO: Commands: []
[2025-06-04 20:09:54,316] DEBUG: Checking approval status for server 9
[2025-06-04 20:09:54,317] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:56,365] DEBUG: Response status code: 200
[2025-06-04 20:09:56,366] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:09:56,366] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:09:56,368] INFO: Server is approved and ready to process commands
[2025-06-04 20:09:56,370] INFO: Fetching commands...
[2025-06-04 20:09:56,371] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:09:56,372] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:09:58,423] DEBUG: Response status code: 200
[2025-06-04 20:09:58,423] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:09:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:09:58,425] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:09:58,428] INFO: Commands: []
[2025-06-04 20:10:00,483] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:00,483] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:02,544] DEBUG: Response status code: 200
[2025-06-04 20:10:02,545] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:02,545] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:02,546] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:02,546] INFO: Fetching commands...
[2025-06-04 20:10:02,547] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:02,548] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:04,604] DEBUG: Response status code: 200
[2025-06-04 20:10:04,605] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:04,605] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:04,606] INFO: Commands: []
[2025-06-04 20:10:06,652] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:06,653] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:08,721] DEBUG: Response status code: 200
[2025-06-04 20:10:08,721] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:08,721] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:08,721] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:08,722] INFO: Fetching commands...
[2025-06-04 20:10:08,722] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:08,723] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:10,779] DEBUG: Response status code: 200
[2025-06-04 20:10:10,779] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:10,780] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:10,783] INFO: Commands: []
[2025-06-04 20:10:12,845] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:12,845] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:14,903] DEBUG: Response status code: 200
[2025-06-04 20:10:14,903] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:14,904] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:14,907] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:14,908] INFO: Fetching commands...
[2025-06-04 20:10:14,909] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:14,909] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:16,956] DEBUG: Response status code: 200
[2025-06-04 20:10:16,957] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:16,957] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:16,958] INFO: Commands: []
[2025-06-04 20:10:19,011] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:19,011] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:21,068] DEBUG: Response status code: 200
[2025-06-04 20:10:21,069] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:21 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:21,070] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:21,071] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:21,073] INFO: Fetching commands...
[2025-06-04 20:10:21,075] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:21,077] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:23,125] DEBUG: Response status code: 200
[2025-06-04 20:10:23,125] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:23,127] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:23,127] INFO: Commands: []
[2025-06-04 20:10:25,179] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:25,179] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:27,241] DEBUG: Response status code: 200
[2025-06-04 20:10:27,242] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:27,242] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:27,242] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:27,244] INFO: Fetching commands...
[2025-06-04 20:10:27,245] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:27,247] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:29,312] DEBUG: Response status code: 200
[2025-06-04 20:10:29,312] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:29,313] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:29,314] INFO: Commands: []
[2025-06-04 20:10:31,346] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:31,346] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:33,380] DEBUG: Response status code: 200
[2025-06-04 20:10:33,380] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:33,381] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:33,382] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:33,382] INFO: Fetching commands...
[2025-06-04 20:10:33,383] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:33,383] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:35,430] DEBUG: Response status code: 200
[2025-06-04 20:10:35,430] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:35,431] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:35,433] INFO: Commands: []
[2025-06-04 20:10:37,467] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:37,467] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:39,522] DEBUG: Response status code: 200
[2025-06-04 20:10:39,523] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:39,523] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:39,524] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:39,525] INFO: Fetching commands...
[2025-06-04 20:10:39,527] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:39,528] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:41,581] DEBUG: Response status code: 200
[2025-06-04 20:10:41,582] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:41,582] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:41,584] INFO: Commands: []
[2025-06-04 20:10:43,645] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:43,646] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:45,679] DEBUG: Response status code: 200
[2025-06-04 20:10:45,679] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:45,680] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:45,680] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:45,681] INFO: Fetching commands...
[2025-06-04 20:10:45,681] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:45,682] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:47,740] DEBUG: Response status code: 200
[2025-06-04 20:10:47,741] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:47,741] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:47,743] INFO: Commands: []
[2025-06-04 20:10:49,790] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:49,790] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:51,840] DEBUG: Response status code: 200
[2025-06-04 20:10:51,840] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:51,841] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:51,841] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:51,842] INFO: Fetching commands...
[2025-06-04 20:10:51,842] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:51,842] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:53,918] DEBUG: Response status code: 200
[2025-06-04 20:10:53,919] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:10:53,921] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:10:53,923] INFO: Commands: []
[2025-06-04 20:10:55,983] DEBUG: Checking approval status for server 9
[2025-06-04 20:10:55,984] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:10:58,017] DEBUG: Response status code: 200
[2025-06-04 20:10:58,017] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:10:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:10:58,018] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:10:58,018] INFO: Server is approved and ready to process commands
[2025-06-04 20:10:58,019] INFO: Fetching commands...
[2025-06-04 20:10:58,019] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:10:58,020] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:00,076] DEBUG: Response status code: 200
[2025-06-04 20:11:00,077] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:00,079] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:00,081] INFO: Commands: []
[2025-06-04 20:11:02,123] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:02,123] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:04,165] DEBUG: Response status code: 200
[2025-06-04 20:11:04,166] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:04,166] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:04,167] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:04,167] INFO: Fetching commands...
[2025-06-04 20:11:04,168] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:04,168] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:06,216] DEBUG: Response status code: 200
[2025-06-04 20:11:06,216] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:06,217] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:06,218] INFO: Commands: []
[2025-06-04 20:11:08,285] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:08,286] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:10,326] DEBUG: Response status code: 200
[2025-06-04 20:11:10,327] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:10,327] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:10,328] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:10,329] INFO: Fetching commands...
[2025-06-04 20:11:10,329] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:10,330] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:12,366] DEBUG: Response status code: 200
[2025-06-04 20:11:12,366] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:12,368] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:12,371] INFO: Commands: []
[2025-06-04 20:11:14,396] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:14,396] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:16,441] DEBUG: Response status code: 200
[2025-06-04 20:11:16,441] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:16,442] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:16,443] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:16,443] INFO: Fetching commands...
[2025-06-04 20:11:16,444] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:16,444] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:18,506] DEBUG: Response status code: 200
[2025-06-04 20:11:18,506] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:18 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:18,508] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:18,516] INFO: Commands: []
[2025-06-04 20:11:20,557] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:20,558] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:22,597] DEBUG: Response status code: 200
[2025-06-04 20:11:22,598] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:22,598] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:22,598] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:22,599] INFO: Fetching commands...
[2025-06-04 20:11:22,600] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:22,601] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:24,644] DEBUG: Response status code: 200
[2025-06-04 20:11:24,644] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:24,645] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:24,647] INFO: Commands: []
[2025-06-04 20:11:26,707] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:26,707] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:28,775] DEBUG: Response status code: 200
[2025-06-04 20:11:28,776] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:28,779] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:28,779] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:28,780] INFO: Fetching commands...
[2025-06-04 20:11:28,780] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:28,781] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:30,833] DEBUG: Response status code: 200
[2025-06-04 20:11:30,834] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:30,834] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:30,836] INFO: Commands: []
[2025-06-04 20:11:32,892] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:32,893] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:34,951] DEBUG: Response status code: 200
[2025-06-04 20:11:34,951] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:34,952] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:34,953] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:34,953] INFO: Fetching commands...
[2025-06-04 20:11:34,954] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:34,954] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:37,011] DEBUG: Response status code: 200
[2025-06-04 20:11:37,012] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:37,015] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:37,016] INFO: Commands: []
[2025-06-04 20:11:39,062] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:39,063] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:41,116] DEBUG: Response status code: 200
[2025-06-04 20:11:41,116] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:41,117] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:41,118] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:41,118] INFO: Fetching commands...
[2025-06-04 20:11:41,119] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:41,119] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:43,156] DEBUG: Response status code: 200
[2025-06-04 20:11:43,156] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:43,157] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:43,160] INFO: Commands: []
[2025-06-04 20:11:45,216] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:45,216] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:47,265] DEBUG: Response status code: 200
[2025-06-04 20:11:47,265] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:47,266] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:47,267] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:47,267] INFO: Fetching commands...
[2025-06-04 20:11:47,270] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:47,270] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:49,305] DEBUG: Response status code: 200
[2025-06-04 20:11:49,305] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:11:49,307] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:11:49,308] INFO: Commands: []
[2025-06-04 20:11:51,352] DEBUG: Checking approval status for server 9
[2025-06-04 20:11:51,352] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:11:53,420] DEBUG: Response status code: 200
[2025-06-04 20:11:53,420] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:11:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:11:53,421] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:11:53,422] INFO: Server is approved and ready to process commands
[2025-06-04 20:11:53,422] INFO: Fetching commands...
[2025-06-04 20:11:53,423] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:11:53,425] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:00,637] DEBUG: Response status code: 200
[2025-06-04 20:12:00,637] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:00 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:00,638] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:00,640] INFO: Commands: []
[2025-06-04 20:12:02,707] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:02,708] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:04,778] DEBUG: Response status code: 200
[2025-06-04 20:12:04,779] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:04,779] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:04,781] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:04,781] INFO: Fetching commands...
[2025-06-04 20:12:04,782] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:04,782] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:06,822] DEBUG: Response status code: 200
[2025-06-04 20:12:06,822] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:06,823] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:06,824] INFO: Commands: []
[2025-06-04 20:12:08,854] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:08,855] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:10,917] DEBUG: Response status code: 200
[2025-06-04 20:12:10,917] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:10,918] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:10,918] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:10,920] INFO: Fetching commands...
[2025-06-04 20:12:10,920] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:10,920] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:12,985] DEBUG: Response status code: 200
[2025-06-04 20:12:12,986] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:12,987] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:12,988] INFO: Commands: []
[2025-06-04 20:12:15,027] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:15,028] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:17,074] DEBUG: Response status code: 200
[2025-06-04 20:12:17,074] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:17,075] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:17,076] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:17,076] INFO: Fetching commands...
[2025-06-04 20:12:17,077] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:17,077] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:19,141] DEBUG: Response status code: 200
[2025-06-04 20:12:19,142] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:19,142] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:19,144] INFO: Commands: []
[2025-06-04 20:12:21,195] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:21,196] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:24,446] DEBUG: Response status code: 200
[2025-06-04 20:12:24,447] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:24,447] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:24,448] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:24,448] INFO: Fetching commands...
[2025-06-04 20:12:24,449] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:24,449] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:26,505] DEBUG: Response status code: 200
[2025-06-04 20:12:26,505] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:26,506] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:26,507] INFO: Commands: []
[2025-06-04 20:12:28,581] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:28,581] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:30,638] DEBUG: Response status code: 200
[2025-06-04 20:12:30,638] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:30 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:30,639] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:30,640] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:30,640] INFO: Fetching commands...
[2025-06-04 20:12:30,641] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:30,641] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:33,555] DEBUG: Response status code: 200
[2025-06-04 20:12:33,555] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:33,555] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:33,558] INFO: Commands: []
[2025-06-04 20:12:35,601] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:35,601] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:37,636] DEBUG: Response status code: 200
[2025-06-04 20:12:37,636] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:37,637] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:37,637] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:37,638] INFO: Fetching commands...
[2025-06-04 20:12:37,638] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:37,639] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:39,692] DEBUG: Response status code: 200
[2025-06-04 20:12:39,692] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:39,693] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:39,694] INFO: Commands: []
[2025-06-04 20:12:41,744] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:41,746] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:43,798] DEBUG: Response status code: 200
[2025-06-04 20:12:43,798] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:43,799] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:43,799] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:43,800] INFO: Fetching commands...
[2025-06-04 20:12:43,801] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:43,802] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:45,843] DEBUG: Response status code: 200
[2025-06-04 20:12:45,844] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:45,845] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:45,848] INFO: Commands: []
[2025-06-04 20:12:47,890] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:47,891] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:49,932] DEBUG: Response status code: 200
[2025-06-04 20:12:49,932] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:49 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:49,933] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:49,933] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:49,934] INFO: Fetching commands...
[2025-06-04 20:12:49,936] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:49,937] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:51,986] DEBUG: Response status code: 200
[2025-06-04 20:12:51,987] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:51,988] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:51,990] INFO: Commands: []
[2025-06-04 20:12:54,037] DEBUG: Checking approval status for server 9
[2025-06-04 20:12:54,037] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:56,076] DEBUG: Response status code: 200
[2025-06-04 20:12:56,076] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:56 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:12:56,077] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:12:56,077] INFO: Server is approved and ready to process commands
[2025-06-04 20:12:56,078] INFO: Fetching commands...
[2025-06-04 20:12:56,078] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:12:56,080] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:12:58,121] DEBUG: Response status code: 200
[2025-06-04 20:12:58,121] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:12:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:12:58,123] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:12:58,124] INFO: Commands: []
[2025-06-04 20:13:00,193] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:00,193] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:02,252] DEBUG: Response status code: 200
[2025-06-04 20:13:02,253] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:02,255] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:02,255] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:02,257] INFO: Fetching commands...
[2025-06-04 20:13:02,258] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:02,261] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:04,305] DEBUG: Response status code: 200
[2025-06-04 20:13:04,305] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:04,306] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:04,307] INFO: Commands: []
[2025-06-04 20:13:06,334] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:06,335] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:08,385] DEBUG: Response status code: 200
[2025-06-04 20:13:08,385] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:08 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:08,386] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:08,386] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:08,387] INFO: Fetching commands...
[2025-06-04 20:13:08,387] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:08,388] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:10,431] DEBUG: Response status code: 200
[2025-06-04 20:13:10,431] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:10,431] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:10,432] INFO: Commands: []
[2025-06-04 20:13:12,490] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:12,490] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:14,523] DEBUG: Response status code: 200
[2025-06-04 20:13:14,524] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:14,525] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:14,526] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:14,526] INFO: Fetching commands...
[2025-06-04 20:13:14,527] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:14,527] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:16,590] DEBUG: Response status code: 200
[2025-06-04 20:13:16,590] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:16,591] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:16,595] INFO: Commands: []
[2025-06-04 20:13:18,662] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:18,662] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:20,709] DEBUG: Response status code: 200
[2025-06-04 20:13:20,709] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:20 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:20,710] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:20,710] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:20,711] INFO: Fetching commands...
[2025-06-04 20:13:20,712] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:20,713] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:22,773] DEBUG: Response status code: 200
[2025-06-04 20:13:22,773] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:22,774] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:22,776] INFO: Commands: []
[2025-06-04 20:13:24,821] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:24,822] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:26,872] DEBUG: Response status code: 200
[2025-06-04 20:13:26,872] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:26 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:26,873] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:26,874] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:26,874] INFO: Fetching commands...
[2025-06-04 20:13:26,875] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:26,875] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:28,931] DEBUG: Response status code: 200
[2025-06-04 20:13:28,932] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:28,933] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:28,935] INFO: Commands: []
[2025-06-04 20:13:31,008] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:31,009] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:33,058] DEBUG: Response status code: 200
[2025-06-04 20:13:33,059] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:33,059] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:33,060] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:33,060] INFO: Fetching commands...
[2025-06-04 20:13:33,061] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:33,062] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:35,125] DEBUG: Response status code: 200
[2025-06-04 20:13:35,126] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:35,127] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:35,130] INFO: Commands: []
[2025-06-04 20:13:37,189] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:37,190] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:39,227] DEBUG: Response status code: 200
[2025-06-04 20:13:39,228] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:39,228] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:39,230] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:39,230] INFO: Fetching commands...
[2025-06-04 20:13:39,231] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:39,231] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:41,254] DEBUG: Response status code: 200
[2025-06-04 20:13:41,255] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:41 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:41,256] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:41,257] INFO: Commands: []
[2025-06-04 20:13:43,321] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:43,321] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:45,384] DEBUG: Response status code: 200
[2025-06-04 20:13:45,386] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:45 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:45,387] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:45,389] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:45,390] INFO: Fetching commands...
[2025-06-04 20:13:45,392] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:45,393] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:47,436] DEBUG: Response status code: 200
[2025-06-04 20:13:47,437] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:47 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:47,437] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:47,439] INFO: Commands: []
[2025-06-04 20:13:49,507] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:49,507] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:51,563] DEBUG: Response status code: 200
[2025-06-04 20:13:51,563] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:51 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:51,564] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:51,566] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:51,566] INFO: Fetching commands...
[2025-06-04 20:13:51,567] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:51,568] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:53,607] DEBUG: Response status code: 200
[2025-06-04 20:13:53,607] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:53 GMT', 'Content-Type': 'application/json', 'Content-Length': '38', 'Connection': 'close'}
[2025-06-04 20:13:53,608] DEBUG: Response data: {
  "commands": [],
  "interval": 0
}
[2025-06-04 20:13:53,609] INFO: Commands: []
[2025-06-04 20:13:55,642] DEBUG: Checking approval status for server 9
[2025-06-04 20:13:55,642] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:57,688] DEBUG: Response status code: 200
[2025-06-04 20:13:57,688] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:13:57,688] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:13:57,689] INFO: Server is approved and ready to process commands
[2025-06-04 20:13:57,690] INFO: Fetching commands...
[2025-06-04 20:13:57,691] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:13:57,691] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:13:59,731] DEBUG: Response status code: 200
[2025-06-04 20:13:59,732] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:13:59 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 20:13:59,732] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 20:13:59,733] INFO: Commands: []
[2025-06-04 20:14:21,768] DEBUG: Checking approval status for server 9
[2025-06-04 20:14:21,768] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:14:23,804] DEBUG: Response status code: 200
[2025-06-04 20:14:23,804] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:14:23 GMT', 'Content-Type': 'application/json', 'Content-Length': '68', 'Connection': 'close'}
[2025-06-04 20:14:23,805] DEBUG: Raw response text: {
  "is_approved": true,
  "name": "LAP-MOSHEG",
  "server_id": 9
}

[2025-06-04 20:14:23,805] INFO: Server is approved and ready to process commands
[2025-06-04 20:14:23,806] INFO: Fetching commands...
[2025-06-04 20:14:23,807] DEBUG: Fetching commands from http://localhost:5000/api/client/commands/9
[2025-06-04 20:14:23,808] DEBUG: Request headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:14:25,857] DEBUG: Response status code: 200
[2025-06-04 20:14:25,857] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:14:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '39', 'Connection': 'close'}
[2025-06-04 20:14:25,859] DEBUG: Response data: {
  "commands": [],
  "interval": 20
}
[2025-06-04 20:14:25,861] INFO: Commands: []
[2025-06-04 20:14:47,922] DEBUG: Checking approval status for server 9
[2025-06-04 20:14:47,923] DEBUG: Using headers: {'Authorization': 'Bearer 3507116dceb0479bbe16b330b02f8653'}
[2025-06-04 20:14:49,967] DEBUG: Response status code: 401
[2025-06-04 20:14:49,968] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:14:49 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '113', 'Connection': 'close'}
[2025-06-04 20:14:49,968] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>401 Unauthorized</title>
<h1>Unauthorized</h1>
<p>Invalid client token</p>

[2025-06-04 20:14:49,969] ERROR: Authentication failed. Please re-register the client.
[2025-06-04 20:14:49,970] INFO: Waiting for admin approval... Will check again in 60 seconds
[2025-06-04 20:24:02,334] DEBUG: Sending registration request to http://localhost:5000/api/public/register
[2025-06-04 20:24:02,335] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:24:04,365] DEBUG: Response status code: 400
[2025-06-04 20:24:04,366] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:24:04 GMT', 'Content-Type': 'application/json', 'Content-Length': '41', 'Connection': 'close'}
[2025-06-04 20:24:04,366] DEBUG: Response data: {
  "error": "Missing required fields"
}
[2025-06-04 20:24:04,367] ERROR: Failed to register client: {
  "error": "Missing required fields"
}

[2025-06-04 20:24:04,367] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:24:34,996] DEBUG: Sending registration request to http://localhost:5000/api/public/register
[2025-06-04 20:24:34,996] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:24:37,033] DEBUG: Response status code: 400
[2025-06-04 20:24:37,033] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:24:37 GMT', 'Content-Type': 'application/json', 'Content-Length': '41', 'Connection': 'close'}
[2025-06-04 20:24:37,033] DEBUG: Response data: {
  "error": "Missing required fields"
}
[2025-06-04 20:24:37,034] ERROR: Failed to register client: {
  "error": "Missing required fields"
}

[2025-06-04 20:24:37,050] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:25:08,018] DEBUG: Sending registration request to http://localhost:5000/api/public/register
[2025-06-04 20:25:08,021] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:25:10,089] DEBUG: Response status code: 400
[2025-06-04 20:25:10,089] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:25:10 GMT', 'Content-Type': 'application/json', 'Content-Length': '41', 'Connection': 'close'}
[2025-06-04 20:25:10,090] DEBUG: Response data: {
  "error": "Missing required fields"
}
[2025-06-04 20:25:10,090] ERROR: Failed to register client: {
  "error": "Missing required fields"
}

[2025-06-04 20:25:10,091] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:25:41,090] DEBUG: Sending registration request to http://localhost:5000/api/public/register
[2025-06-04 20:25:41,092] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:25:43,132] DEBUG: Response status code: 400
[2025-06-04 20:25:43,133] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:25:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '41', 'Connection': 'close'}
[2025-06-04 20:25:43,133] DEBUG: Response data: {
  "error": "Missing required fields"
}
[2025-06-04 20:25:43,134] ERROR: Failed to register client: {
  "error": "Missing required fields"
}

[2025-06-04 20:25:43,135] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:26:14,088] DEBUG: Sending registration request to http://localhost:5000/api/public/register
[2025-06-04 20:26:14,088] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:26:16,137] DEBUG: Response status code: 400
[2025-06-04 20:26:16,138] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:26:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '41', 'Connection': 'close'}
[2025-06-04 20:26:16,139] DEBUG: Response data: {
  "error": "Missing required fields"
}
[2025-06-04 20:26:16,140] ERROR: Failed to register client: {
  "error": "Missing required fields"
}

[2025-06-04 20:26:16,141] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:26:27,175] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 20:26:27,177] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:26:29,212] DEBUG: Response status code: 404
[2025-06-04 20:26:29,212] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:26:29 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 20:26:29,212] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 20:26:29,213] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 20:26:29,213] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:27:00,179] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 20:27:00,180] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:27:02,223] DEBUG: Response status code: 404
[2025-06-04 20:27:02,223] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:27:02 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '207', 'Connection': 'close'}
[2025-06-04 20:27:02,224] DEBUG: Raw response text: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 20:27:02,225] ERROR: Failed to register client: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-06-04 20:27:02,225] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:28:51,733] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 20:28:51,734] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:28:55,208] DEBUG: Response status code: 500
[2025-06-04 20:28:55,208] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:28:55 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '26927', 'Connection': 'close'}
[2025-06-04 20:28:55,209] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4jAQ36hMc47Q2QqQjPc3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2909939326624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1686</em>,
      in <code class="function">register_client</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Generate RSA key pair</pre>
<pre class="line before"><span class="ws">        </span>private_key, public_key, encryption_key = generate_key_pair()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Create server record</pre>
<pre class="line current"><span class="ws">        </span>server = Server(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>local_ip=data[&#39;local_ip&#39;],</pre>
<pre class="line after"><span class="ws">            </span>public_ip=data[&#39;public_ip&#39;],</pre>
<pre class="line after"><span class="ws">            </span>os=data[&#39;os&#39;],</pre>
<pre class="line after"><span class="ws">            </span>os_version=data[&#39;os_version&#39;],</pre></div>
</div>

<li><div class="frame" id="frame-2909939326768">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">4</em>,
      in <code class="function">__init__</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2909939326912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py"</cite>,
      line <em class="line">571</em>,
      in <code class="function">_initialize_instance</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>manager.dispatch.init(self, args, kwargs)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>manager.original_init(*mixed[1:], **kwargs)</pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>manager.dispatch.init_failure(self, args, kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_history(self, key: str, passive: PassiveFlag) -&gt; History:</pre>
<pre class="line after"><span class="ws">        </span>return self.manager[key].impl.get_history(self, self.dict, passive)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2909939327632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2909939328928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py"</cite>,
      line <em class="line">569</em>,
      in <code class="function">_initialize_instance</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>manager = self.manager</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>manager.dispatch.init(self, args, kwargs)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>manager.original_init(*mixed[1:], **kwargs)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>manager.dispatch.init_failure(self, args, kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_history(self, key: str, passive: PassiveFlag) -&gt; History:</pre></div>
</div>

<li><div class="frame" id="frame-2909939329072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py"</cite>,
      line <em class="line">2175</em>,
      in <code class="function">_declarative_constructor</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>for example, any mapped columns or relationships.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>cls_ = type(self)</pre>
<pre class="line before"><span class="ws">    </span>for k in kwargs:</pre>
<pre class="line before"><span class="ws">        </span>if not hasattr(cls_, k):</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>&#34;%r is an invalid keyword argument for %s&#34; % (k, cls_.__name__)</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>setattr(self, k, kwargs[k])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-2909939321008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2909939325760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2909939325904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2909939326048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2909939326192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2909939326336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2909939326480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1722</em>,
      in <code class="function">register_client</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>&#39;public_key&#39;: public_key</pre>
<pre class="line before"><span class="ws">        </span>}), 201</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">        </span>db.session.rollback()</pre>
<pre class="line current"><span class="ws">        </span>current_app.logger.error(f&#34;Error registering client: {str(e)}&#34;)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Internal server error&#39;}), 500</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Client commands endpoint</pre>
<pre class="line after"><span class="ws"></span>@client_api.route(&#39;/commands/&lt;int:client_id&gt;&#39;, methods=[&#39;GET&#39;])</pre>
<pre class="line after"><span class="ws"></span>@client_token_required</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1686, in register_client
    server = Server(
             ^^^^^^^
  File &#34;&lt;string&gt;&#34;, line 4, in __init__
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py&#34;, line 571, in _initialize_instance
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py&#34;, line 569, in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py&#34;, line 2175, in _declarative_constructor
    raise TypeError(
TypeError: &#39;os&#39; is an invalid keyword argument for Server

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1722, in register_client
    current_app.logger.error(f&#34;Error registering client: {str(e)}&#34;)
NameError: name &#39;current_app&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1686, in register_client
    server = Server(
             ^^^^^^^
  File "<string>", line 4, in __init__
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 571, in _initialize_instance
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 569, in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py", line 2175, in _declarative_constructor
    raise TypeError(
TypeError: 'os' is an invalid keyword argument for Server

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1722, in register_client
    current_app.logger.error(f"Error registering client: {str(e)}")
NameError: name 'current_app' is not defined


-->

[2025-06-04 20:28:55,210] ERROR: Failed to register client: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4jAQ36hMc47Q2QqQjPc3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2909939326624">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1686</em>,
      in <code class="function">register_client</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Generate RSA key pair</pre>
<pre class="line before"><span class="ws">        </span>private_key, public_key, encryption_key = generate_key_pair()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Create server record</pre>
<pre class="line current"><span class="ws">        </span>server = Server(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>local_ip=data[&#39;local_ip&#39;],</pre>
<pre class="line after"><span class="ws">            </span>public_ip=data[&#39;public_ip&#39;],</pre>
<pre class="line after"><span class="ws">            </span>os=data[&#39;os&#39;],</pre>
<pre class="line after"><span class="ws">            </span>os_version=data[&#39;os_version&#39;],</pre></div>
</div>

<li><div class="frame" id="frame-2909939326768">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">4</em>,
      in <code class="function">__init__</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2909939326912">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py"</cite>,
      line <em class="line">571</em>,
      in <code class="function">_initialize_instance</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>manager.dispatch.init(self, args, kwargs)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>manager.original_init(*mixed[1:], **kwargs)</pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>manager.dispatch.init_failure(self, args, kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_history(self, key: str, passive: PassiveFlag) -&gt; History:</pre>
<pre class="line after"><span class="ws">        </span>return self.manager[key].impl.get_history(self, self.dict, passive)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2909939327632">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2909939328928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py"</cite>,
      line <em class="line">569</em>,
      in <code class="function">_initialize_instance</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>manager = self.manager</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>manager.dispatch.init(self, args, kwargs)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>manager.original_init(*mixed[1:], **kwargs)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>manager.dispatch.init_failure(self, args, kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_history(self, key: str, passive: PassiveFlag) -&gt; History:</pre></div>
</div>

<li><div class="frame" id="frame-2909939329072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py"</cite>,
      line <em class="line">2175</em>,
      in <code class="function">_declarative_constructor</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>for example, any mapped columns or relationships.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>cls_ = type(self)</pre>
<pre class="line before"><span class="ws">    </span>for k in kwargs:</pre>
<pre class="line before"><span class="ws">        </span>if not hasattr(cls_, k):</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>&#34;%r is an invalid keyword argument for %s&#34; % (k, cls_.__name__)</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>setattr(self, k, kwargs[k])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-2909939321008">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2909939325760">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2909939325904">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2909939326048">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2909939326192">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2909939326336">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2909939326480">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1722</em>,
      in <code class="function">register_client</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>&#39;public_key&#39;: public_key</pre>
<pre class="line before"><span class="ws">        </span>}), 201</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">        </span>db.session.rollback()</pre>
<pre class="line current"><span class="ws">        </span>current_app.logger.error(f&#34;Error registering client: {str(e)}&#34;)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Internal server error&#39;}), 500</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Client commands endpoint</pre>
<pre class="line after"><span class="ws"></span>@client_api.route(&#39;/commands/&lt;int:client_id&gt;&#39;, methods=[&#39;GET&#39;])</pre>
<pre class="line after"><span class="ws"></span>@client_token_required</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1686, in register_client
    server = Server(
             ^^^^^^^
  File &#34;&lt;string&gt;&#34;, line 4, in __init__
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py&#34;, line 571, in _initialize_instance
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py&#34;, line 569, in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py&#34;, line 2175, in _declarative_constructor
    raise TypeError(
TypeError: &#39;os&#39; is an invalid keyword argument for Server

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1722, in register_client
    current_app.logger.error(f&#34;Error registering client: {str(e)}&#34;)
NameError: name &#39;current_app&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1686, in register_client
    server = Server(
             ^^^^^^^
  File "<string>", line 4, in __init__
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 571, in _initialize_instance
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 569, in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py", line 2175, in _declarative_constructor
    raise TypeError(
TypeError: 'os' is an invalid keyword argument for Server

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1722, in register_client
    current_app.logger.error(f"Error registering client: {str(e)}")
NameError: name 'current_app' is not defined


-->

[2025-06-04 20:28:55,211] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:29:58,042] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 20:29:58,043] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:30:02,107] ERROR: Error registering client: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/register (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000019B15D6DD50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))
[2025-06-04 20:30:02,239] DEBUG: Exception details: Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 95, in create_connection
    raise err
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\connection.py", line 85, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 716, in urlopen
    httplib_response = self._make_request(
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 416, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 244, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1303, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1349, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1298, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Program Files\Python311\Lib\http\client.py", line 1058, in _send_output
    self.send(msg)
  File "C:\Program Files\Python311\Lib\http\client.py", line 996, in send
    self.connect()
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
           ^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000019B15D6DD50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\connectionpool.py", line 802, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\urllib3\util\retry.py", line 594, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/register (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000019B15D6DD50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\scripts\client.py", line 119, in register_client
    resp = requests.post(f'{API_BASE}/client/register', json=data)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 115, in post
    return request("post", url, data=data, json=json, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\api.py", line 59, in request
    return session.request(method=method, url=url, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\AppData\Roaming\Python\Python311\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /api/client/register (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000019B15D6DD50>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

[2025-06-04 20:30:02,240] ERROR: Registration failed. Retrying in 30 seconds...
[2025-06-04 20:30:32,887] DEBUG: Sending registration request to http://localhost:5000/api/client/register
[2025-06-04 20:30:32,888] DEBUG: Request data: {
  "name": "LAP-MOSHEG",
  "local_ip": "192.168.1.127",
  "public_ip": "37.142.97.8",
  "os": "Windows",
  "os_version": "10.0.26100",
  "cpu_type": "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel",
  "internet_access": true
}
[2025-06-04 20:30:34,980] DEBUG: Response status code: 500
[2025-06-04 20:30:34,980] DEBUG: Response headers: {'Server': 'Werkzeug/3.1.3 Python/3.11.9', 'Date': 'Wed, 04 Jun 2025 17:30:34 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '26927', 'Connection': 'close'}
[2025-06-04 20:30:34,981] DEBUG: Raw response text: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "m6uMC17bUv3BrAbm4vB4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2373426532784">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1686</em>,
      in <code class="function">register_client</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Generate RSA key pair</pre>
<pre class="line before"><span class="ws">        </span>private_key, public_key, encryption_key = generate_key_pair()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Create server record</pre>
<pre class="line current"><span class="ws">        </span>server = Server(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>local_ip=data[&#39;local_ip&#39;],</pre>
<pre class="line after"><span class="ws">            </span>public_ip=data[&#39;public_ip&#39;],</pre>
<pre class="line after"><span class="ws">            </span>os=data[&#39;os&#39;],</pre>
<pre class="line after"><span class="ws">            </span>os_version=data[&#39;os_version&#39;],</pre></div>
</div>

<li><div class="frame" id="frame-2373426532928">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">4</em>,
      in <code class="function">__init__</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2373426533072">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py"</cite>,
      line <em class="line">571</em>,
      in <code class="function">_initialize_instance</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>manager.dispatch.init(self, args, kwargs)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>manager.original_init(*mixed[1:], **kwargs)</pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>manager.dispatch.init_failure(self, args, kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_history(self, key: str, passive: PassiveFlag) -&gt; History:</pre>
<pre class="line after"><span class="ws">        </span>return self.manager[key].impl.get_history(self, self.dict, passive)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2373426533792">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2373426535088">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py"</cite>,
      line <em class="line">569</em>,
      in <code class="function">_initialize_instance</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>manager = self.manager</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>manager.dispatch.init(self, args, kwargs)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>manager.original_init(*mixed[1:], **kwargs)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>manager.dispatch.init_failure(self, args, kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_history(self, key: str, passive: PassiveFlag) -&gt; History:</pre></div>
</div>

<li><div class="frame" id="frame-2373426535232">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py"</cite>,
      line <em class="line">2175</em>,
      in <code class="function">_declarative_constructor</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>for example, any mapped columns or relationships.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>cls_ = type(self)</pre>
<pre class="line before"><span class="ws">    </span>for k in kwargs:</pre>
<pre class="line before"><span class="ws">        </span>if not hasattr(cls_, k):</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>&#34;%r is an invalid keyword argument for %s&#34; % (k, cls_.__name__)</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>setattr(self, k, kwargs[k])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-2373425222928">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2373425230416">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2373425230560">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2373425230704">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2373425230848">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2373425230992">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2373425231136">
  <h4>File <cite class="filename">"C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py"</cite>,
      line <em class="line">1722</em>,
      in <code class="function">register_client</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>&#39;public_key&#39;: public_key</pre>
<pre class="line before"><span class="ws">        </span>}), 201</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">        </span>db.session.rollback()</pre>
<pre class="line current"><span class="ws">        </span>current_app.logger.error(f&#34;Error registering client: {str(e)}&#34;)
<span class="ws">        </span>^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Internal server error&#39;}), 500</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Client commands endpoint</pre>
<pre class="line after"><span class="ws"></span>@client_api.route(&#39;/commands/&lt;int:client_id&gt;&#39;, methods=[&#39;GET&#39;])</pre>
<pre class="line after"><span class="ws"></span>@client_token_required</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1686, in register_client
    server = Server(
             ^^^^^^^
  File &#34;&lt;string&gt;&#34;, line 4, in __init__
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py&#34;, line 571, in _initialize_instance
    with util.safe_reraise():
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py&#34;, line 569, in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py&#34;, line 2175, in _declarative_constructor
    raise TypeError(
TypeError: &#39;os&#39; is an invalid keyword argument for Server

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py&#34;, line 1722, in register_client
    current_app.logger.error(f&#34;Error registering client: {str(e)}&#34;)
NameError: name &#39;current_app&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1686, in register_client
    server = Server(
             ^^^^^^^
  File "<string>", line 4, in __init__
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 571, in _initialize_instance
    with util.safe_reraise():
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 569, in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py", line 2175, in _declarative_constructor
    raise TypeError(
TypeError: 'os' is an invalid keyword argument for Server

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\MosheGabay\OneDrive - pango\Documents\Projects\PLATFORM ENIGNEER\PlatformEngineerSystem\flask-adminlte-master\apps\api.py", line 1722, in register_client
    current_app.logger.error(f"Error registering client: {str(e)}")
NameError: name 'current_app' is not defined


-->

